Activate Secure Boot on the Device
==================================

The final step to activate secure boot on your device is to burn the secure
eFuse configuration.

.. warning::

   The secure eFuse configuration can only be written once and is irreversible!

For Secure Boot only public information is burned to SOCs from NXP and TI.
When building the yocto-secure distro for the first time, the bootloader image
is signed with PHYTEC's development keys.
Yocto stores these development keys to ``yocto/phytec-dev-ca``

.. note::
   Create and use your own keys and certificates for signing your images.
   Burn the right key into the Controller eFuse.
   Please refer to the chapter |secure-key-storage-link|

eMMC Boot Partition to Enable Boot
----------------------------------

If you install your eMMC with the partup image, then the eMMC is configured
with the right configuration.
If you install the bootloader standalone on the eMMC, then please check the
eMMC configuration for the
right partition.

+------------------------------+---------------------------------+-----------------------------------+
|                              | barebox                         | u-boot                            |
+==============================+=================================+===================================+
| Set eMMC as an active device | ``barebox$ detect mmc3``        | ``u-boot=> mmc dev 2``            |
+------------------------------+---------------------------------+-----------------------------------+
| Show active boot partition   | ``barebox$ devinfo mmc3``       | ``u-boot=> mmc partconf 2``       |
+------------------------------+---------------------------------+-----------------------------------+
| Set user area for boot       | ``barebox$ mmc3.boot=disabled`` | ``u-boot=> mmc partconf 2 0 7 0`` |
+------------------------------+---------------------------------+-----------------------------------+
|                              || disabled: user partition       || 0x7: user partition              |
|                              || boot0: Boot partition 0        || 0x1: Boot partition 0            |
|                              || boot1: Boot partition 1        || 0x2: Boot partition 1            |
+------------------------------+---------------------------------+-----------------------------------+

Active boot output for barebox:
   .. code-block::

      ...
      Parameters:
      boot: disabled (type: enum) (values: "disabled", "boot0", "boot1", "user")
      nt_signature: 9a54880c (type: uint32)
      probe: 0 (type: bool)

Active boot output for u-boot
   .. code-block::

      EXT_CSD[179], PARTITION_CONFIG:
      BOOT_ACK: 0x0
      BOOT_PARTITION_ENABLE: 0x1
      PARTITION_ACCESS: 0x7

Activate Secure Boot for NXP SOC
--------------------------------

For NXP SOC you can burn the Fuses with u-boot or with the tool crucible in
the kernel userspace.
The necessary SRK fuses contain the hash value of the SRK public keys.
They are never used on open devices!
In closed devices, they are used to validate the public key contained in
signed firmware images.
Before closing the device, you must store the hash of the public keys in the
SRK OTP bits on the device.
This will allow the ROM loader to validate the public key included in signed
firmware images.

   * NXP i.MX with HAB: example ``SRK_1_2_3_4_fuse.bin`` file in ``yocto/phytec-dev-ca/nxp_habv4_pki/crts/SRK_1_2_3_4_fuse.bin``
   * NXP i.MX with AHAB: example ``SRK_1_2_3_4_fuse.bin`` file in ``yocto/phytec-dev-ca/nxp_ahab_pki/crts/SRK_1_2_3_4_fuse.bin``

If you build the signed bootloader, then the following tools are available in
the bootloader.

Check the current state of your device
......................................

   * NXP i.MX6 with HAB and bootloader barebox

   .. code-block::

      barebox$ hab -i
      Current SRK hash:
      0000000000000000000000000000000000000000000000000000000000000000
      devel mode

   * NXP i.MX8M Series with HAB and bootloader u-boot

   .. code-block::

      u-boot=> hab_status
      Secure boot disabled

      HAB Configuration: 0xf0, HAB State: 0x66
      No HAB Events Found!

   * NXP i.MX9 with AHAB and bootloader u-boot

   .. code-block::

      u-boot=> ahab_status
	   0x0287fad6
      IPC = MU APD (0x2)
      CMD = ELE_OEM_CNTN_AUTH_REQ (0x87)
      IND = ELE_BAD_KEY_HASH_FAILURE_IND (0xFA)
      STA = ELE_SUCCESS_IND (0xD6)

      0x0287fad6
      IPC = MU APD (0x2)
      CMD = ELE_OEM_CNTN_AUTH_REQ (0x87)
      IND = ELE_BAD_KEY_HASH_FAILURE_IND (0xFA)
      STA = ELE_SUCCESS_IND (0xD6)

   The reason for the ``ELE_BAD_KEY_HASH_FAILURE_IND`` is the zero hash in
   the fuses, which is wrong for the signature of the boot container.

Burn the SRK
............

   * NXP i.MX6 with HAB and bootloader barebox you can copy the SRK_1_2_3_4_fuse.bin
      to the device with e.g. tftp and burn directly with

   .. code-block::

      barebox$ hab -p -s SRK_1_2_3_4_fuse.bin

   to check

   .. code-block::

      barebox$ hab -i
      Current SRK hash:
      3425849ab41a49b07ba0b6d5e7dc92fd7cc80dc1a904bdd8e49f4e705953029b
      devel mode

   * SOC with u-boot you must write every word to the Fuses

+--------------------------------------------+--------------------------------------------------+--------------------------------------------------+
|                                            | NXP i.MX8M Series with HAB                       | NXP i.MX9 series with AHAB                       |
+============================================+==================================================+==================================================+
|| ``host:~$ od -t x4 SRK_1_2_3_4_fuse.bin`` || 0000000 9a842534 b0491ab4 d5b6a07b fd92dce7     || 0000000 baaf5d2c e92e0323 23c0ba08 10e7973f     |
||                                           || 0000020 c10dc87c d8bd04a9 704e9fe4 9b025359     || 0000020 678de0d5 966d3584 a541dfbe 6ea06dba     |
+--------------------------------------------+--------------------------------------------------+--------------------------------------------------+
|| burn the fuses                            || ``u-boot=> fuse prog 6 0 0x9a842534``           || ``u-boot=> fuse prog 16 0 0xbaaf5d2c``          |
||                                           || ``u-boot=> fuse prog 6 1 0xb0491ab4``           || ``u-boot=> fuse prog 16 1 0xe92e0323``          |
||                                           || ``u-boot=> fuse prog 6 2 0xd5b6a07b``           || ``u-boot=> fuse prog 16 2 0x23c0ba08``          |
||                                           || ``u-boot=> fuse prog 6 3 0xfd92dce7``           || ``u-boot=> fuse prog 16 3 0x10e7973f``          |
||                                           ||                                                 ||                                                 |
||                                           || ``u-boot=> fuse prog 7 0 0xc10dc87c``           || ``u-boot=> fuse prog 16 4 0x678de0d5``          |
||                                           || ``u-boot=> fuse prog 7 1 0xd8bd04a9``           || ``u-boot=> fuse prog 16 5 0x966d3584``          |
||                                           || ``u-boot=> fuse prog 7 2 0x704e9fe4``           || ``u-boot=> fuse prog 16 6 0xa541dfbe``          |
||                                           || ``u-boot=> fuse prog 7 3 0x9b025359``           || ``u-boot=> fuse prog 16 7 0x6ea06dba``          |
+--------------------------------------------+--------------------------------------------------+--------------------------------------------------+
|| read and check                            || ``u-boot=> fuse read 6 0 4``                    || ``u-boot=> fuse read 16 0 8``                   |
|| the fuses                                 || 0x00000000: 9a842534 b0491ab4 d5b6a07b fd92dce7 || 0x00000000: baaf5d2c e92e0323 23c0ba08 10e7973f |
||                                           || ``u-boot=> fuse read 7 0 4``                    || 0x00000004: 678de0d5 966d3584 a541dfbe 6ea06dba |
||                                           || 0x00000000: c10dc87c d8bd04a9 704e9fe4 9b025359 ||                                                 |
+--------------------------------------------+--------------------------------------------------+--------------------------------------------------+
| reset the booard                           | ``u-boot=> reset``                               | ``u-boot=> reset``                               |
+--------------------------------------------+--------------------------------------------------+--------------------------------------------------+
|| check the state                           || ``u-boot=> hab_status``                         || ``u-boot=> ahab_status``                        |
||                                           ||                                                 || Lifecycle: 0x00000008, OEM Open                 |
||                                           || No Events Found!                                || No Events Found!                                |
+--------------------------------------------+--------------------------------------------------+--------------------------------------------------+

Lock the device
...............

.. warning::
   This step is irreversible and could brick your device.
   Before closing the device:

      * Verify you have built a signed bootloader image.
      * Reset your board and verify there are no HAB or AHAB events.
      * Verify the SRK eFuses have been burned correctly.

* NXP i.MX6 with HAB and bootloader barebox:

.. code-block::

   barebox$ hab -p -l
   Device successfully locked down

The device is directly locked and the SRK is write protected, too.

* SOC with u-boot:

+---------------------------+---------------------------------------+------------------------------------+
|                           | NXP i.MX8M Series with HAB            | NXP i.MX9 series with AHAB         |
+===========================+=======================================+====================================+
|| Lock your device         || ``u-boot=> fuse prog 1 3 0x2000000`` || ``u-boot=> ahab_close``           |
|| Secure Boot active       ||                                      ||                                   |
+---------------------------+---------------------------------------+------------------------------------+
| Set Read protection       | not available                         | ``u-boot=> fuse prog 0 4 0x4000``  |
+---------------------------+---------------------------------------+------------------------------------+
|| Set Over-ride protection || not available                        || ``u-boot=> fuse prog 0 4 0x2000`` |
|| for shadow register      ||                                      ||                                   |
+---------------------------+---------------------------------------+------------------------------------+
|| Set Write protection     || ``u-boot=> fuse prog 0 0 0x200``     || ``u-boot=> fuse prog 0 4 0x1000`` |
|| for SRK                  ||                                      ||                                   |
+---------------------------+---------------------------------------+------------------------------------+


Activate Secure Boot for TI K3 SOC
----------------------------------

You can only burn the Fuses with the OTP-Keywriter, which you have create in
the chapter |phytec-pki-link|
You burn the public key in the SOC. You can override the keys, if you use the
incremental approach. If the KEYREV value is set to either 1 or 2, then the
device is a HS-SE device with active Secure boot. After that you can not write
any certificates with the keywriter tool.

Check the state of your device
..............................

When UART boot mode is selected, boot ROM reports the SoC ID via UART, for
both GP and HS devices. Additionally, this can determine the device
configuration, which can be used to check if device was converted from HS-FS to
HS-SE after key programming.

1. Set the boot mode switches into UART boot mode.

   *  AM62x

      .. image:: images/phycore-am62x/am62x_uartboot.png
         :width: 100px

   *  AM64x

       .. image:: images/phycore-am64x/am64_uartboot.png
         :width: 100px

   *  AM68x

       .. image:: images/phycore-am68x/am68x_uartboot.png
         :width: 200px

2. Open your serial terminal on ``/dev/ttyUSB0``
3. Power up your board
4. Copy the entire string up until "CCC" (ping characters) and Paste the string
   in ``<MCU_PLUS_SDK_INSTALL_DIR>/source/security/sbl_keywriter/tools/socid.txt``
   (For AM68x please download the otp_keywriter from AM62 to use this Python
   script.)
5. Run in ``<MCU_PLUS_SDK_INSTALL_DIR>/source/security/sbl_keywriter/tools/``

   .. code-block:: console

      host:~$  python parse_uart_boot_socid.py socid.txt
      -----------------------
      SoC ID Public ROM Info:
      -----------------------
      SubBlockId           :
      SubBlockSize         :
      DeviceName           : am62x
      DeviceType           : HSFS

6. After successful activation of Secure Boot the DeviceType is ``HSSE``
7. Additionally you can see the SHA512 hash of the used keys in the output with
   build profile DEBUG. This feature depends on the keywriter version.
   Then you can compare it with the hash of your signing key:

   .. code-block:: console

      host:~$  python parse_uart_boot_socid.py socid.txt
      ...
      -----------------------
      SoC ID Secure ROM Info:
      -----------------------
      Sec SubBlockId       : 2
      Sec SubBlockSize     : 166
      Sec Prime            : 0
      Sec Key Revision     : 1
      Sec Key Count        : 1
      Sec TI MPK Hash      : d68ecb2c055dff11ade95bd927e837d2a53bc23b0a2800cebce4f106bcf309df2213912d77a157a8b7c2df40672a06a918034aa4c7d603e462481475225d49b8
      Sec Cust MPK Hash    : 99adc5d401188641b1187d28b8e3f7bf94defcf48b503f6b45d6fe677da161a98a27956ecbc1c2f4af43867f56398bd147f54ce24b95f0725120d2b32ff2591f
      Sec Unique ID        : 2b8638ba724a82d7c6c0d1d19b56a13bd52da90bfcfa2efb6d6f8d26ed8830f5

Write the certificate and Lock the device
.........................................

To run the keywriter on your hardware we recommend starting with a regular
SD card that has an unsigned image on it.
Once you have your bootable SD card, copy the ``tiboot3.bin`` you generated
into the boot partition of the SD card, replacing the previous version of the
binary.
Alternatively you can use UART Boot or USBDFU, too.

**For the TI AM62x**

   Now you must set JP8 on the development kit for AM62x in order to flash
   the keys.

   .. image:: images/phycore-am62x/pb-07124_secureboot_JP8_J28.png
      :width: 700px

   .. note::
      For some older AM62x boards you also need to verify that the resistor
      on J28 is set to position 2+3.

**For the TI AM64x**

   Now you must set JP5 to pins 1 and 2 on the development kit in order to
   flash the keys.

   .. figure:: images/phycore-am64x/pb-07225_secureboot_JP5.png
      :width: 700px

**For the TI AM68x/TDA4x**

   You must not set any external jumper to flash the keys, because a GPIO on
   phyCORE-AM68x is used to switch the additional voltage.

Once this configuration is set, plug the SD card into the kit and boot as you
normally would. You should see the output messages from the keywriting:

*  AM62x and AM64x on Standard Debug Port:
*  AM68x on MCU UART Port (Header X33) with Serial Converter

If you are using the incremental approach to programming your keys, it is
essential that you run your Key Revision binary after all the other binaries
have been successfully run. Writing the key revision is what converts the
device to a secure boot device, so you will not be able to run your other
binaries after the key revision is set.

`The OTP key writer error codes <https://software-dl.ti.com/tisci/esd/latest/2_tisci_msgs/security/keywriter.html?highlight=keywriter%20debug%20response#otp-key-writer-error-codes>`_

Next Steps after Activation of Secure Boot
------------------------------------------

.. warning::
   After you have closed the device, consider the following points with
   regard to how firmware authentication can potentially be skipped:

   * JTAG could be used to boot the processor and avoid the secure boot.
     See Secure JTAG
   * The bootloader will drop to a console after an unsuccessful firmware
     authentication for debugging purposes. That console can still be used to
     boot, so it should be disabled in the production firmware.
     See Protection Shield Level
   * please check the NXP and TI websites for more information

Key Revocation
--------------

* NXP SOC: You have four keys from which you can revoke until 3 keys.
* TI K3 SOC: You have 2 keys, a SMPK and BMPK (Backup Key)

Revoke NXP SRK Key
..................

Although securing the device involves programming the hash of four public keys
into the eFuses, only one key (number 1 by default) is used in the secure boot
process. If the key gets compromised, it can be revoked and a different key
used.

To use a different key for the signature of bootloader images, change the
following variables in ``sources/meta-ampliphy/classes/secureboot.bbclass``:

.. code-block:: bash

   # for NXP with HABV4
   BOOTLOADER_SIGN_IMG_PATH ??= "${CERT_PATH}/nxp_habv4_pki/crts/IMG1_1_sha256_4096_65537_v3_usr_crt.pem"
   BOOTLOADER_SIGN_CSF_PATH ??= "${CERT_PATH}/nxp_habv4_pki/crts/CSF1_1_sha256_4096_65537_v3_usr_crt.pem"
   BOOTLOADER_HABV4_SRK_INDEX ??= "0"

   # for NXP with AHAB
   AHAB_SRK_TABLE_BIN ?= "${CERT_PATH}/nxp_ahab_pki/crts/SRK_1_2_3_4_table.bin"
   AHAB_SRK_PUB_CERT ?= "${CERT_PATH}/nxp_ahab_pki/crts/SRK1_sha512_secp521r1_v3_usr_crt.pem"
   AHAB_SRK_INDEX ?= "0"

The following keys are available:

+----------+----------------------+----------------------+-----------------+
| key Slot | IMG Certificate      | CSF Certificate      | SRK_REVOLE[2:0] |
+==========+======================+======================+=================+
| 0        | IMG1_1_sha256_4096_* | CSF1_1_sha256_4096_* | 001             |
+----------+----------------------+----------------------+-----------------+
| 1        | IMG2_1_sha256_4096_* | CSF2_1_sha256_4096_* | 010             |
+----------+----------------------+----------------------+-----------------+
| 2        | IMG3_1_sha256_4096_* | CSF3_1_sha256_4096_* | 100             |
+----------+----------------------+----------------------+-----------------+
| 3        | IMG4_1_sha256_4096_* | CSF4_1_sha256_4096_* | not revocable   |
+----------+----------------------+----------------------+-----------------+

Example for Revoke Key Slot 0 on NXP SOC with HABV4

+--------------------------------------------------+--------------------------------+
|| barebox                                         || u-boot                        |
|| i.MX6, i.MX6UL                                  || i.MX8M series                 |
+==================================================+================================+
| ``barebox$ mw -l -d /dev/imx-ocotp 0xBC 0x0001`` | ``u-boot=> fuse prog 9 3 0x1`` |
+--------------------------------------------------+--------------------------------+

.. note::
   * The SRK Revocation does not modify the SRK hash values, only the
     SRK_REVOKE fuse has to be programmed.
   * In a closed configuration, HAB, by default, sets the SRK_REVOKE_LOCK
     sticky bit in the OCOTP controller to write protect this eFuse field.
   * To instruct HAB not to lock the SRK_REVOKE field, the CSF commands in
     the bootloader need to be reconfigured.