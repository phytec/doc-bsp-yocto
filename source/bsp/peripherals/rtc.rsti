RTC
---

RTCs can be accessed via ``/dev/rtc*``. Because PHYTEC boards have often more than
one RTC, there might be more than one RTC device file.

*  To find the name of the RTC device, you can read its sysfs entry with:

   .. code-block:: console

      target:~$ cat /sys/class/rtc/rtc*/name

*  You will get, for example:

   .. code-block::

      rtc-rv3028 0-0052
      snvs_rtc 30370000.snvs:snvs-rtc-lp

.. tip::

   This will list all RTCs including the non-IÂ²C RTCs. Linux assigns RTC device
   IDs based on the device tree/aliases entries if present.

Date and time can be manipulated with the ``hwclock`` tool and the date command.
To show the current date and time set on the target:

.. code-block:: console

   target:~$ date
   Thu Jan  1 00:01:26 UTC 1970

Change the date and time with the date command. The date command sets the time
with the following syntax "YYYY-MM-DD hh:mm:ss (+|-)hh:mm":

.. code-block:: console

   target:~$ date -s "2022-03-02 11:15:00 +0100"
   Wed Mar  2 10:15:00 UTC 2022

.. note::

   Your timezone (in this example +0100) may vary.

Using the date command does not change the time and date of the RTC, so if we
were to restart the target those changes would be discarded. To write to the RTC
we need to use the ``hwclock`` command. Write the current date and time (set
with the date command) to the RTC using the ``hwclock`` tool and reboot the
target to check if the changes were applied to the RTC:

.. code-block:: console

   target:~$ hwclock -w
   target:~$ reboot
       .
       .
       .
   target:~$ date
   Wed Mar  2 10:34:06 UTC 2022

To set the time and date from the RTC use:

.. code-block:: console

   target:~$ date
   Thu Jan  1 01:00:02 UTC 1970
   target:~$ hwclock -s
   target:~$ date
   Wed Mar  2 10:45:01 UTC 2022

RTC Wakealarm
.............

It is possible to issue an interrupt from the RTC to wake up the system. The
format uses the Unix epoch time, which is the number of seconds since UTC
midnight on 1 January 1970. To wake up the system after 4 minutes from suspend
to ram state, type:

.. code-block:: console

   target:~$ echo "+240" > /sys/class/rtc/rtc0/wakealarm
   target:~$ echo mem > /sys/power/state

.. note::

   Internally the wake alarm time will be rounded up to the next minute since
   the alarm function doesn't support seconds.

.. rtc_parameter_start_label

RTC Parameters
..............

RTCs have a few abilities which can be read/set with the help of ``hwclock``
tool.

*  We can check RTC supported features with:

   .. code-block:: console

      target:~$ hwclock --param-get features
      The RTC parameter 0x0 is set to 0x71.

   What this value means is encoded in kernel, each set bit translates to:

   .. code-block::

      #define RTC_FEATURE_ALARM               0
      #define RTC_FEATURE_ALARM_RES_MINUTE    1
      #define RTC_FEATURE_NEED_WEEK_DAY       2
      #define RTC_FEATURE_ALARM_RES_2S        3
      #define RTC_FEATURE_UPDATE_INTERRUPT    4
      #define RTC_FEATURE_CORRECTION          5
      #define RTC_FEATURE_BACKUP_SWITCH_MODE  6
      #define RTC_FEATURE_ALARM_WAKEUP_ONLY   7
      #define RTC_FEATURE_CNT                 8

*  We can check RTC BSM (Backup Switchover Mode) with:

   .. code-block:: console

      target:~$ hwclock --param-get bsm
      The RTC parameter 0x2 is set to 0x1.

*  We can set RTC BSM with:

   .. code-block:: console

      target:~$ hwclock --param-set bsm=0x2
      The RTC parameter 0x2 will be set to 0x2.

   What BSM values mean translates to these values:

   .. code-block::

      #define RTC_BSM_DISABLED   0
      #define RTC_BSM_DIRECT     1
      #define RTC_BSM_LEVEL      2
      #define RTC_BSM_STANDBY    3

   .. tip::
      You should set BSM mode to DSM or LSM for RTC to switch to backup power
      source when the initial power source is not available. Check **RV-3028** RTC
      datasheet to read what LSM (Level Switching Mode) and DSM (Direct Switching
      Mode) actually mean.

.. rtc_parameter_end_label
