eMMC Boot Partitions
....................

An eMMC device contains four different hardware partitions: user, boot1, boot2,
and rpmb.

The user partition is called the User Data Area in the JEDEC standard and is the
main storage partition. The partitions boot1 and boot2 can be used to host the
bootloader and are more reliable. Which partition the |soc| uses to load
the bootloader is controlled by the boot configuration of the eMMC device. The
partition rpmb is a small partition and can only be accessed via a trusted
mechanism.

Furthermore, the user partition can be divided into four user-defined General
Purpose Area Partitions. An explanation of this feature exceeds the scope of
this document. For further information, see the JEDEC Standard Chapter 7.2
Partition Management.

.. tip::

   Do not confuse eMMC partitions with partitions of a DOS, MBR, or GPT
   partition table.

The current PHYTEC BSP does not use the extra partitioning feature of eMMC
devices. The U-Boot is flashed at the beginning of the user partition.
The U-Boot environment is placed at a fixed location after the U-Boot. An MBR
partition table is used to create two partitions, a FAT32 boot, and ext4 rootfs
partition. They are located right after the U-Boot and the U-Boot environment.
The FAT32 boot partition contains the kernel and device tree.

With eMMC flash storage it is possible to use the dedicated boot partitions for
redundantly storing the bootloader. The U-Boot environment still resides in the
user area before the first partition. The user area also still contains the
bootloader which the image first shipped during its initialization process.
Below is an example, to flash the bootloader to one of the two boot partitions
and switch the boot device via userspace commands.

Via userspace Commands
......................

On the host, run:

.. code-block:: console

   host:~$ scp imx-boot root@192.168.3.11:/tmp/

The partitions boot1 and boot2 are read-only by default. To write to them from
user space, you have to disable force_ro in the sysfs.

To manually write the bootloader to the eMMC boot partitions, first disable the
write protection:

.. code-block:: console

   target:~$ echo 0 > /sys/block/mmcblk2boot0/force_ro
   target:~$ echo 0 > /sys/block/mmcblk2boot1/force_ro

Write the bootloader to the eMMC boot partitions:

.. code-block:: console

   target:~$ dd if=/tmp/imx-boot of=/dev/mmcblk2boot0
   target:~$ dd if=/tmp/imx-boot of=/dev/mmcblk2boot1

The following table is for the offset of the |soc| SoC:

===== ========= =========== ============ ===================
SoC   Offset    Offset Boot eMMC Device  Bootloader Filename
      User Area Partition
===== ========= =========== ============ ===================
|soc| 32 kiB    0 kiB       /dev/mmcblk2 imx-boot
===== ========= =========== ============ ===================

After that set the boot partition from user space using the mmc tool:

(for 'boot0') :

.. code-block:: console

   target:~$ mmc bootpart enable 1 0 /dev/mmcblk2

(for 'boot1') :

.. code-block:: console

   target:~$ mmc bootpart enable 2 0 /dev/mmcblk2

To disable booting from the eMMC boot partitions simply enter the following
command:

.. code-block:: console

   target:~$ mmc bootpart enable 0 0 /dev/mmcblk2

To choose back to the user area u-boot environment:

.. code-block:: console

   target:~$ mmc bootpart enable 7 0 /dev/mmcblk2

Resizing ext4 Root Filesystem
.............................

fdisk can be used to expand the root filesystem. The example works for any block
device such as eMMC, SD Card, or hard disk.

*  Get the current device size:

   .. code-block:: console

      target:~$ fdisk -l /dev/mmcblk2

*  The output looks like:

   .. code-block::

      Disk /dev/mmcblk2: 7264 MB, 7616856064 bytes, 14876672 sectors 116224 cylinders, 4 heads, 32 sectors/track
      Units: sectors of 1 * 512 = 512 bytes

      Device       Boot StartCHS        EndCHS      StartLBA     EndLBA    Sectors   Size   Id Type
      /dev/mmcblk2p1 *    128,0,1       1023,3,32    16384       140779     124396   60.7M   c Win95 FAT32 (LBA)
      /dev/mmcblk2p2      1023,3,32     1023,3,32    141312      2192013    2050702  1001M  83 Linux

*  Use fdisk to delete and create a partition with a max size of the device:

   .. code-block:: console

      target:~$ fdisk /dev/mmcblk2

      The number of cylinders for this disk is set to 116224.
      There is nothing wrong with that, but this is larger than 1024,
      and could in certain setups cause problems with:
      1) software that runs at boot time (e.g., old versions of LILO)
      2) booting and partitioning software from other OSs
         (e.g., DOS FDISK, OS/2 FDISK)

      Command (m for help): p
      Disk /dev/mmcblk2: 7264 MB, 7616856064 bytes, 14876672 sectors
      116224 cylinders, 4 heads, 32 sectors/track
      Units: sectors of 1 * 512 = 512 bytes

      Device       Boot   StartCHS        EndCHS      StartLBA     EndLBA    Sectors   Size   Id Type
      /dev/mmcblk2p1 *     128,0,1     1023,3,32         16384     140779     124396  60,7M    c Win95 FAT32 (LBA)
      /dev/mmcblk2p2     1023,3,32     1023,3,32        141312    2192013    2050702  1001M   83 Linux

      Command (m for help): d
      Partition number (1-4): 2

      Command (m for help): p
      Disk /dev/mmcblk2: 7264 MB, 7616856064 bytes, 14876672 sectors
      116224 cylinders, 4 heads, 32 sectors/track
      Units: sectors of 1 * 512 = 512 bytes

      Device       Boot StartCHS    EndCHS          StartLBA     EndLBA    Sectors  Size   Id Type
      /dev/mmcblk2p1 *  128,0,1     1023,3,32          16384     140779     124396  60.7M   c Win95 FAT32 (LBA)

      Command (m for help): n
      Partition type
         p   primary partition (1-4)
         e   extended
      p
      Partition number (1-4): 2
      First sector (32-14876671, default 32): 141456
      Last sector or +size{,K,M,G,T} (141456-14876671, default 14876671):
      Using default value 14876671

      Command (m for help): p
      Disk /dev/mmcblk2: 7264 MB, 7616856064 bytes, 14876672 sectors
      116224 cylinders, 4 heads, 32 sectors/track
      Units: sectors of 1 * 512 = 512 bytes

      Device       Boot StartCHS      EndCHS        StartLBA     EndLBA    Sectors  Size   Id Type
      /dev/mmcblk2p1 *   128,0,1      1023,3,32        16384     140779     124396  60.7M   c Win95 FAT32 (LBA)
      /dev/mmcblk2p2   1023,3,32      1023,3,32       141456   14876671   14735216  7194M  83 Linux


Increasing the file system size can be done while it is mounted. An online
resizing operation is performed. But you can also boot the board from an SD card
and then resize the file system on the eMMC partition while it is not
mounted. Furthermore, the board has to be rebooted so that the new partition
table will be read.
