.. Download links
.. |dlpage-bsp| replace:: our BSP
.. _dlpage-bsp: https://www.phytec.de/bsp-download/?bsp=BSP-Yocto-NXP-i.MX93-PD24.1.0
.. |dlpage-product| replace:: https://www.phytec.de/produkte/system-on-modules/phycore-imx-91-93/#downloads
.. _dl-server: https://download.phytec.de/Software/Linux/BSP-Yocto-i.MX93/
.. _dl-sdk: https://download.phytec.de/Software/Linux/BSP-Yocto-i.MX93/BSP-Yocto-NXP-i.MX93-PD24.1.0/sdk/ampliphy-vendor-wayland/
.. |link-image| replace:: https://download.phytec.de/Software/Linux/BSP-Yocto-i.MX93/BSP-Yocto-NXP-i.MX93-PD24.1.0/images/ampliphy-vendor-wayland/phyboard-segin-imx93-2/phytec-qt6demo-image-phyboard-segin-imx93-2.wic.xz
.. |link-partup-package| replace:: https://download.phytec.de/Software/Linux/BSP-Yocto-i.MX93/BSP-Yocto-NXP-i.MX93-PD24.1.0/images/ampliphy-vendor-wayland/phyboard-segin-imx93-2/phytec-qt6demo-image-phyboard-segin-imx93-2.partup
.. |link-boot-tools| replace:: https://download.phytec.de/Software/Linux/BSP-Yocto-i.MX93/BSP-Yocto-NXP-i.MX93-PD24.1.0/images/ampliphy-vendor-wayland/phyboard-segin-imx93-2/imx-boot-tools/
.. _`static-pdf-dl`: ../../../_static/imx93-pd24.1.0.pdf

.. _releasenotes: https://git.phytec.de/phy2octo/tree/releasenotes?h=imx93

.. General Substitutions
.. |kit| replace:: **phyBOARD-Segin i.MX 93 Kit**
.. |kit-ram-size| replace:: 1GiB
.. |sbc| replace:: phyBOARD-Segin i.MX 93
.. |soc| replace:: i.MX 93
.. |socfamily| replace:: i.MX 9
.. |som| replace:: phyCORE-i.MX93
.. |debug-uart| replace:: ttyLP0
.. |expansion-connector| replace:: X16


.. Linux Kernel
.. |kernel-defconfig| replace:: imx_v8_defconfig imx9_phytec_distro.config imx9_phytec_platform.config
.. |kernel-recipe-path| replace:: meta-phytec/dynamic-layers/freescale-layer/recipes-kernel/linux/linux-imx_*.bb
.. |kernel-repo-name| replace:: linux-imx
.. |kernel-repo-url| replace:: git://git.phytec.de/linux-imx
.. |kernel-socname| replace:: imx93
.. |kernel-tag| replace:: v6.1.36_2.1.0-phy1
.. |emmcdev| replace:: mmcblk0

.. Bootloader
.. |u-boot-offset| replace:: 32
.. |u-boot-offset-boot-part| replace:: 0
.. |u-boot-mmc-flash-offset| replace:: 0x40
.. |u-boot-emmc-devno| replace:: 0
.. |u-boot-defconfig| replace:: phycore-imx93_defconfig
.. |u-boot-multiple-defconfig-note| replace:: In command above replace ``<defconfig>`` with ``phycore-imx93_defconfig``.
.. |u-boot-multiple-dtb-note| replace:: In command above replace ``<dtb>`` with ``imx93-phyboard-segin.dtb``.
.. |u-boot-imx-mkimage-tag| replace:: lf-6.1.36_2.1.0
.. |u-boot-soc-name| replace:: iMX9
.. |u-boot-recipe-path| replace:: meta-phytec/recipes-bsp/u-boot/u-boot-imx_*.bb
.. |u-boot-repo-name| replace:: u-boot-imx
.. |u-boot-repo-url| replace:: git://git.phytec.de/u-boot-imx


.. IMX93 specific
.. |u-boot-socname-config| replace:: IMX93
.. |u-boot-tag| replace:: v2023.04_2.1.0-phy1


.. Devicetree
.. |dt-carrierboard| replace:: imx93-phyboard-segin
.. |dt-som| replace:: imx93-phycore-som
.. |dtbo-rpmsg| replace:: imx93-phycore-rpmsg.dtso

.. IMX93 specific
.. |dt-somnetwork| replace:: :imx-dt:`imx93-phycore-som.dtsi?h=v6.1.36_2.1.0-phy1#n61`

.. Yocto
.. |yocto-bootenv-link| replace:: :yocto-bootenv:`mickledore`
.. |yocto-bsp-name| replace:: BSP-Yocto-i.MX93
.. _yocto-bsp-name: `dl-server`_
.. |yocto-codename| replace:: mickledore
.. |yocto-distro| replace:: ampliphy-vendor-wayland
.. |yocto-imagename| replace:: phytec-qt6demo-image
.. |yocto-imageext| replace:: wic.xz
.. |yocto-machinename| replace:: phyboard-segin-imx93-2
.. |yocto-manifestname| replace:: BSP-Yocto-NXP-i.MX93-PD24.1.0
.. |yocto-ref-manual| replace:: :ref:`Yocto Reference Manual (mickledore) <yocto-man-mickledore>`
.. |yocto-sdk-rev| replace:: 4.2.2
.. |yocto-sdk-a-core| replace:: cortexa55

.. Ref Substitutions
.. |ref-bootswitch| replace:: :ref:`bootmode switch (S3) <imx93-pd24.1.0-bootswitch>`
.. |ref-bsp-images| replace:: :ref:`BSP Images <imx93-pd24.1.0-images>`
.. |ref-debugusbconnector| replace:: serial connector on PEB-EVAL-01
.. |ref-dt| replace:: :ref:`device tree <imx93-pd24.1.0-device-tree>`
.. |ref-getting-started| replace:: :ref:`Getting Started <imx93-pd24.1.0-getting-started>`
.. |ref-network| replace:: :ref:`Network Environment Customization <imx93-pd24.1.0-network>`
.. |ref-setup-network-host| replace:: :ref:`Setup Network Host <imx93-pd24.1.0-development>`
.. |ref-usb-otg| replace:: :ref:`X8 (USB micro/OTG connector) <imx93-pd24.1.0-components>`


.. IMX93 specific
.. |sbc-network| replace::
   The device tree set up for EQOS Ethernet IP core where the PHY is populated
   on the |sbc| can be found here:
   :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n114`.

.. |ubootexternalenv| replace:: U-boot External Environment subsection of the
   :ref:`device tree overlay section <imx93-pd24.1.0-ubootexternalenv>`


.. M-Core specific
.. |mcore| replace:: M33 Core
.. |ref-m-core-connections| replace:: :ref:`X16 <imx93-pd24.1.0-components>`
.. |mcore-jtag-dev| replace:: MIMX8MM6_M4
.. |mcore-sdk-version| replace:: 2.13.0

.. only:: html

   Documentation in pdf format: `Download <static-pdf-dl_>`_

+-----------------------+----------------------+
| |soc| BSP Manual                             |
+-----------------------+----------------------+
| Document Title        | |soc| BSP Manual     |
+-----------------------+----------------------+
| Document Type         | BSP Manual           |
+-----------------------+----------------------+
| Yocto Manual          | Mickledore           |
+-----------------------+----------------------+
| Release Date          | 2024/01/31           |
+-----------------------+----------------------+
| Is Branch of          | |soc| BSP Manual     |
+-----------------------+----------------------+

The table below shows the Compatible BSPs for this manual:

==================== ================ ================ ==========
Compatible BSPs      BSP Release Type BSP Release Date BSP Status

==================== ================ ================ ==========
|yocto-manifestname| Major            2024/01/31       Released
==================== ================ ================ ==========


.. include:: ../../intro.rsti

Supported Hardware
------------------

On our web page, you can see all supported Machines with the available Article
Numbers for this release: |yocto-manifestname|, see `download <dlpage-bsp_>`_.

If you choose a specific **Machine Name** in the section **Supported Machines**,
you can see which **Article Numbers** are available under this machine and also
a short description of the hardware information. In case you only have
the **Article Number** of your hardware, you can leave the **Machine
Name** drop-down menu empty and only choose your **Article Number**. Now it
should show you the necessary **Machine Name** for your specific hardware.

.. _imx93-pd24.1.0-components:
.. include:: components.rsti

.. +---------------------------------------------------------------------------+
.. Getting Started
.. +---------------------------------------------------------------------------+

.. _imx93-pd24.1.0-getting-started:
.. include:: /bsp/getting-started.rsti

First Start-up
--------------

*  To boot from an SD card, the |ref-bootswitch| needs to be set to the following
   position:

.. image:: images/SD_Card_Boot.png

*  Insert the SD card
*  Connect the target (|ref-debugusbconnector|) and the host with **serial
   cable**
*  Power up the board
*  Open serial port with 115200 baud and 8N1 (you should see u-boot/linux start on the console

.. +---------------------------------------------------------------------------+
.. Building the BSP
.. +---------------------------------------------------------------------------+

.. include:: /bsp/building-bsp.rsti

.. _imx93-pd24.1.0-images:

*  **u-boot.bin**: Binary compiled U-boot bootloader (U-Boot). Not the final
   Bootloader image!
*  **oftree**: Default kernel device tree
*  **u-boot-spl.bin**: Secondary program loader (SPL)
*  **bl31-imx93.bin**: ARM Trusted Firmware binary
*  **lpddr4_dmem_1d_v202201.bin, lpddr4_dmem_2d_v202201.bin,
   lpddr4_imem_1d_v202201.bin,
   lpddr4_imem_2d_v202201.bin**: DDR PHY firmware images
*  **imx-boot**: Bootloader build by imx-mkimage which includes SPL, U-Boot, ARM
   Trusted Firmware and DDR firmware. This is the final bootloader image which is
   bootable.
*  **Image**: Linux kernel image
*  **Image.config**: Kernel configuration
*  **imx93-phyboard-segin.dtb**: Kernel device tree file
*  **imx93-phy\*.dtbo**: Kernel device tree overlay files
*  **phytec-\*.tar.gz**: Root file system,
   of bitbake-image that was built.

   * **phytec-qt6demo-image-phyboard-segin-imx93-2.tar.gz**: when bitbake-build
     was processed for ``phytec-qt6demo-image``
   * **phytec-headless-image-phyboard-segin-imx93-2.tar.gz**: when bitbake-build
     was processed for ``phytec-headless-image``
*  **phytec-\*.wic.xz**: Compressed bootable SD
   card image of bitbake-image that was built. Includes bootloader, DTBs, Kernel
   and Root file system.

   * **phytec-qt6demo-image-phyboard-segin-imx93-2.wic.xz**: when bitbake-build
     was processed for ``phytec-qt6demo-image``
   * **phytec-headless-image-phyboard-segin-imx93-2.wic.xz**: when bitbake-build
     was processed for ``phytec-headless-image``
*  **imx93-11x11-evk_m33_\*.bin**, binaries of demo applications for the
   Cortex-M33 MCU; can be manually loaded and started with U-Boot or Linux

.. +---------------------------------------------------------------------------+
.. INSTALLING THE OS
.. +---------------------------------------------------------------------------+

Installing the OS
=================

Bootmode Switch (S3)
--------------------

.. tip::

   Hardware revision baseboard: 1472.5

The |sbc| features a boot switch with four individually switchable ports to
select the phyCORE-|soc| default bootsource.

.. _imx93-pd24.1.0-bootswitch:
.. include:: bootmode-switch.rsti

Flash eMMC
----------

To boot from eMMC, make sure that the BSP image is flashed correctly to the eMMC
and the |ref-bootswitch| is set to **eMMC**.

.. warning::
   When eMMC and SD card are flashed with the same (identical) image, the UUIDs
   of the boot partitions are also identical. If the SD card is connected when
   booting, this leads to non-deterministic behavior as Linux mounts the boot
   partition based on UUID.

   .. code-block:: console

      target:~$ blkid

   can be run to inspect whether the current setup is affected. If |emmcdev|\p1
   and mmcblk1p1 have an identical UUID, the setup is affected.

Flash eMMC from SD Card
.......................

If there is no network available, you can update the eMMC from SD card. For
that, you only need a ready-to-use image file (``*.wic``) located on the
SD card. Because the image file is quite large, you have to enlarge your SD card
to use its full space (if it was not enlarged before). To enlarge your SD card,
see Resizing ext4 Root Filesystem.

Alternatively, flash a partup package to the SD card, as described in
|ref-getting-started|. This will ensure the full space of the SD card is used.

Flash eMMC from SD card in Linux on Target
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can flash the eMMC on Linux. You only need a partup package or WIC image
saved on the SD card.

*  Show your saved partup package or WIC image or WIC.XZ image files on the SD card:

   .. code-block:: console
      :substitutions:

      target:~$ ls
      |yocto-imagename|-|yocto-machinename|.partup
      |yocto-imagename|-|yocto-machinename|.|yocto-imageext|

*  Show list of available MMC devices:

   .. code-block:: console
      :substitutions:

      target:~$ ls /dev | grep mmc
      mmcblk1
      mmcblk1p1
      mmcblk1p2
      |emmcdev|
      |emmcdev|boot0
      |emmcdev|boot1
      |emmcdev|p1
      |emmcdev|p2
      |emmcdev|rpmb

*  The eMMC device can be recognized by the fact that it contains two boot
   partitions: (|emmcdev|\ **boot0**; |emmcdev|\ **boot1**)
*  Write the image to the phyCORE-|soc| eMMC (/dev/|emmcdev| **without**
   partition) using `partup`_:

   .. code-block:: console
      :substitutions:

      target:~$ partup install |yocto-imagename|-|yocto-machinename|.partup /dev/|emmcdev|

   .. tip::

      **Using partup is highly recommended since it is easier to use and has the
      advantage of using the full capacity of the eMMC device, adjusting
      partitions accordingly.**

   .. note::

      Alternatively, ``dd`` may be used instead.

      For uncompressed WIC images (\*.wic):

      .. code-block:: console
         :substitutions:

         target:~$ dd if=|yocto-imagename|-|yocto-machinename|.wic of=/dev/|emmcdev| bs=1M conv=fsync status=progress

      For compressed WIC images (\*.wic.xz):

      .. code-block:: console
         :substitutions:

         target:~$ zstdcat |yocto-imagename|-|yocto-machinename|.wic.xz | sudo dd of=/dev/|emmcdev| bs=1M conv=fsync status=progress

      Keep in mind that the root partition does not make use of the full space
      when flashing with ``dd``.

*  After a complete write, your board can boot from eMMC.

   .. warning::

      Before this will work, you need to configure the |ref-bootswitch| to eMMC.

Flash eMMC from Network
.......................

|soc| boards have an Ethernet connector and can be updated over a network. Be
sure to set up the development host correctly. The IP needs to be set to
192.168.3.10, the netmask to 255.255.255.0, and a TFTP server needs to be
available. From a high-level point of view, an eMMC device is like an SD card.
Therefore, it is possible to flash the **WIC image** (``<name>.wic``) from
the Yocto build system directly to the eMMC. The image contains the
bootloader, kernel, device tree, device tree overlays, and root file system.

.. note::

   Some PHYTECs BSPs produce compressed ``.wic.xz`` images. In this case, the
   compressed image must first be uncompressed.

   .. code-block:: console
      :substitutions:

      host:~$ unxz phytec-qt6demo-image-phyboard-segin-imx93-2.wic.xz

Flash eMMC via Network in Linux on Target
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can update the eMMC from your target.

.. tip::

   A working network is necessary! |ref-setup-network-host|

Take an uncompressed image on the host and send it with ssh through
the network to the eMMC of the target with a one-line command:

.. code-block:: console
   :substitutions:

   target:~$ ssh <USER>@192.168.3.10 "dd if=<path_to_file>/|yocto-imagename|-|yocto-machinename|.wic" | dd of=/dev/|emmcdev| bs=1M conv=fsync status=progress

Flash eMMC via Network in Linux on Host
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It is also possible to install the OS at eMMC from your Linux host. As before,
you need a complete image on your host.

.. tip::

   A working network is necessary! |ref-setup-network-host|

Show your available image files on the host:

.. code-block:: console
   :substitutions:

   host:~$ ls
   |yocto-imagename|-|yocto-machinename|.wic

Send the image with the ``dd`` command combined with ssh through the network
to the eMMC of your device:

.. code-block:: console
   :substitutions:

   host:~$ dd if=|yocto-imagename|-|yocto-machinename|.wic bs=1M status=progress | ssh root@192.168.3.11 "dd of=/dev/|emmcdev| conv=fsync"

Flash eMMC U-Boot image via Network from running U-Boot
.......................................................

Update the standalone U-Boot image imx-boot is also possible from U-Boot. This
can be used if the bootloader on eMMC is located in the eMMC user area.

.. tip::

   A working network is necessary! |ref-setup-network-host|

Load image over tftp into RAM and then write it to eMMC:

.. code-block::
   :substitutions:

   u-boot=> tftp ${loadaddr} imx-boot
   u-boot=> setexpr nblk ${filesize} / 0x200
   u-boot=> mmc dev 0
   u-boot=> mmc write ${loadaddr} |u-boot-mmc-flash-offset| ${nblk}

.. hint::
   The hexadecimal value represents the offset as a multiple of 512 byte
   blocks. See the `offset table <#offset-table>`__ for the correct value
   of the corresponding SoC.

Flash eMMC from USB
...................

Flash eMMC from USB in Linux
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

These steps will show how to flash the eMMC on Linux with a USB stick. You only
need a complete image saved on the USB stick and a bootable WIC image. (e.g.
|yocto-imagename|-|yocto-machinename|.wic). Set the |ref-bootswitch| to SD Card.

*  Insert and mount the USB stick:

   .. code-block:: console

      [   60.458908] usb-storage 1-1.1:1.0: USB Mass Storage device detected
      [   60.467286] scsi host0: usb-storage 1-1.1:1.0
      [   61.504607] scsi 0:0:0:0: Direct-Access                               8.07 PQ: 0 ANSI: 2
      [   61.515283] sd 0:0:0:0: [sda] 3782656 512-byte logical blocks: (1.94 GB/1.80 GiB)
      [   61.523285] sd 0:0:0:0: [sda] Write Protect is off
      [   61.528509] sd 0:0:0:0: [sda] No Caching mode page found
      [   61.533889] sd 0:0:0:0: [sda] Assuming drive cache: write through
      [   61.665969]  sda: sda1
      [   61.672284] sd 0:0:0:0: [sda] Attached SCSI removable disk
      target:~$ mount /dev/sda1 /mnt

*  Now show your saved image files on the USB Stick:

   .. code-block:: console
      :substitutions:

      target:~$ cd /mnt
      target:~$ ls
      |yocto-imagename|-|yocto-machinename|.wic

*  Show list of available MMC devices:

   .. code-block:: console
      :substitutions:

      target:~$ ls /dev | grep mmc
      mmcblk1
      mmcblk1p1
      mmcblk1p2
      |emmcdev|
      |emmcdev|boot0
      |emmcdev|boot1
      |emmcdev|p1
      |emmcdev|p2
      |emmcdev|rpmb

*  The eMMC device can be recognized by the fact that it contains two boot
   partitions: (|emmcdev|\ **boot0**; |emmcdev|\ **boot1**)
*  Write the image to the phyCORE-|soc| eMMC (/dev/|emmcdev| without partition):

   .. code-block:: console
      :substitutions:

      target:~$ dd if=|yocto-imagename|-|yocto-machinename|.wic of=/dev/|emmcdev| bs=1M conv=fsync status=progress

*  After a complete write, your board can boot from eMMC.

   .. tip::

      Before this will work, you need to configure the |ref-bootswitch| to
      **eMMC**.

RAUC
----

The RAUC (Robust Auto-Update Controller) mechanism support has been added to
meta-ampliphy. It controls the procedure of updating a device with new firmware.
This includes updating the Linux kernel, Device Tree, and root filesystem.
PHYTEC has written an online manual on how we have intergraded RAUC into our
BSPs: `L-1006e.A5 RAUC Update & Device Management Manual
<https://www.phytec.de/cdocuments/?doc=fgByJg>`__.

.. +---------------------------------------------------------------------------+
.. DEVELOPMENT
.. +---------------------------------------------------------------------------+

.. _imx93-pd24.1.0-development:

Development
===========

.. include:: ../../imx-common/development/host_network_setup.rsti
.. include:: ../../imx-common/development/netboot.rsti

Working with UUU-Tool
---------------------

The Universal Update Utility Tool (UUU-Tool) from NXP is a software to execute
on the host to load and run the bootloader on the board through SDP (Serial
Download Protocol). For detailed information visit
https://github.com/nxp-imx/mfgtools or download the `Official UUU-tool
documentation <https://community.nxp.com/pwmxy87654/attachments/pwmxy87654/imx-processors/140261/1/UUU.pdf>`_.

Host preparations for UUU-Tool Usage
....................................

*  Follow the instructions from https://github.com/nxp-imx/mfgtools#linux.

*  If you built UUU from source, add it to ``PATH``:

   This BASH command adds UUU only temporarily to ``PATH``. To add it permanently, add this line to
   ``~/.bashrc``.

   .. code-block:: console

      export PATH=~/mfgtools/uuu/:"$PATH"

*  Set udev rules (documented in ``uuu -udev``):

   .. code-block:: console

      host:~$ sudo sh -c "uuu -udev >> /etc/udev/rules.d/70-uuu.rules"
      host:~$ sudo udevadm control --reload

Get Images
..........

Download imx-boot from our server or get it from your Yocto build directory at
build/deploy/images/|yocto-machinename|/. For flashing a wic image to eMMC,
you will also need |yocto-imagename|-|yocto-machinename|.wic.

Prepare Target
..............

Set the |ref-bootswitch| to **USB Serial Download**. Also, connect USB port
|ref-usb-otg| to your host.

Starting bootloader via UUU-Tool
................................

Execute and power up the board:

.. code-block:: console

   host:~$ sudo uuu -b spl imx-boot

You can see the bootlog on the console via |ref-debugusbconnector|, as usual.

.. note::
   The default boot command when booting with UUU-Tool is set to fastboot. If
   you want to change this, please adjust the environment variable bootcmd_mfg
   in U-boot prompt with setenv bootcmd_mfg. Please note, when booting with
   UUU-tool the default environment is loaded. Saveenv has no effect. If you
   want to change the boot command permanently for UUU-boot, you need to change
   this in U-Boot code.

Flashing U-boot Image to eMMC via UUU-Tool
...........................................

.. warning::

   UUU flashes U-boot into eMMC BOOT (hardware) boot partitions, and it sets
   the BOOT_PARTITION_ENABLE in the eMMC! This is a problem since we want the
   bootloader to reside in the eMMC USER partition. Flashing next U-Boot version
   .wic image and not disabling BOOT_PARTITION_ENABLE bit will result in device
   always using U-boot saved in BOOT partitions. To fix this in U-Boot:

   .. code-block:: console
      :substitutions:

      u-boot=> mmc partconf |u-boot-emmc-devno| 0 0 0
      u-boot=> mmc partconf |u-boot-emmc-devno|
      EXT_CSD[179], PARTITION_CONFIG:
      BOOT_ACK: 0x0
      BOOT_PARTITION_ENABLE: 0x0
      PARTITION_ACCESS: 0x0

   or check :ref:`Disable booting from eMMC boot partitions <emmc-disable-boot-part>`
   from Linux.

   This way the bootloader is still flashed to eMMC BOOT partitions but it is
   not used!

   When using **partup** tool and ``.partup`` package for eMMC flashing this is
   done by default, which makes partup again superior flash option.

Execute and power up the board:

.. code-block:: console

   host:~$ sudo uuu -b emmc imx-boot

Flashing wic Image to eMMC via UUU-Tool
...........................................

Execute and power up the board:

.. code-block:: console
   :substitutions:

   host:~$ sudo uuu -b emmc_all imx-boot |yocto-imagename|-|yocto-machinename|.wic

.. include:: ../../imx-common/development/standalone_build_preface.rsti
.. include:: ../../imx-common/development/standalone_build_u-boot_imxmkimage.rsti
.. include:: ../../imx-common/development/standalone_build_kernel.rsti

.. include:: ../../imx-common/development/format_sd-card.rsti

.. +---------------------------------------------------------------------------+
.. DEVICE TREE
.. +---------------------------------------------------------------------------+

.. _imx93-pd24.1.0-device-tree:
.. include:: /bsp/device-tree.rsti

::

   imx93-phyboard-segin-peb-av-02.dtbo
   imx93-phyboard-segin-peb-eval-01.dtbo
   imx93-phycore-rpmsg.dtbo

.. _imx93-pd24.1.0-ubootexternalenv:
.. include:: ../dt-overlays.rsti

.. +---------------------------------------------------------------------------+
.. ACCESSING PERIPHERALS
.. +---------------------------------------------------------------------------+


.. include:: /bsp/peripherals/introduction.rsti

.. include:: /bsp/imx-common/peripherals/pin-muxing.rsti

The following is an example of the pin muxing of the UART1 device in
|dt-carrierboard|.dts:

.. code-block::

   pinctrl_uart1: uart1grp {
           fsl,pins = <
                   MX93_PAD_UART1_RXD__LPUART1_RX     0x31e
                   MX93_PAD_UART1_TXD__LPUART1_TX     0x30e
           >;
   };

The first part of the string MX93_PAD_UART1_RXD__LPUART1_RX names the pad
(in this example UART1_RXD). The second part of the string (LPUART1_RX) is the
desired muxing option for this pad. The pad setting value (hex value on the
right) defines different modes of the pad, for example, if internal pull
resistors are activated or not. In this case, the internal pull up is
activated.

The device tree representation for UART1 pinmuxing:
:imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n267`

.. _imx93-pd24.1.0-network:

Network
-------

|sbc|-|soc| provides two ethernet interfaces. A 100 megabit Ethernet is provided by our
module and board.

.. include:: /bsp/imx-common/peripherals/network.rsti

.. include:: /bsp/imx-common/peripherals/sd-card.rsti

DT configuration for the MMC (SD card slot) interface can be found here:
:imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n216`

DT configuration for the eMMC interface can be found here:
:imx-dt:`imx93-phycore-som.dtsi?h=v6.1.36_2.1.0-phy1#n195`

.. include:: /bsp/peripherals/emmc.rsti

.. include:: /bsp/imx-common/emmc.rsti

.. include:: ../peripherals/gpios.rsti

.. include:: ../peripherals/leds.rsti

Device tree configuration for the User I/O configuration can be found here:
:imx-dt:`imx93-phyboard-segin-peb-eval-01.dtso?h=v6.1.36_2.1.0-phy1#n33`

.. include:: /bsp/imx-common/peripherals/i2c-bus.rsti

General I²C1 bus configuration (e.g. |dt-som|.dtsi):
:imx-dt:`imx93-phycore-som.dtsi?h=v6.1.36_2.1.0-phy1#n88`

General I²C2 bus configuration (e.g. |dt-carrierboard|.dts)
:imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n155`


EEPROM
------

There are two different I2C EEPROM flashes populated on |som| SoM and on the
|sbc|. For now only the one on the |som| is enabled, and it is used for board
detection.

.. include:: ../peripherals/eeprom.rsti

DT representation, e.g. in phyCORE-|soc| file can be found in our PHYTEC git:
:imx-dt:`imx93-phycore-som.dtsi?h=v6.1.36_2.1.0-phy1#n173`

.. include:: ../../peripherals/rtc.rsti

DT representation for I²C RTCs:
:imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n173`

USB Host Controller
-------------------

The USB controller of the |soc| SoC provides a low-cost connectivity solution
for numerous consumer portable devices by providing a mechanism for data
transfer between USB devices with a line/bus speed of up to 480 Mbps (HighSpeed
'HS'). The USB subsystem has two independent USB controller cores. Both cores
are capable of acting as a USB peripheral device or a USB host, but on the |sbc|
one of them is used as a host-only port (USB-A connector).

.. include:: /bsp/peripherals/usb-host.rsti

The OTG port provides an additional pin for over-current protection, which is
not used on the |sbc|. Since it's not used, the driver part is also disabled
from within the device tree. In case this pin is used, activate this
over-current in the device tree and set the correct polarity (active high/low)
according to the device specification. For the correct setup, please refer to
the Kernel documentation under
Linux/Documentation/devicetree/bindings/usb/ci-hdrc-usb2.txt.

DT representation for USB Host:
:imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n190`

CAN FD
------

The |sbc| has one flexCAN interface supporting CAN FD. They are supported by the
Linux standard CAN framework which builds upon the Linux network layer. Using
this framework, the CAN interfaces behave like an ordinary Linux network device,
with some additional features special to CAN. More information can be found in
the Linux Kernel
documentation: https://www.kernel.org/doc/html/latest/networking/can.html

.. include:: ../peripherals/canfd.rsti

Device Tree CAN configuration of |dt-carrierboard|.dts:
:imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n147`

Audio
-----

On |sbc| the TI TLV320AIC3007 audio codec is used. It uses I2S for data
transmission and I2C for codec control. The audio signals available are:

* Stereo LINE IN,
* Stereo LINE OUT,
* Output where D-Class 1W speaker can be connected

.. include:: /bsp/peripherals/audio.rsti
	:end-before: .. audio_alsa_configuration_start_label

.. include:: /bsp/peripherals/audio.rsti
   :start-after: .. audio_playback_start_label
   :end-before: .. audio_capture_start_label

If Speaker volume it too low you can increase its volume with (values 0-3):

.. code-block:: console

   target:~$ amixer -c 0 sset Class-D 3

.. hint::

   Speaker output is only mono so when stereo track is played only left channel
   will be played by speaker.

Capture
.......

``arecord`` is a command-line tool for capturing audio streams which use Line In
as the default input source.

.. code-block:: console

   target:~$ arecord -t wav -c 2 -r 44100 -f S16_LE test.wav

.. hint::

   Since playback and capture share hardware interfaces, it is not possible to
   use different sampling rates and formats for simultaneous playback and
   capture operations.

Device Tree Audio configuration:
:imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n62`

.. include:: /bsp/peripherals/video.rsti

.. include:: display.rsti

.. include:: /bsp/qt6.rsti

.. include:: /bsp/imx-common/peripherals/display.rsti

The device tree of PEB-AV-02 can be found here:
:imx-dt:`imx93-phyboard-segin-peb-av-02.dtso?h=v6.1.36_2.1.0-phy1`

.. include:: peripherals/pm.rsti

.. include:: ../peripherals/tm.rsti

.. include:: /bsp/peripherals/watchdog.rsti

.. include:: ../peripherals/bbnsm-power-key.rsti

.. include:: ../peripherals/pxp.rsti

.. include:: ../peripherals/ocotp-ctrl.rsti

.. +---------------------------------------------------------------------------+
.. i.MX 8M Plus M7 Core
.. +---------------------------------------------------------------------------+

.. include:: ../mcu.rsti
