|soc| |mcore|
=============

In addition to the Cortex-A55 cores, there is a Cortex-|mcore| as MCU
integrated into the |soc| SoC. Our Yocto-Linux-BSP runs on the A55-Cores and
the |mcore| can be used as a secondary core for additional tasks using
bare-metal firmware.
Both cores have access to the same peripherals and thus peripheral
usage needs to be limited either in the |mcore|'s firmware or the devicetree
for the Linux operating system.

Our Yocto-BSP contains pre-built firmware examples for |mcore| from NXP.

This section describes how to run pre-built |mcore| firmware examples on |sbc|.

Running |mcore| Examples
------------------------

There are two ways to run the |mcore| firmware examples, from U-Boot bootloader
and from Remoteproc subsystem within a running Linux.

To receive debug messages start your favorite terminal software (e.g. Minicom,
Tio, or Tera Term) on your host PC and configure it for 115200 baud, 8 data
bits, no parity, and 1 stop bit (8n1) with no handshake.

On |sbc| an external "USB TTL to serial adapter" is required. Adapter's I/O
pins should be able to operate at 3.3V voltage levels.

Connect external "USB TTL to serial adapter" signals to the
|ref-m-core-connections| connector on the board according to the following
table:

==================== ========== =======
USB-TTL adapter pins X16 signal X16 pin
==================== ========== =======
RXD                  X_UART2_TX       5
TXD                  X_UART2_RX       8
GND                  GND              4
==================== ========== =======

Running Examples from U-Boot
............................

To load firmware examples using the U-Boot bootloader, the ``bootaux`` command
can be used:

1. Prepare an SD Card with our Yocto-BSP
2. Stop the autoboot by pressing any key
3. List available |mcore| firmware examples on the first partition of SD Card:

.. code-block:: console

   u-boot=> ls mmc 1

.. note::

   Available firmware examples start with ``imx93-11x11-evk_m33_TCM_*`` and
   end with ``*.bin``. Examples come from NXP's Yocto layer meta-imx and are
   selected based on compatibility with |sbc| hardware.

1. Load desired firmware example:

.. code-block:: console

   u-boot=> fatload mmc 1 ${loadaddr} <firmware.bin>
   u-boot=> cp.b ${loadaddr} 0x201e0000 ${filesize}
   u-boot=> run prepare_mcore
   u-boot=> bootaux 0x1ffe0000 0
   ## Starting auxiliary core addr = 0x1FFE0000...

The program's output should appear on the |mcore|'s debug UART.

Running Examples from Linux using Remoteproc
............................................

Remoteproc is a module that allows you to control the |mcore| from Linux
during runtime. Firmware examples for |mcore| can be loaded and the execution
started or stopped within Linux. To use Remoteproc a devicetree overlay needs
to be set:

Edit the ``bootenv.txt`` file located in the ``/boot`` directory on the target
by adding |dtbo-rpmsg|:

.. code-block::
   :substitutions:

   overlays=imx93-phyboard-segin-peb-av-02.dtbo |dtbo-rpmsg|

Restart the target and execute in U-Boot::

   u-boot=> run prepare_mcore

Firmware examples ``*.elf`` files for the |mcore| can be found under
``/lib/firmware``. List available firmware examples:

.. code-block:: console

   target:~$ ls /lib/firmware/*.elf

To load the firmware, type:

.. code-block:: console

   target:~$ echo /lib/firmware/<firmware>.elf> /sys/class/remoteproc/remoteproc0/firmware
   target:~$ echo start > /sys/class/remoteproc/remoteproc0/state

To load a different firmware, the |mcore| needs to be stopped:

.. code-block:: console

   target:~$ echo stop > /sys/class/remoteproc/remoteproc0/state

.. note::

   The samples found in ``/lib/firmware`` on the target come from NXP's
   Yocto layer meta-imx and are selected based on compatibility with |sbc|
   hardware.

Some firmware examples from NXP require additional Linux kernel modules to be
loaded.

For example, when loading ``imx93-11x11-evk_m33_TCM_rpmsg_lite_str_echo_rtos.elf``
firmware, one requires corresponding ``imx_rpmsg_tty`` module to be loaded:

.. code-block:: console

   target:~$ modprobe imx_rpmsg_tty

This exposes an RPMsg endpoint as a virtual TTY at ``/dev/ttyRPMSG30``.
Now it is possible to send messages from A55 Core to |mcore| by typing:

.. code-block:: console

   target:~$ echo "PHYTEC" > /dev/ttyRPMSG30

Observing |mcore| debug UART should result in the following output:

.. code-block:: console

   RPMSG String Echo FreeRTOS RTOS API Demo...

   Nameservice sent, ready for incoming messages...
   Get Message From Master Side : "PHYTEC" [len : 6]
