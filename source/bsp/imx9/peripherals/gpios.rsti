GPIOs
-----

The |sbc| doesn't have a set of pins especially dedicated for user I/Os since
all GPIOs are used by kernel device drivers or used for a specific purpose. The
processor has organized its GPIOs into five banks of 32 GPIOs each (GPIO1 –
GPIO4) GPIOs. gpiochip0, gpiochip32, gpiochip64 and gpiochip96 are the sysfs
representation of these internal |soc| GPIO banks GPIO1 – GPIO4.

The GPIOs are identified as GPIO<X>_<Y> (e.g. GPIO4_07). <X> identifies the GPIO
bank and counts from 1 to 4, while <Y> stands for the GPIO within the bank. <Y>
is being counted from 0 to 31 (32 GPIOs on each bank).

By contrast, the Linux kernel uses a single integer to enumerate all available
GPIOs in the system. The formula to calculate the right number is:

.. code-block::

   Linux GPIO number: <N> = (<X> - 1) * 32 + <Y>

Accessing GPIOs from userspace will be done using the libgpiod. It provides a
library and tools for interacting with the Linux GPIO character device. Examples
of some usages of various tools:

*  Detecting the gpiochips on the chip:

   .. code-block:: console

      target:~$ gpiodetect
      gpiochip0 [43810000.gpio] (32 lines)
      gpiochip1 [43820000.gpio] (32 lines)
      gpiochip2 [43830000.gpio] (32 lines)
      gpiochip3 [47400000.gpio] (32 lines)

.. note::

   Order of GPIOchips in ``i.MX 93 Application Processor Reference Manual`` and
   in Linux kernel differ!

   +------------------+-----------+------------------+
   | GPIOchip address | Linux     | Reference Manual |
   +------------------+-----------+------------------+
   | 0x43810000       | gpiochip0 | gpiochip2        |
   +------------------+-----------+------------------+
   | 0x43820000       | gpiochip1 | gpiochip3        |
   +------------------+-----------+------------------+
   | 0x43830000       | gpiochip2 | gpiochip4        |
   +------------------+-----------+------------------+
   | 0x47400000       | gpiochip3 | gpiochip1        |
   +------------------+-----------+------------------+

*  Show detailed information about the gpiochips. Like their names, consumers,
   direction, active state, and additional flags:

   .. code-block:: console

      target:~$ gpioinfo -c gpiochip0

*  Read the value of a GPIO (e.g GPIO 3 from chip0):

   .. code-block:: console

      target:~$ gpioget -c gpiochip0 3

*  Set the value of GPIO 3 on chip0 to 0 and daemonize:

   .. code-block:: console

      target:~$ gpioset -z -c gpiochip0 3=0

.. note::

   When demonizing gpioset command please note that the process is still running in
   the background and you need to kill it afterward to release the GPIO. Otherwise
   you might get an error when trying to change state of the same GPIO:

   .. code-block:: console

      target:~$ gpioset -z -c gpiochip0 3=1
      gpioset: unable to request lines on chip '/dev/gpiochip0': Device or resource busy

   This is the expected behavior in libgpiod version 2.

   As a workaround it is possible to use the ``-t 0`` switch:

   .. code-block:: console

      target:~$ gpioset -t0 -c gpiochip0 3=0

*  Help text of gpioset shows possible options:

   .. code-block:: console

      target:~$ gpioset --help
      Usage: gpioset [OPTIONS] <line=value>...

      Set values of GPIO lines.

      Lines are specified by name, or optionally by offset if the chip option
      is provided.
      Values may be '1' or '0', or equivalently 'active'/'inactive' or 'on'/'off'.

      The line output state is maintained until the process exits, but after that
      is not guaranteed.

      Options:
            --banner          display a banner on successful startup
      -b, --bias <bias>     specify the line bias
                              Possible values: 'pull-down', 'pull-up', 'disabled'.
                              (default is to leave bias unchanged)
            --by-name         treat lines as names even if they would parse as an offset
      -c, --chip <chip>     restrict scope to a particular chip
      -C, --consumer <name> consumer name applied to requested lines (default is 'gpioset')
      -d, --drive <drive>   specify the line drive mode
                              Possible values: 'push-pull', 'open-drain', 'open-source'.
                              (default is 'push-pull')
      -h, --help            display this help and exit
      -l, --active-low      treat the line as active low
      -p, --hold-period <period>
                              the minimum time period to hold lines at the requested values
      -s, --strict          abort if requested line names are not unique
      -t, --toggle <period>[,period]...
                              toggle the line(s) after the specified period(s)
                              If the last period is non-zero then the sequence repeats.
            --unquoted        don't quote line names
      -v, --version         output version information and exit
      -z, --daemonize       set values then detach from the controlling terminal

      Chips:
         A GPIO chip may be identified by number, name, or path.
         e.g. '0', 'gpiochip0', and '/dev/gpiochip0' all refer to the same chip.

      Periods:
         Periods are taken as milliseconds unless units are specified. e.g. 10us.
         Supported units are 's', 'ms', and 'us'.

      *Note*
         The state of a GPIO line controlled over the character device reverts to default
         when the last process referencing the file descriptor representing the device file exits.
         This means that it's wrong to run gpioset, have it exit and expect the line to continue
         being driven high or low. It may happen if given pin is floating but it must be interpreted
         as undefined behavior.

.. warning::

   Some of the user IOs are used for special functions. Before using a user IO,
   refer to the schematic or the hardware manual of your board to ensure that it
   is not already in use.

GPIOs via sysfs
...............

.. warning::

   Accessing gpios via sysfs is deprecated and we encourage to use libgpiod
   instead.

Support to access GPIOs via sysfs is not enabled by default any more.
It is only possible with manually enabling CONFIG_GPIO_SYSFS in the kernel
configuration. To make CONFIG_GPIO_SYSFS visible in menuconfig the option
CONFIG_EXPERT has to be enabled first.

You can also add this option for example to the imx9_phytec_defconfig config
in the linux kernel sources under arch/arm64/configs ::

   ..
   CONFIG_GPIO_SYSFS=y
   ..
