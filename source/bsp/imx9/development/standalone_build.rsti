Standalone Build
----------------

In this section, we describe how to build the U-Boot and the Linux kernel
without using the `Yocto Project <https://www.yoctoproject.org/>`__. This
procedure makes the most sense for development. The U-Boot source code,
the Linux kernel, and all other git repositories are available on our
`Git server <https://git.phytec.de/>`__ at git://git.phytec.de.

.. note::
   Should your company firewall/gateway inhibit the git protocol, you may use
   HTTP or HTTPS instead (e.g. git clone https://git.phytec.de/u-boot-imx)

Git Repositories
................

*  Used U-Boot repository:

   .. code-block::

      git://git.phytec.de/u-boot-imx

*  Our U-Boot is based on the u-boot-imx and adds board-specific patches.
*  Used Linux kernel repository:

   .. code-block::

      git://git.phytec.de/linux-imx

*  Our |soc| kernel is based on the linux-imx kernel. To find out which tag is
   used for a specific board, have a look at your BSP source folder:

   .. code-block::

      meta-phytec/dynamic-layers/freescale-layer/recipes-kernel/linux/linux-imx_*.bb
      meta-phytec/recipes-bsp/u-boot/u-boot-imx_*.bb

Get the SDK
...........

You can download the SDK `here <dl-sdk_>`_, or build it yourself with Yocto:

*  Move to the Yocto build directory:

   .. code-block:: console
      :substitutions:

      host:~$ source sources/poky/oe-init-build-env
      host:~$ bitbake -c populate_sdk |yocto-imagename| # or another image

Install the SDK
...............

*  Set correct permissions and install the SDK:

   .. code-block:: console
      :substitutions:

      host:~$ chmod +x phytec-|yocto-distro|-glibc-x86_64-|yocto-imagename|-cortexa55-toolchain-4.2.2.sh
      host:~$ ./phytec-|yocto-distro|-glibc-x86_64-|yocto-imagename|-cortexa55-toolchain-4.2.2.sh
      ============================================================================================================
      Enter target directory for SDK (default: /opt/|yocto-distro|/|yocto-manifestname|):
      You are about to install the SDK to "/opt/|yocto-distro|/|yocto-manifestname|". Proceed [Y/n]? Y
      Extracting SDK...done
      Setting it up...done
      SDK has been successfully set up and is ready to be used.

Using the SDK
.............

Activate the toolchain for your shell by sourcing the *environment-setup* file
in the toolchain directory:

.. code-block:: console
   :substitutions:

   host:~$ source /opt/|yocto-distro|/4.2.2/environment-setup-cortexa55-phytec-linux

Installing Required Tools
.........................

Building Linux and U-Boot out-of-tree requires some additional host tool
dependencies to be installed. For Ubuntu you can install them with:

.. code-block:: console

   host:~$ sudo apt install bison flex

Build imx-boot
..............

Get the needed binaries
~~~~~~~~~~~~~~~~~~~~~~~

To build the imx-boot, you need to **copy** these **files** to your **u-boot-imx
build directory** and rename them to fit with *mkimage tool* script:

*  **ARM Trusted firmware binary** (*mkimage tool* compatible format
   **bl31.bin**): bl31-|kernel-socname|.bin
*  **OPTEE image** (optional): tee.bin
*  **DDR firmware files** (*mkimage tool* compatible format
   **lpddr4_[i,d]mem_\*d_\*.bin**):
   lpddr4_dmem_1d_*.bin, lpddr4_dmem_2d_*.bin, lpddr4_imem_1d_*.bin,
   lpddr4_imem_2d_*.bin

If you already build our BSP with Yocto, you can get
the bl31-|kernel-socname|.bin, tee.bin and lpddr4_*.bin from the directory
mentioned here: |ref-bsp-images|

Or you can download the files here: |link-boot-tools|

.. warning::

   Make sure you rename the files you need so that they are compatible with the
   *mkimage tool*.

Build U-Boot
~~~~~~~~~~~~

.. build-uboot-marker

*  Get the U-Boot sources:

   .. code-block:: console

      host:~$ git clone git://git.phytec.de/u-boot-imx

*  To get the correct *U-Boot* **tag** you need to take a look at our release
   notes, which can be found here: `release notes <releasenotes_>`_
*  The **tag** needed at this release is called |u-boot-tag|
*  Check out the needed *U-Boot* **tag**:

.. code-block:: console
   :substitutions:

   host:~$ cd ~/u-boot-imx/
   host:~$ git fetch --all --tags
   host:~$ git checkout tags/|u-boot-tag|

*  Technically, you can now build the U-Boot, but practically there are some
   further steps necessary:

   *  Create your own development branch:

      .. code-block:: console

         host:~$ git checkout -b <new-branch>

      .. note::

         You can name your development branch as you like, this is just an example.

*  Copy all binaries into the U-Boot build directory
*  Set up a build environment:

   .. code-block:: console
      :substitutions:

      host:~$ source /opt/|yocto-distro|/4.2.2/environment-setup-cortexa55-phytec-linux

*  build flash.bin (imx-boot):

   .. code-block:: console
      :substitutions:

      host:~$ make phycore-|kernel-socname|_defconfig
      host:~$ make flash.bin

The flash.bin can be found at u-boot-imx/ directory and now can be flashed. A
chip-specific offset is needed:

.. _offset-table:

===== =================== ============================= ============
SoC   Offset User Area    Offset Boot Partition         eMMC Device
===== =================== ============================= ============
|soc| |u-boot-offset| kiB |u-boot-offset-boot-part| kiB /dev/|emmcdev|
===== =================== ============================= ============

E.g. flash SD card:

.. code-block:: console
   :substitutions:

   host:~$ sudo dd if=flash.bin of=/dev/sd[x] bs=1024 seek=|u-boot-offset| conv=sync

.. hint::
   The specific offset values are also declared in the Yocto variables "BOOTLOADER_SEEK" and "BOOTLOADER_SEEK_EMMC"

Build Kernel
............

*  The used linux-imx branch can be found in the `release notes
   <releasenotes_>`_
*  The tag needed for this release is called |kernel-tag|
*  Check out the needed linux-imx tag:

   .. code-block:: console
      :substitutions:

      host:~$ git clone git://git.phytec.de/linux-imx
      host:~$ cd ~/linux-imx/
      host:~$ git fetch --all --tags
      host:~$ git checkout tags/|kernel-tag|
      host:~$ git checkout -b <new-branch>

*  Set up a build environment:

   .. code-block:: console
      :substitutions:

      host:~$ source /opt/|yocto-distro|/4.2.2/environment-setup-cortexa55-phytec-linux

*  Build the linux kernel:

   .. code-block:: console

      host:~$ make imx_v8_defconfig imx9_phytec_distro.config imx9_phytec_platform.config
      host:~$ make -j${nproc}

*  Install kernel modules to e.g. NFS directory:

  .. code-block:: console

      host:~$ make INSTALL_MOD_PATH=/home/<user>/<rootfspath> modules_install

*  The Image can be found at ~/linux-imx/arch/arm64/boot/Image
*  The dtb can be found at
   ~/linux-imx/arch/arm64/boot/dts/freescale/|dt-carrierboard|.dtb

.. note::

   If you are facing the following build issue:

   .. code-block::

      scripts/dtc/yamltree.c:9:10: fatal error: yaml.h: No such file or directory

   Make sure you installed the package *"libyaml-dev"* on your host system:

   .. code-block:: console

      host:~$ sudo apt install libyaml-dev

Copy Kernel to SD Card
......................

When one-time boot via netboot is not sufficient, the kernel along with its
modules and the corresponding device tree blob may be copied directly to a
mounted SD card.

.. code-block:: console
   :substitutions:

   host:~$ cp arch/arm64/boot/Image /path/to/sdcard/boot/
   host:~$ cp arch/arm64/boot/dts/freescale/|dt-carrierboard|.dtb /path/to/sdcard/boot/oftree
   host:~$ make INSTALL_MOD_PATH=/path/to/sdcard/root/ modules_install
