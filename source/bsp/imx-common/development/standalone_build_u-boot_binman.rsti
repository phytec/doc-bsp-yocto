U-Boot standalone build
-----------------------

.. build-uboot-marker

Get the source code
...................

*  Get the U-Boot sources:

   .. code-block:: console
      :substitutions:

      host:~$ git clone |u-boot-repo-url|

*  To get the correct *U-Boot* **tag** you need to take a look at our release
   notes, which can be found here: `release notes <releasenotes_>`_
*  The **tag** used in this release is called |u-boot-tag|
*  Check out the needed *U-Boot* **tag**:

   .. code-block:: console
      :substitutions:

      host:~$ cd ~/|u-boot-repo-name|/
      host:~/|u-boot-repo-name|$ git fetch --all --tags
      host:~/|u-boot-repo-name|$ git checkout tags/|u-boot-tag|

*  Set up a build environment:

   .. code-block:: console
      :substitutions:

      host:~/|u-boot-repo-name|$ source /opt/|yocto-distro|/|yocto-sdk-rev|/environment-setup-|yocto-sdk-a-core|-phytec-linux

Get the needed binaries
.......................

To build the bootloader, you need to **copy** these **files** to your |u-boot-repo-name|
**build directory** and rename them to fit with *mkimage* script:

*  **ARM Trusted firmware binary** (*mkimage tool* compatible format
   **bl31.bin**): bl31-|kernel-socname|.bin
*  **OPTEE image** (optional): tee.bin
*  **DDR firmware files** (*mkimage tool* compatible format
   **lpddr4_[i,d]mem_\*d_\*.bin**):
   lpddr4_dmem_1d_*.bin, lpddr4_dmem_2d_*.bin, lpddr4_imem_1d_*.bin,
   lpddr4_imem_2d_*.bin

If you already built our BSP with Yocto, you can get the
bl31-|kernel-socname|.bin, tee.bin and lpddr4_*.bin from the directory mentioned
here: |ref-bsp-images|

Or you can download the files here: |link-boot-tools|

.. warning::

   Make sure you rename the files you need so that they are compatible with the
   *mkimage tool*.

Build the bootloader
....................

*  build flash.bin (imx-boot):

   .. code-block:: console
      :substitutions:

      host:~/|u-boot-repo-name|$ make |u-boot-defconfig|
      host:~/|u-boot-repo-name|$ make flash.bin


Flash the bootloader to a block device
......................................

The flash.bin can be found at |u-boot-repo-name|/ directory and now can be
flashed. A chip-specific offset is needed:

.. _offset-table:

===== =================== ============================= ============
SoC   Offset User Area    Offset Boot Partition         eMMC Device
===== =================== ============================= ============
|soc| |u-boot-offset| kiB |u-boot-offset-boot-part| kiB /dev/|emmcdev|
===== =================== ============================= ============

E.g. flash SD card:

.. code-block:: console
   :substitutions:

   host:~/|u-boot-repo-name|$ sudo dd if=flash.bin of=/dev/sd[x] bs=1024 seek=|u-boot-offset| conv=sync

.. hint::
   The specific offset values are also declared in the Yocto variables
   "BOOTLOADER_SEEK" and "BOOTLOADER_SEEK_EMMC"

.. build-uboot-fixed-ram-size-marker

Build U-Boot With a Fixed RAM Size
..................................

If you cannot boot your system anymore because the hardware introspection in the
EEPROM is damaged or deleted, you can create a flash.bin with a fixed ram size.
You should still contact support and flash the correct EEPROM data, as this
could lead to unexpected behavior.

Follow the steps to get the U-boot sources and check the correct branch in the
**Build U-Boot** section.

Edit the file configs/phycore-|kernel-socname|\_defconfig:

.. code-block:: kconfig
   :substitutions:

   CONFIG_TARGET_PHYCORE_|u-boot-socname-config|=y
   CONFIG_PHYCORE_|u-boot-socname-config|_RAM_SIZE_FIX=y
   # CONFIG_PHYCORE_|u-boot-socname-config|_RAM_SIZE_1GB=y
   # CONFIG_PHYCORE_|u-boot-socname-config|_RAM_SIZE_2GB=y
   # CONFIG_PHYCORE_|u-boot-socname-config|_RAM_SIZE_4GB=y

Choose the correct RAM size as populated on the board and uncomment the line for
this ram size.
After saving the changes, follow the remaining steps from |ref-build-uboot|.
