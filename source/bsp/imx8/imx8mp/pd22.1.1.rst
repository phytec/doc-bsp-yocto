.. Download links
.. |dlpage-bsp| replace:: our bsp
.. _dlpage-bsp: https://www.phytec.de/bsp-download/?bsp=BSP-Yocto-NXP-i.MX8MP-PD22.1.1
.. |dlpage-product| replace:: https://www.phytec.de/produkte/system-on-modules/phycore-imx-8m-plus/#downloads
.. _dl-server: https://download.phytec.de/Software/Linux/BSP-Yocto-i.MX8MP/
.. _dl-sdk: https://download.phytec.de/Software/Linux/BSP-Yocto-i.MX8MP/BSP-Yocto-NXP-i.MX8MP-PD22.1.1/sdk/ampliphy-vendor-xwayland/
.. |link-image| replace:: https://download.phytec.de/Software/Linux/BSP-Yocto-i.MX8MP/BSP-Yocto-NXP-i.MX8MP-PD22.1.1/images/ampliphy-vendor-xwayland/phyboard-pollux-imx8mp-3/phytec-qt5demo-image-phyboard-pollux-imx8mp-3.wic
.. |link-boot-tools| replace:: https://download.phytec.de/Software/Linux/BSP-Yocto-i.MX8MP/BSP-Yocto-NXP-i.MX8MP-PD22.1.1/images/ampliphy-vendor-xwayland/phyboard-pollux-imx8mp-3/imx-boot-tools/
.. _releasenotes: https://git.phytec.de/phy2octo/tree/releasenotes?h=imx8mp

.. IMX8(MP) specific
.. _overlaycallback: https://git.phytec.de/u-boot-imx/tree/board/phytec/phycore_imx8mp/phycore-imx8mp.c?h=v2021.04_2.2.0-phy13#n239


.. General Substitutions
.. |atfloadaddr| replace:: 0x970000
.. |doc-id| replace:: L-1017e.A5
.. |kit| replace:: **phyCORE-i.MX8M Plus Kit**
.. |mcore| replace:: M7 Core
.. |sbc| replace:: phyBOARD-Pollux
.. |soc| replace:: i.MX 8M Plus
.. |socfamily| replace:: i.MX 8
.. |som| replace:: phyCORE-i.MX8MP
.. |debug-uart| replace:: ttymxc0
.. |serial-uart| replace:: ttymxc1


.. Linux Kernel
.. |kernel-socname| replace:: imx8mp
.. |kernel-tag| replace:: v5.10.72_2.2.0-phy17


.. Bootloader
.. |u-boot-offset| replace:: 32
.. |u-boot-offset-boot-part| replace:: 0
.. |u-boot-mmc-flash-offset| replace:: 0x40

.. IMX8(MP) specific
.. |u-boot-socname-config| replace:: IMX8MP
.. |u-boot-tag| replace:: v2021.04_2.2.0-phy13


.. Devicetree
.. |dt-carrierboard| replace:: imx8mp-phyboard-pollux-rdk
.. |dt-som| replace:: imx8mp-phycore-som

.. IMX8(MP) specific
.. |dt-somnetwork| replace:: :imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n41`

.. Yocto
.. |yocto-bootenv-link| replace:: :yocto-bootenv:`hardknott`
.. |yocto-bsp-name| replace:: BSP-Yocto-IMX8MP
.. _yocto-bsp-name: `dl-server`_
.. |yocto-codename| replace:: hardknott
.. |yocto-distro| replace:: ampliphy-vendor-xwayland
.. |yocto-imagename| replace:: phytec-qt5demo-image
.. |yocto-machinename| replace:: phyboard-pollux-imx8mp-3
.. |yocto-manifestname| replace:: BSP-Yocto-NXP-i.MX8MP-PD22.1.1
.. |yocto-manifestname-master| replace:: BSP-Yocto-Ampliphy-i.MX8MP-master-next
.. |yocto-manifestname-y| replace:: BSP-Yocto-NXP-i.MX8MP-PD22.1.y
.. |yocto-manifestname-y-upcoming| replace:: BSP-Yocto-NXP-i.MX8MP-PD23.1.y
.. |yocto-ref-manual| replace:: L-813e.A12 Yocto Reference Manual (Hardknott)
.. _yocto-ref-manual: https://www.phytec.de/cdocuments/?doc=UIHsG


.. Ref Substitutions
.. |ref-bootswitch| replace:: *bootmode switch* :ref:`(S3) <imx8mp-pd22.1.1-bootswitch>`
.. |ref-bsp-images| replace:: :ref:`BSP Images <imx8mp-pd22.1.1-images>`
.. |ref-debugusbconnector| replace:: :ref:`(X1) <imx8mp-pd22.1.1-components>`
.. |ref-dt| replace:: :ref:`device tree <imx8mp-pd22.1.1-device-tree>`
.. |ref-network| replace:: :ref:`Network Environment Customization <imx8mp-pd22.1.1-network>`
.. |ref-setup-network-host| replace:: :ref:`Setup Network Host <imx8mp-pd22.1.1-development>`
.. |ref-usb-otg| replace:: :ref:`X5 (upper connector) <imx8mp-pd22.1.1-components>`


.. IMX8(MP) specific
.. |pollux-sbc-network| replace::
   The device tree set up for EQOS Ethernet IP core where the PHY is populated
   on the |sbc| can be found here:
   :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n141`.
.. |pollux-fan-note| replace::
   Starting with BSP-Yocto-i.MX8MP-PD22.1.1 we have to switch from PWM fan
   to GPIO fan due to availability. The PWM fan will not be supported
   anymore and will not function with the new release.

.. |ref-serial| replace:: :ref:`X2 <imx8mp-pd22.1.1-components>`
.. |ref-jp3| replace:: :ref:`JP3 <imx8mp-pd22.1.1-components>`
.. |ref-jp4| replace:: :ref:`JP4 <imx8mp-pd22.1.1-components>`
.. |ubootexternalenv| replace:: U-boot External Environment subsection of the
   :ref:`device tree overlay section <imx8mp-pd22.1.1-ubootexternalenv>`


+-----------------------+----------------------+
| |doc-id| |soc| BSP    |                      |
| Manual                |                      |
+-----------------------+----------------------+
| Document Title        | |doc-id| |soc| BSP   |
|                       | Manual               |
+-----------------------+----------------------+
| Document Type         | BSP Manual           |
+-----------------------+----------------------+
| Article Number        | |doc-id|             |
+-----------------------+----------------------+
| Yocto Manual          |                      |
+-----------------------+----------------------+
| Release Date          | 2023/05/25           |
+-----------------------+----------------------+
| Is Branch of          | |doc-id| |soc| BSP   |
|                       | Manual               |
+-----------------------+----------------------+

The table below shows the Compatible BSPs for this manual:

==================== ================ ================= ==========
Compatible BSP'S     BSP Release Type BSP Release  Date BSP Status

==================== ================ ================= ==========
|yocto-manifestname| Minor            2023/05/23        Released
==================== ================ ================= ==========

.. include:: ../../intro.rsti

Supported Hardware
------------------

The |sbc| with 2GB RAM  is supported.

On our web page, you can see all supported Machines with the available Article
Numbers for this release: |yocto-manifestname| `download <dlpage-bsp_>`_.

If you choose a specific **Machine Name** in the section **Supported Machines**,
you can see which **Article Numbers** are available under this machine and also
a short description of the hardware information. In case you only have
the **Article Number** of your hardware, you can leave the **Machine
Name** drop-down menu empty and only choose your **Article Number**. Now it
should show you the necessary **Machine Name** for your specific hardware

.. _imx8mp-pd22.1.1-components:
.. include:: components.rsti

Getting Started
===============

The |kit| is shipped with a pre-flashed SD card. It contains the
|yocto-imagename| and can be used directly as a boot source. The eMMC is
programmed with only a U-boot by default. You can get all sources from the
`PHYTEC download server <dl-server_>`_. This chapter explains how to flash a BSP
image to SD card and how to start the board.

Get the Image
-------------

The WIC image contains all BSP files in several, correctly pre-formatted
partitions and can be copied to an SD card easily using the single Linux
command ``dd``. It can be built by Yocto or downloaded from the PHYTEC download
server.

Get the WIC file from the download server:

.. code-block:: console
   :substitutions:

   host:~$ wget |link-image|

Write the Image to SD Card
--------------------------

.. warning::
   To create your bootable SD card with the ``dd`` command, you must have root
   privileges. Be very careful when specifying the destination device with
   ``dd``! All files on the selected destination device will be erased
   immediately without any further query!

   Selecting the wrong device may result in **data loss** and e.g. could erase
   your currently running system!

To create your bootable SD card, you must first find the correct device name
of your SD card and possible partitions. Unmount any mounted partitions before
you start copying the image to the SD card.

#. In order to get the correct device name, remove your SD card and
   execute::

      host$ lsblk

#. Now insert your SD card and execute the command again::

      host$ lsblk

#. Compare the two outputs to find the new device names listed in the second
   output. These are the device names of the SD card (device and partitions if
   the SD card was formatted).
#. In order to verify the device names being found, execute the command
   ``sudo dmesg``. Within the last lines of its output, you should also find the
   device names, e.g. ``/dev/sde`` or ``/dev/mmcblk0`` (depending on your
   system).

Alternatively, you may use a graphical program of your choice, like `GNOME Disks
<https://apps.gnome.org/en/DiskUtility/>`_ or `KDE Partition Manager
<https://apps.kde.org/partitionmanager/>`_, to find the correct device.

Now that you have the correct device name, e.g. ``/dev/sde``,
you can see the partitions which must be unmounted if the SD card is formatted.
In this case, you will also find the device name with an appended number
(e.g. ``/dev/sde1``) in the output. These represent the partitions. Some Linux
distributions automatically mount partitions when the device gets plugged in.
Before writing, however, these need to be unmounted to avoid data corruption.

*  Unmount all partitions, e.g.::

      host$ sudo umount /dev/sde1

*  After having unmounted all partitions, you can create your bootable SD card::

      host$ sudo dd if=<IMAGENAME>-<MACHINE>.wic of=/dev/sdX bs=1M conv=fsync status=progress

   Again, make sure to replace ``/dev/sdX`` with your actual device name found
   previously.

   The parameter ``conv=fsync`` forces a sync operation on the device before
   ``dd`` returns. This ensures that all blocks are written to the SD card and
   none are left in memory. The parameter ``status=progress`` will print out
   information on how much data is and still has to be copied until it is
   finished.

An alternative and much faster way to prepare an SD card can be done by using
`bmap-tools <https://github.com/intel/bmap-tools>`_ from Intel. Yocto
automatically creates a block map file (``<IMAGENAME>-<MACHINE>.wic.bmap``) for
the WIC image that describes the image content and includes checksums for data
integrity. *bmaptool* is packaged by various Linux distributions. For
Debian-based systems install it by issuing::

   host$ sudo apt install bmap-tools

Flash a WIC image to SD card by calling::

   host$ bmaptool copy <IMAGENAME>-<MACHINE>.wic /dev/<your_device>

.. warning::
   *bmaptool* only overwrites the areas of an SD card where image data is
   located. This means that a previously written U-Boot environment may still be
   available after writing the image.

First Start-up
--------------

* To boot from an SD card, |ref-bootswitch| needs to be set to the following
  position:

.. image:: images/SD_Card_Boot.png

* Insert the SD card
* Connect the target and the host with **mirco USB** on |ref-debugusbconnector|
  debug USB
* Power up the board

.. +---------------------------------------------------------------------------+
.. Building the BSP
.. +---------------------------------------------------------------------------+

.. include:: /bsp/building-bsp.rsti

.. _imx8mp-pd22.1.1-images:

* **u-boot.bin**: Binary compiled U-boot bootloader (U-Boot). Not the final
  Bootloader image!
* **oftree**: Default kernel device tree
* **u-boot-spl.bin**: Secondary program loader (SPL)
* **bl31-imx8mp.bin**: ARM Trusted Firmware binary
* **lpddr4_pmu_train_2d_dmem_202006.bin,
  lpddr4_pmu_train_2d_imem_202006.bin**: DDR PHY firmware images
* **imx-boot**: Bootloader build by imx-mkimage which includes SPL, U-Boot, ARM
  Trusted Firmware and DDR firmware. This is the final bootloader image which is
  bootable.
* **Image**: Linux kernel image
* **Image.config**: Kernel configuration
* **imx8mp-phyboard-pollux-rdk*.dtb**: Kernel device tree file
* **imx8mp-phy*.dtbo**: Kernel device tree overlay files
* **phytec-qt5demo-image\*.tar.gz**: Root file system
* **phytec-qt5demo-image\*.wic**: SD card image

.. +---------------------------------------------------------------------------+
.. INSTALLING THE OS
.. +---------------------------------------------------------------------------+

Installing the OS
=================

Bootmode Switch (S3)
--------------------

.. tip::

   Hardware revision baseboard: 1552.2

The |sbc| features a boot switch with four individually switchable ports to
select the phyCORE-|soc| default bootsource.

.. _imx8mp-pd22.1.1-bootswitch:
.. include:: bootmode-switch.rsti

.. include:: ../installing-os.rsti

.. +---------------------------------------------------------------------------+
.. DEVELOPMENT
.. +---------------------------------------------------------------------------+

.. _imx8mp-pd22.1.1-development:
.. include:: /bsp/imx8/development.rsti

.. +---------------------------------------------------------------------------+
.. DEVICE TREE
.. +---------------------------------------------------------------------------+

.. _imx8mp-pd22.1.1-device-tree:
.. include:: /bsp/device-tree.rsti

::

   imx8mp-isi-csi1.dtbo
   imx8mp-isi-csi2.dtbo
   imx8mp-isp-csi1.dtbo
   imx8mp-isp-csi2.dtbo
   imx8mp-phyboard-pollux-peb-av-010.dtbo
   imx8mp-phyboard-pollux-peb-av-012.dtbo
   imx8mp-phyboard-pollux-peb-wlbt-05.dtbo
   imx8mp-phycore-no-eth.dtbo
   imx8mp-phycore-no-rtc.dtbo
   imx8mp-phycore-no-spiflash.dtbo
   imx8mp-phycore-rpmsg.dtbo
   imx8mp-vm016-csi1.dtbo
   imx8mp-vm016-csi1-fpdlink.dtbo
   imx8mp-vm016-csi2.dtbo
   imx8mp-vm016-csi2-fpdlink.dtbo
   imx8mp-vm017-csi1.dtbo
   imx8mp-vm017-csi1-fpdlink.dtbo
   imx8mp-vm017-csi2.dtbo
   imx8mp-vm017-csi2-fpdlink.dtbo

.. hint::
   There is one more overlay available for phyboard-pollux-imx8mp-2.conf:
   imx8mp-phyboard-pollux-1552.1.dtbo

.. _imx8mp-pd22.1.1-ubootexternalenv:
.. include:: ../dt-overlays.rsti

.. +---------------------------------------------------------------------------+
.. ACCESSING PERIPHERALS
.. +---------------------------------------------------------------------------+

.. include:: /bsp/peripherals/introduction.rsti

.. include:: ../peripherals/pin-muxing.rsti

::

   pinctrl_uart1: uart1grp {
           fsl,pins = <
                   MX8MP_IOMUXC_UART1_RXD_UART1_DCE_RX     0x49
                   MX8MP_IOMUXC_UART1_TXD_UART1_DCE_TX     0x49
           >;
   };

The first part of the string MX8MP_IOMUXC_UART1_RXD_UART1_DCE_RX names the pad
(in this example UART1_RXD). The second part of the string (UART1_DCE_RX) is the
desired muxing option for this pad. The pad setting value (hex value on the
right) defines different modes of the pad, for example, if internal pull
resistors are activated or not. In this case, the internal resistors are
disabled.

RS232/RS485
-----------

The phyCORE-|soc| supports up to 4 UART units. On the |sbc|, TTL level signals
of UART1 (the standard console) and UART4 are routed to Silicon Labs CP2105 UART
to USB converter expansion. This USB is brought out at Micro-USB connector X1.
UART3 is at X6 (Expansion Connector) at TTL level. UART2 is connected to a
multi-protocol transceiver for RS-232 and RS-485, available at pin header
connector |ref-serial| at the RS-232 level, or at the RS-485 level. The
configuration of the multi-protocol transceiver is done by jumpers |ref-jp3| and
|ref-jp4| on the baseboard. For more information about the correct setup please
refer to the phyCORE-|soc|/|sbc| Hardware Manual section UARTs.

We use the same device tree node for RS-232 and RS-485. RS-485 mode can be
enabled with ioctl TIOCSRS485. Also, full-duplex support is also configured
using ioctls. Have a look at our small example application rs485test, which is
also included in the BSP. The jumpers |ref-jp3| and |ref-jp4| need to be set
correctly.

.. include:: /bsp/imx8/peripherals/rs232-485.rsti

The device tree representation for RS232 and RS485:
:imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n331`

.. _imx8mp-pd22.1.1-network:
.. include:: ../peripherals/network.rsti

WLAN and Bluetooth
..................

WLAN and Bluetooth on the |sbc| are provided by the PEB-WLBT-05 expansion card.
The PEB-WLBT-05 for |sbc| Quickstart Guide shows you how to install and use the
PEB-WLBT-05.

.. include:: ../peripherals/sd-card.rsti

DT configuration for the MMC (SD card slot) interface can be found here:
:imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n367`

DT configuration for the eMMC interface can be found here:
:imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n220`

.. include:: /bsp/peripherals/emmc.rsti

.. include:: emmc.rsti

.. include:: ../peripherals/spi-master.rsti

The definition of the SPI master node in the device tree can be found here:

:imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n72`

.. include:: ../peripherals/gpios.rsti

.. include:: ../../peripherals/leds.rsti

Device tree configuration for the User I/O configuration can be found here:
:imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n216`

.. include:: /bsp/imx8/peripherals/i2c-bus.rsti

General I²C1 bus configuration (e.g. |dt-som|.dtsi):
:imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n105`

General I²C2 bus configuration (e.g. |dt-carrierboard|.dts)
:imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n201`


EEPROM
------

There are two different i2c EEPROM flashes populated on |som| SoM and on the
|sbc|. Both can be used with the sysfs interface in Linux. The ID page of the
I2C EEPROM populated on the SoM is also used for board detection.

.. include:: ../peripherals/eeprom.rsti

DT representation, e.g. in phyCORE-|soc| file imx8mp-phycore-som.dtsi can be
found in our PHYTEC git:
:imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n201`

.. include:: ../../peripherals/rtc.rsti
   :end-before: .. rtc_parameter_start_label

DT representation for I²C RTCs:
:imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n207`

USB Host Controller
-------------------

The USB controller of the |soc| SoC provides a low-cost connectivity solution
for numerous consumer portable devices by providing a mechanism for data
transfer between USB devices with a line/bus speed of up to 4 Gbit/s (SuperSpeed
'SS'). The USB subsystem has two independent USB controller cores. Both cores
are capable of acting as a USB peripheral device or a USB host. Each is
connected to a USB 3.0 PHY.

.. include:: /bsp/peripherals/usb-host.rsti

DT representation for USB Host:
:imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n341`

CAN FD
------

The |sbc| two flexCAN interfaces supporting CAN FD. They are supported by the
Linux standard CAN framework which builds upon then the Linux network layer.
Using this framework, the CAN interfaces behave like an ordinary Linux network
device, with some additional features special to CAN. More information can be
found in the Linux Kernel
documentation: https://www.kernel.org/doc/html/latest/networking/can.html

.. include:: ../peripherals/canfd.rsti

Device Tree CAN configuration of imx8mp-phyboard-pollux.dtsi:
:imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n165`

.. include:: /bsp/peripherals/pcie.rsti

Device Tree PCIe configuration of imx8mm-phyboard-polis.dtsi:
:imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n277`

Audio
-----

Playback devices supported for |sbc| are HDMI and the TI TLV320AIC3007 audio
codec on the PEB-AV-10 connector. On the AV-Connector there is a 3.5mm headset
jack with OMTP-standard and an 8-pin header. The 8-pin header contains a mono
speaker, headphones, and line in signals.

.. note::

   Using the PEB-AV-10 connector for display output along HDMI as audio output
   is not supported. The audio output device must match the video output device.

To check if your soundcard driver is loaded correctly and what the device is
called, type for playback devices::

   target$ aplay -L

Or type for recording devices::

   target$ arecord -L

Alsamixer
.........

To inspect the capabilities of your soundcard, call::

   target$ alsamixer

You should see a lot of options as the audio-IC has many features you can
experiment with. It might be better to open alsamixer via ssh instead of the
serial console, as the console graphical effects are better. You have either
mono or stereo gain controls for all mix points. "MM" means the feature is muted
(both output, left & right), which can be toggled by hitting m. You can also
toggle by hitting '<' for left and ''>' for right output.

ALSA configuration
..................

Our BSP comes with a ALSA configuration file /etc/asound.conf.

The ALSA configuration file can be edited as desired or deleted since it is not
required for ALSA to work properly. ::

   target$ vi /etc/asound.conf

To set PEB-AV-10 as output, set playback.pcm from "dummy" to "pebav10": ::

   [...]

   pcm.asymed {
           type asym
           playback.pcm "pebav10"
           capture.pcm "dsnoop"
   }

   [...]

Pulseaudio Configuration
........................

For applications using Pulseaudio, check for available sinks::

   target$ pactl list short sinks
   0   alsa_output.platform-snd_dummy.0.stereo-fallback    module-alsa-card.c  s16le 2ch 44100Hz   SUSPENDED
   1   alsa_output.platform-sound-peb-av-10.stereo-fallback    module-alsa-card.c  s16le 2ch 44100Hz   SUSPENDED

To select PEB-AV-10, type::

   target$ pactl set-default-sink 1

Playback
........

Run speaker-test to check playback availability::

   target$ speaker-test -c 2 -t wav

To playback simple audio streams, you can use aplay. For example to play the
ALSA test sounds::

   target$ aplay /usr/share/sounds/alsa/*

To playback other formats like mp3 for example, you can use Gstreamer::

   target$ gst-launch-1.0 playbin uri=file:/path/to/file.mp3

Capture
.......

arecord is a command-line tool for capturing audio streams which use Line In as
the default input source. To select a different audio source you can
use alsamixer. For example, switch on Right PGA Mixer Mic3R and Left PGA Mixer
Mic3R in order to capture the audio from the microphone input of the
TLV320-Codec using the 3.5mm jack. ::

   target$ amixer -c "sndpebav10" sset 'Left PGA Mixer Mic3R' on
   target$ amixer -c "sndpebav10" sset 'Right PGA Mixer Mic3R' on

::

   target$ arecord -t wav -c 2 -r 44100 -f S16_LE test.wav

.. hint::

   Since playback and capture share hardware interfaces, it is not possible to
   use different sampling rates and formats for simultaneous playback and
   capture operations.

Device Tree Audio configuration:
:imx-dt:`overlays/imx8mp-phyboard-pollux-peb-av-010.dtso?h=v5.10.72_2.2.0-phy17#n57`

.. include:: /bsp/peripherals/video.rsti

Display
-------

The |sbc| supports up to 4 different display outputs. Three can be used
simultaneously. The following table shows the required extensions and devicetree
overlays for the different interfaces.

========= ======================== ======================================
Interface Expansion                devicetree overlay
========= ======================== ======================================
HDMI      |sbc|                    no overlay needed (enabled by default)
LVDS0     PEB-AV-10                imx8mp-phyboard-pollux-peb-av-010.dtbo
                                   (loaded by default)
LVDS1     |sbc|                    disabled if PEB-AV-10 overlay is used
MIPI      PEB-AV-12 (MIPI to LVDS) imx8mp-phyboard-pollux-peb-av-012.dtbo
========= ======================== ======================================

.. note::

   *  HDMI will not work if LVDS1 (onboard) is enabled.
   *  When changing Weston output, make sure to match the audio output as well.
   *  LVDS0 (PEB-AV-10) and LVDS1 (onboard)can not be used at the same time.

HDMI is always enabled in the devicetree. The other interfaces can be enabled
with Device Tree Overlay.

The default-enabled Interfaces are HDMI and LVDS0 (PEB-AV-010). We support a
10'' edt,etml1010g0dka display for the PEB-AV-10 and PEB-AV-12.

.. note::

   The current display driver limits the pixel clock for a display connected to
   LVDS to 74.25Mhz (or a divider of it).  If this does not fit your display
   requirements, please contact Support for further help.

Weston Configuration
....................

In order to get an output from Weston on the correct display, it still needs to
be configured correctly. This will be done at /etc/xdg/weston/weston.ini.

Single Display
~~~~~~~~~~~~~~

In our BSP, the default Weston output is set to HDMI. ::

   [output]
   name=HDMI-A-1
   mode=current

.. include:: /bsp/qt5.rsti

.. include:: /bsp/imx8/peripherals/display.rsti

Device tree description of LVDS-1 and HDMI can be found here:
:imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n255`
:imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n180`

The device tree of LVDS-0 on PEB-AV-10 can be found here:
:imx-dt:`overlays/imx8mp-phyboard-pollux-peb-av-010.dtso?h=v5.10.72_2.2.0-phy17#n132`

.. include:: ../peripherals/pm.rsti

.. include:: ../peripherals/tm.rsti

The device tree description of GPIO Fan can be found here:
:imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n26`

.. include:: /bsp/peripherals/watchdog.rsti

.. include:: ../peripherals/snvs-power-key.rsti

NPU
---

The |soc| SoC contains a Neural Processing Unit up to 2.3 TOPS as an accelerator
for artificial intelligence operations. Refer to our latest phyCORE-|soc| AI Kit
Guide on the phyCORE-|soc| download section to get information about the
NPU: `L-1015e.A0 phyCORE-i.MX 8M Plus AI Kit Guide
<https://www.phytec.de/cdocuments/?doc=ZQBhDw>`_

NXP Examples for eIQ
....................

NXP provides a set of machine learning examples for eIQ using Python3. To add a
pre-configured machine learning package group, add to your local.conf and build
your BSP::

   IMAGE_INSTALL_append = " packagegroup-imx-ml python3-pip python3-requests opencv"

This will require about 1GB of additional space on the SD Card. Instructions
on how to install and use the NXP examples can be found at
https://community.nxp.com/t5/Blogs/PyeIQ-3-x-Release-User-Guide/ba-p/1305998.

.. hint::

   The installation of the eiq examples with pip3 requires an internet
   connection.

.. note::

   On some Ubuntu 20.04 hosts, cmake uses the host's Python 3 instead of Python
   3.7 from Yocto when building python3-pybind11. (see
   https://community.nxp.com/t5/i-MX-Processors/Yocto-L5-4-70-2-3-0-build-image-failed/m-p/1219619)

   As a workaround edit, the python3-pybind11 recipe by::

      $ devtool edit-recipe python3-pybind11

   and add to the file::

      EXTRA_OECMAKE += "-DPYTHON_EXECUTABLE=${RECIPE_SYSROOT_NATIVE}/usr/bin/python3-native/python3.7"

.. include:: ../peripherals/isp.rsti

.. include:: ../peripherals/ocotp-ctrl.rsti

Reading the registers using /dev/mem will cause the system to hang unless the
ocotp_root_clk is enabled. To enable this clock permanent, add to the device
tree::

   &clk {
           init-on-array = <IMX8MP_CLK_OCOTP_ROOT>;
   };

.. +---------------------------------------------------------------------------+
.. i.MX 8M Plus M7 Core
.. +---------------------------------------------------------------------------+

.. include:: mcu.rsti

.. +---------------------------------------------------------------------------+
.. BSP EXTENSIONS
.. +---------------------------------------------------------------------------+

BSP Extensions
==============

Chromium
--------

Our BSP for the |sbc|-|soc| supports Chromium. You can include it in the
|yocto-imagename| with only a few steps.

Adding Chromium to Your local.conf
..................................

To include Chromium you have to add the following line into your local.conf. You
can find it in <yocto_dir>/build/conf/local.conf. This adds Chromium to your
next image build. ::

   IMAGE_INSTALL_append = " chromium-ozone-wayland"

.. note::

   Compiling Chromium takes a long time.

Get Chromium Running on the Target
..................................

To run Chromium, it needs a few arguments to use the hardware graphics
acceleration::

   target$ chromium --use-gl=desktop --enable-features=VaapiVideoDecoder --no-sandbox

If you want to start Chromium via SSH, you must first define the display on
which Chromium will run. For example::

   target$ DISPLAY=:0

After you have defined this, you can start it via virtual terminal on Weston as
shown above.
