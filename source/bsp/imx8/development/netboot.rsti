Booting the Kernel from a Network
---------------------------------

Booting from a network means loading the kernel over TFTP and the root file
system over NFS. The bootloader itself must already be loaded from another boot
device that is available.

Host Preparation
................

On the development host, a TFTP server must be installed and configured. The
following tools will be needed to boot the Kernel from Ethernet:

*  A TFTP server

   For *Ubuntu*, install:

   .. code-block:: console

      host:~$ sudo apt-get install tftpd-hpa xinetd

After the installation, there are two ways to configure the TFTP server.

TFTP Server Setup
.................

1. As a stand-alone daemon
2. Controlled and handled by xinetd

*  First, create a directory to store the TFTP files:

   .. code-block:: console

      host:~$ sudo mkdir /srv/tftp

*  Then copy your BSP image files to this directory and make sure other users have read
   access to all the files in the tftp directory, otherwise they are not accessible
   from the target.

   .. code-block:: console

      host:~$ sudo chmod -R o+r /srv/tftp

*  You also need to configure a static IP address for the appropriate interface.
   The default IP address of the PHYTEC evaluation boards is 192.168.3.11. Setting
   a host address 192.168.3.10 with netmask 255.255.255.0 is a good choice.

   .. code-block:: console

      host:~$ ip addr show <network-interface>

   Replace <network-interface> with the network interface you configured and want to
   connect the board to. You can show all network interfaces by not specifying a network
   interface.

*  The message you receive should contain this:

   .. code-block::

      inet 192.168.3.10/24 brd 192.168.3.255

TFTP as a Stand-alone Daemon
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*  Create or edit the ``/etc/default/tftpd-hpa`` file:

   .. code-block::

      # /etc/default/tftpd-hpa

      TFTP_USERNAME="tftp"
      TFTP_DIRECTORY="/srv/tftp"
      TFTP_ADDRESS=":69"
      TFTP_OPTIONS="-s -c"

*  Set TFTP_DIRECTORY to your TFTP server root directory
*  Set TFTP_ADDRESS to the host address the server is listening to (set to
   0.0.0.0:69 to listen to all local IPs)
*  Set TFTP_OPTIONS, the following command shows the available options:

   .. code-block:: console

      host:~$ man tftpd

*  Restart the services to pick up the configuration changes:

   .. code-block:: console

      host:~$ sudo service tftpd-hpa restart

*  Now connect the ethernet port of the board to your host system, configure the
   board to network boot, and start it.

Usually, TFTP servers fetch files from the tftp directory. If you built
your own images, please copy them from the BSP's build directory to the
tftp directory. We also need a network connection between the embedded
board and the TFTP server. The server should be set to IP 192.168.3.10 and
netmask 255.255.255.0.

NFS Server Setup
~~~~~~~~~~~~~~~~

*  After the installation of the TFTP server, an NFS server needs to be
   installed, too.

   .. code-block:: console

      host:~$ sudo apt-get install nfs-kernel-server

*  Create a nfs directory:

   .. code-block:: console

      host:~$ sudo mkdir /srv/nfs

*  The NFS server is not restricted to a certain file system location, so all we
   have to do on most distributions is modify the file ``/etc/exports`` and export
   our root file system to the embedded network. In this example file, the whole
   directory is exported and the "lab network" address of the development host is
   192.168.3.10. The IP address has to be adapted to the local needs:

   .. code-block::

      /srv/nfs 192.168.3.11/255.255.255.0(rw,no_root_squash,sync,no_subtree_check)

*  Now the NFS-Server has to read the ``/etc/exportfs`` file again:

   .. code-block:: console

      host:~$ sudo exportfs -ra

Place Images on Host for Netboot
................................

*  Copy the kernel image to your tftp directory:

   .. code-block:: console

      host:~$ cp Image /srv/tftp

*  Copy the devicetree to your tftp directory:

   .. code-block:: console

      host:~$ cp oftree /srv/tftp

*  Copy all the overlays you want to use into your tftp directory:

   .. code-block:: console

      host:~$ cp *.dtbo /srv/tftp

*  Make sure other users have read access to all the files in the tftp directory,
   otherwise they are not accessible from the target:

   .. code-block:: console

      host:~$ sudo chmod -R o+r /srv/tftp

*  Extract the rootfs to your nfs directory:

   .. code-block:: console
      :substitutions:

      host:~$ sudo tar -xvzf |yocto-imagename|-|yocto-machinename|.tar.gz -C /srv/nfs

.. note::
   Make sure you extract with sudo to preserve the correct ownership.

Set the bootenv.txt for Netboot
...............................

Create a bootenv.txt file in your tftp directory and write the following variables into it.

.. code-block::

   bootfile=Image
   fdt_file=oftree
   nfsroot=/srv/nfs
   overlays=<overlayfilenames>

<overlayfilenames> has to be replaced with the devicetree overlay filenames that you want to use.
Separate the filenames by spaces. For example:

.. code-block::

   overlays=imx8mm-phyboard-polis-peb-eval-01.dtbo imx8mm-phyboard-polis-peb-av-010.dtbo

.. Tip::

   All supported devicetree overlays are in the |ref-dt| chapter.

Network Settings on Target
..........................

To customize the targets ethernet configuration, please follow the description
here: |ref-network|

Booting from an Embedded Board
..............................

Boot the board into the U-boot prompt and press any key to hold.

*  To boot from a network, call:

   .. code-block:: console

      u-boot=> run netboot
