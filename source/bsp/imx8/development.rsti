Development
===========

Booting the Kernel from a Network
---------------------------------

Booting from a network means loading the kernel over TFTP and the root file
system over NFS. The bootloader itself must already be loaded from another boot
device that is available.

Host Preparation
................

On the development host, a TFTP server must be installed and configured. The
following tools will be needed to boot the Kernel from Ethernet:

*  A TFTP server

   For *Ubuntu*, install:

   .. code-block:: console

      host:~$ sudo apt-get install tftpd-hpa xinetd

After the installation, there are two ways to configure the TFTP server.

TFTP Server Setup
.................

1. As a stand-alone daemon
2. Controlled and handled by xinetd

*  First, create a directory to store the TFTP files:

   .. code-block:: console

      host:~$ sudo mkdir /srv/tftp
      host:~$ sudo chmod -R 777 /srv/tftp
      host:~$ sudo chown -R nobody /srv/tftp

*  Then copy your BSP image files to this directory. You also need to configure a
   static IP address for the appropriate interface. The default IP address of the
   PHYTEC evaluation boards is 192.168.3.11. Setting a host address 192.168.3.10
   with netmask 255.255.255.0 is a good choice.

   .. code-block:: console

      host:~$ ip addr show <network-interface>

   Replace <network-interface> with the network interface you configured and want to
   connect the board to. You can show all network interfaces by not specifying a network
   interface.

*  The message you receive should contain this:

   .. code-block::

      inet 192.168.3.10/24 brd 192.168.3.255

TFTP as a Stand-alone Daemon
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*  Create or edit /etc/default/tftpd-hpa:

   .. code-block::

      # /etc/default/tftpd-hpa

      TFTP_USERNAME="tftp"
      TFTP_DIRECTORY="/srv/tftp"
      TFTP_ADDRESS=":69"
      TFTP_OPTIONS="-s -c"

*  Set TFTP_DIRECTORY to your TFTP server root directory
*  Set TFTP_ADDRESS to the host address the server is listening to (set to
   0.0.0.0:69 to listen to all local IPs)
*  Set TFTP_OPTIONS, the following command shows the available options:

   .. code-block:: console

      host:~$ man tftpd

*  Restart the services to pick up the configuration changes:

   .. code-block:: console

      host:~$ sudo service tftpd-hpa restart

*  Now connect the ethernet port of the board to your host system, configure the
   board to network boot, and start it.

Usually, TFTP servers fetch files from the tftp directory. If you built
your own images, please copy them from the BSP's build directory to the
tftp directory. We also need a network connection between the embedded
board and the TFTP server. The server should be set to IP 192.168.3.10 and
netmask 255.255.255.0.

NFS Server Setup
~~~~~~~~~~~~~~~~

*  After the installation of the TFTP server, an NFS server needs to be
   installed, too.

   .. code-block:: console

      host:~$ sudo apt-get install nfs-kernel-server

*  Create a nfs directory:

   .. code-block:: console

      host:~$ sudo mkdir /srv/nfs

*  The NFS server is not restricted to a certain file system location, so all we
   have to do on most distributions is modify the file ``/etc/exports`` and export
   our root file system to the embedded network. In this example file, the whole
   directory is exported and the "lab network" address of the development host is
   192.168.3.10. The IP address has to be adapted to the local needs:

   .. code-block::

      /srv/nfs 192.168.3.11/255.255.255.0(rw,no_root_squash,sync,no_subtree_check)

*  Now the NFS-Server has to read the ``/etc/exportfs`` file again:

   .. code-block:: console

      host:~$ sudo exportfs -ra

Place Images on Host for Netboot
................................

*  Copy the kernel image to your tftp directory:

   .. code-block:: console

      host:~$ cp Image /srv/tftp

*  Copy the devicetree to your tftp directory:

   .. code-block:: console

      host:~$ cp oftree /srv/tftp

*  Copy all the overlays you want to use into your tftp directory:

   .. code-block:: console

      host:~$ cp *.dtbo /srv/tftp

*  Make sure you have read and write access to all the files in the tftp directory,
   otherwise they are not accessible from the target:

   .. code-block:: console

      host:~$ sudo chmod -R +r /srv/tftp

*  Extract the rootfs to your nfs directory:

   .. code-block:: console
      :substitutions:

      host:~$ sudo tar -xvzf |yocto-imagename|-|yocto-machinename|.tar.gz -C /srv/nfs

.. note::
   Make sure you extract with sudo to preserve the correct ownership.

Set the bootenv.txt for Netboot
...............................

Create a bootenv.txt file in your tftp directory and write the following variables into it.

.. code-block::

   bootfile=Image
   fdt_file=oftree
   nfsroot=/srv/nfs
   overlays=<overlayfilenames>

<overlayfilenames> has to be replaced with the devicetree overlay filenames that you want to use.
Separate the filenames by spaces. For example:

.. code-block::

   overlays=imx8mm-phyboard-polis-peb-eval-01.dtbo imx8mm-phyboard-polis-peb-av-010-sn65dsi83.dtbo

Network Settings on Target
..........................

To customize the targets ethernet configuration, please follow the description
here: |ref-network|

Booting from an Embedded Board
..............................

Boot the board into the U-boot prompt and press any key to hold.

*  To boot from a network, call:

   .. code-block:: console

      u-boot=> run netboot

Working with UUU-Tool
---------------------

The Universal Update Utility Tool (UUU-Tool) from NXP is software to execute
from the host to load and run the bootloader on the board through SDP. For
detailed information visit https://github.com/nxp-imx/mfgtools or download the
`Official UUU-tool documentation
<https://community.nxp.com/pwmxy87654/attachments/pwmxy87654/imx-processors/140261/1/UUU.pdf>`_.

Host preparations for UUU-Tool Usage
....................................

*  Follow the instructions from https://github.com/nxp-imx/mfgtools#linux.

*  If you built UUU from source, add it to ``PATH``:

   This BASH command adds UUU only temporarily to ``PATH``. To add it permanently, add this line to
   ``~/.bashrc``.

   .. code-block:: console

      export PATH=~/mfgtools/uuu/:"$PATH"

*  Set udev rules (documented in ``uuu -udev``):

   .. code-block:: console

      host:~$ sudo sh -c "uuu -udev >> /etc/udev/rules.d/70-uuu.rules"
      host:~$ sudo udevadm control --reload

Get Images
..........

Download imx-boot from our server or get it from your Yocto build directory at
../build/deploy/images/|yocto-machinename|/. For flashing a wic image to eMMC,
you will also need |yocto-imagename|-|yocto-machinename|.wic.

Prepare Target
..............

Set the |ref-bootswitch| to **Serial downloader (USB boot)** (Boot
Configuration Options). Also, connect USB port |ref-usb-otg| to your host.

Starting bootloader via UUU-Tool
................................

Execute and power up the board:

.. code-block:: console

   host:~$ sudo uuu -b spl imx-boot

You can see the bootlog on the console via the debug USB
|ref-debugusbconnector|, as usual.

.. note::
   The default boot command when booting with UUU-Tool is set to fastboot. If
   you want to change this, please adjust the environment variable bootcmd_mfg
   in U-boot prompt with setenv bootcmd_mfg. Please note, when booting with
   UUU-tool the default environment is loaded. Saveenv has no effect. If you
   want to change the boot command permanently for UUU-boot, you need to change
   this in U-boot code.

Flashing U-boot Image to eMMC via UUU-Tool
...........................................

Execute and power up the board:

.. code-block:: console

   host:~$ sudo uuu -b emmc imx-boot

Flashing wic Image to eMMC via UUU-Tool
...........................................

Execute and power up the board:

.. code-block:: console

   host:~$ sudo uuu -b emmc_all imx-boot |yocto-imagename|-|yocto-machinename|.wic

Standalone Build
----------------

In this section, we describe how to build the U-Boot and the Linux kernel
without using the *Yocto Project*. This procedure makes the most sense for
development. The U-Boot source code, the Linux kernel, and all other git
repositories are available on our *Git* server at git://git.phytec.de.

.. note::
   Should your company firewall/gateway inhibit the git protocol, you may use
   HTTP or HTTPS instead (e.g. git clone https://git.phytec.de/u-boot-imx)

Git Repositories
................

*  Used U-Boot repository:

::

   git://git.phytec.de/u-boot-imx

*  Our U-Boot is based on the u-boot-imx and adds board-specific patches.
*  Used Linux kernel repository:

::

   git://git.phytec.de/linux-imx

*  Our |soc| kernel is based on the linux-imx kernel. To find out which tag is
   used for a specific board, have a look at your BSP source folder:

::

   meta-phytec/dynamic-layers/freescale-layer/recipes-kernel/linux/linux-imx_*.bb
   meta-phytec/recipes-bsp/u-boot/u-boot-imx_*.bb

Get the SDK
...........

You can download the SDK `here <dl-sdk_>`_, or build it yourself with Yocto:

*  Move to the Yocto build directory:

.. code-block:: console
   :substitutions:

   host:~$ source sources/poky/oe-init-build-env
   host:~$ bitbake -c populate_sdk |yocto-imagename| # or another image

Install the SDK
...............

*  Set correct permissions and install the SDK:

.. code-block:: console
   :substitutions:

   host:~$ chmod +x phytec-|yocto-distro|-glibc-x86_64-|yocto-imagename|-cortexa53-crypto-toolchain-|yocto-manifestname|.sh
   host:~$ ./phytec-|yocto-distro|-glibc-x86_64-|yocto-imagename|-cortexa53-crypto-toolchain-|yocto-manifestname|.sh ============================================================================================================
   Enter target directory for SDK (default: /opt/|yocto-distro|/|yocto-manifestname|):
   You are about to install the SDK to "/opt/|yocto-distro|/|yocto-manifestname|". Proceed [Y/n]?
   Extracting SDK...done
   Setting it up...done
   SDK has been successfully set up and is ready to be used.

Using the SDK
.............

Activate the toolchain for your shell by sourcing the file *environment-setup*
in the toolchain directory:

.. code-block:: console
   :substitutions:

   host:~$ source /opt/|yocto-distro|/|yocto-manifestname|/environment-setup-cortexa53-crypto-phytec-linux

Installing Required Tools
.........................

Building Linux and U-Boot out-of-tree requires some additional host tool
dependencies to be installed. For Ubuntu you can install them with::

   host$ sudo apt install bison flex

Build imx-boot
..............

With *U-Boot* version v2021.04, the *mkimage tool* from NXP is finally
integrated. This means that you can create the imx-boot without manually using
the imx *mkimage tool*.

Get the needed binaries
~~~~~~~~~~~~~~~~~~~~~~~

To build the imx-boot, you need to **copy** these **files** to your **u-boot-imx
build directory** and rename them to fit with *mkimage tool* script:

*  **ARM Trusted firmware binary** (*mkimage tool* compatible format
   **bl31.bin**): bl31-|kernel-socname|.bin
*  **OPTEE image** (optional): tee.bin
*  **DDR firmware files** (*mkimage tool* compatible format
   **lpddr4_pmu_train_\*d_\*mem.bin**):
   *lpddr4_pmu_train_2d_dmem*.bin, lpddr4_pmu_train_2d_imem*.bin,
   (lpddr4_pmu_train_1d_dmem*.bin, lpddr4_pmu_train_1d_imem*.bin)*

If you already build our BSP with Yocto, you can get
the bl31-|kernel-socname|.bin, tee.bin and lpddr4_pmu_train*.bin from the directory
mentioned here: |ref-bsp-images|

Or you can download the files here: |link-boot-tools|

.. warning::

   Make sure you rename the files you need so that they are compatible with the
   *mkimage tool*.

Build U-Boot
~~~~~~~~~~~~

.. build-uboot-marker

*  Get the U-Boot sources:

::

   host$ git clone git://git.phytec.de/u-boot-imx

*  To get the correct *U-Boot* **tag** you need to take a look at our release
   notes, which can be found here: `release notes <releasenotes_>`_
*  The **tag** needed at this release is called |u-boot-tag|
*  Check out the needed *U-Boot* **tag**:

.. code-block:: console
   :substitutions:

   host:~$ cd ~/u-boot-imx/
   host:~$ git fetch --all --tags
   host:~$ git checkout tags/|u-boot-tag|

*  Technically, you can now build the U-Boot, but practically there are some
   further steps necessary:

   *  Create your own development branch:

::

   host$ git checkout -b <new-branch>

.. note::

   You can name your development branch as you like, this is just an example.

*  Copy all binaries into the U-Boot build directory
*  Set up a build environment

Set this environment variable before building the Image:

.. code-block:: console
   :substitutions:

   host:~$ export ATF_LOAD_ADDR=|atfloadaddr|

*  build flash.bin (imx-boot):

.. code-block:: console
   :substitutions:

   host:~$ make phycore-|kernel-socname|_defconfig
   host:~$ make flash.bin

The flash.bin can be found at u-boot-imx/ directory and now can be flashed. A
chip-specific offset is needed:

.. _offset-table:

===== =================== ============================= ============
SoC   Offset User Area    Offset Boot Partition         eMMC Device
===== =================== ============================= ============
|soc| |u-boot-offset| kiB |u-boot-offset-boot-part| kiB /dev/mmcblk2
===== =================== ============================= ============

E.g. flash SD card:

.. code-block:: console
   :substitutions:

   host:~$ sudo dd if=flash.bin of=/dev/sd[x] bs=1024 seek=|u-boot-offset| conv=sync

.. hint::
   The specific offset values are also declared in the Yocto variables "BOOTLOADER_SEEK" and "BOOTLOADER_SEEK_EMMC"

Build U-Boot With a Fixed RAM Size
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you cannot boot your system anymore because the hardware introspection in the
EEPROM is damaged or deleted, you can create a flash.bin with a fixed ram size.
You should still contact support and flash the correct EEPROM data, as this
could lead to unexpected behavior.

Follow the steps to get the U-boot sources and check the correct branch in the
**Build U-Boot** section.

Choose the correct RAM size as populated on the board.

.. code-block:: kconfig
   :substitutions:

   CONFIG_TARGET_PHYCORE_|u-boot-socname-config|=y
   CONFIG_PHYCORE_|u-boot-socname-config|_RAM_SIZE_FIX=y
   # CONFIG_PHYCORE_|u-boot-socname-config|_RAM_SIZE_1GB=y
   # CONFIG_PHYCORE_|u-boot-socname-config|_RAM_SIZE_2GB=y
   # CONFIG_PHYCORE_|u-boot-socname-config|_RAM_SIZE_4GB=y

After saving the changes, follow the remaining steps from Build U-Boot.

Build Kernel
............

*  The used linux-imx branch can be found in the `release notes
   <releasenotes_>`_
*  The tag needed for this release is called |kernel-tag|
*  Check out the needed linux-imx tag:

.. code-block:: console
   :substitutions:

   host:~$ git clone git://git.phytec.de/linux-imx
   host:~$ cd ~/linux-imx/
   host:~$ git fetch --all --tags
   host:~$ git checkout tags/|kernel-tag|
   host:~$ git checkout -b <new-branch>

*  Set up a build environment
*  Build the linux kernel:

::

   host$ make imx_v8_defconfig imx8_phytec_distro.config imx8_phytec_platform.config
   host$ make -j16

*  Install kernel modules to e.g. NFS directory::

      host$ make INSTALL_MOD_PATH=/home/<user>/<rootfspath> modules_install

*  The Image can be found at ~/linux-imx/arch/arm64/boot/Image
*  The dtb can be found at
   ~/linux-imx/arch/arm64/boot/dts/freescale/|dt-carrierboard|.dtb

.. note::

   If you are facing the following build issue:

   .. code-block::

      scripts/dtc/yamltree.c:9:10: fatal error: yaml.h: No such file or directory

   Make sure you installed the package *"libyaml-dev"* on your host system:

   .. code-block:: console

      host:~$ sudo apt install libyaml-dev

Copy Kernel to SD Card
......................

When one-time boot via netboot is not sufficient, the kernel along with its
modules and the corresponding device tree blob may be copied directly to a
mounted SD card.

.. code-block:: console
   :substitutions:

   host:~$ cp arch/arm64/boot/Image /path/to/sdcard/boot/
   host:~$ cp arch/arm64/boot/dts/freescale/|dt-carrierboard|.dtb /path/to/sdcard/boot/oftree
   host:~$ make INSTALL_MOD_PATH=/path/to/sdcard/root/ modules_install

Accessing the Development States between Releases
-------------------------------------------------

Special release manifests exist to give you access to the current development
states of the *Yocto* BSP. They will not be displayed in the phyLinux selection
menu but need to be selected manually. This can be done using the following
command line:

.. code-block:: console
   :substitutions:

   host:~$ ./phyLinux init -p |kernel-socname| -r |yocto-manifestname-y|

This will initialize a BSP that will track the latest development state. From
now on *repo sync* in this folder will pull all the latest changes from
our Git repositories::

   host$ repo sync

Accessing Development State of Upcoming Major Release
-----------------------------------------------------

We are already working on the next major release update based on NXP BSP
rel_imx_5.15.52_2.1.0 (kirkstone). We are trying to update the public
development state on a regular basis.

.. code-block:: console
   :substitutions:

   host:~$ ./phyLinux init -p |kernel-socname| -r |yocto-manifestname-y-upcoming|

Accessing the Latest Upstream Support
-------------------------------------

We have a vanilla manifest that makes use of the Yocto master branches (not an
NXP release), Linux, and u-boot. This can be used to test the latest upstream
kernel/u-boot.

.. note::

   The master manifest reflects the latest state of development. This tends to
   be broken from time to time. We try to fix the master on a regular basis.

.. code-block:: console
   :substitutions:

   host:~$ ./phyLinux init -p |kernel-socname| -r |yocto-manifestname-master|

Format SD-Card
--------------

Most images are larger than the default root partition. To flash any storage
device with SD Card, the rootfs needs to be expanded or a separate partition
needs to be created. There are some different ways to format the SD Card.  The
easiest way to do this is to use the UI program Gparted.

Gparted
.......

*  Get GParted:

::

   host$ sudo apt install gparted

*  Insert the SD Card into your host and get the device name:

::

   host$ dmesg | tail
   ...
   [30436.175412] sd 4:0:0:0: [sdb] 62453760 512-byte logical blocks: (32.0 GB/29.8 GiB)
   [30436.179846]  sdb: sdb1 sdb2
   ...

*  Unmount all SD Card partitions.
*  Launch GParted:

::

   host$ sudo gparted

.. image:: /bsp/imx8/images/gparted1.png

Expand rootfs
~~~~~~~~~~~~~

*  Choose your SD Card device at the drop-down menu on the top right
*  Choose the ext4 root partition and click on resize:

.. image:: /bsp/imx8/images/gparted5.png
.. image:: /bsp/imx8/images/gparted2.png

*  Drag the slider as far as you like or enter the size manually.

.. image:: /bsp/imx8/images/gparted3.png

*  Confirm your entry by clicking on the "Change size" button.

.. image:: /bsp/imx8/images/gparted4.png

*  To apply your changes, press the green tick.
*  Now you can mount the root partition and copy e.g. the
   |yocto-imagename|-|yocto-machinename|.wic image to it. Then unmount it again:

.. code-block:: console
   :substitutions:

   host:~$ sudo cp |yocto-imagename|-|yocto-machinename|.wic /mnt/ ; sync
   host:~$ umount /mnt

Create the Third Partition
~~~~~~~~~~~~~~~~~~~~~~~~~~

*  Choose your SD Card device at the drop-down menu on the top right

.. image:: /bsp/imx8/images/gparted1.png

*  Choose the bigger unallocated  area and press "New":

.. image:: /bsp/imx8/images/gparted6.png

*  Click "Add"

.. image:: /bsp/imx8/images/gparted7.png

*  Confirm your changes by pressing the green tick.

.. image:: /bsp/imx8/images/gparted8.png

*  Now you can mount the new partition and copy e.g.
   |yocto-imagename|-|yocto-machinename|.wic image to it. Then unmount it again:

.. code-block:: console
   :substitutions:

   host:~$ sudo mount /dev/sde3 /mnt
   host:~$ sudo cp |yocto-imagename|-|yocto-machinename|.wic /mnt/ ; sync
   host:~$ umount /mnt
