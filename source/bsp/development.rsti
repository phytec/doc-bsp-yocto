Development
-----------

Booting the Kernel from a Network
.................................

Booting from a network means loading the kernel over TFTP and the root file
system over NFS. The bootloader itself must already be loaded from another boot
device that is available.

Host Preparation
~~~~~~~~~~~~~~~~

On the development host, a TFTP server must be installed and configured. The
following tools will be needed to boot the Kernel from Ethernet:

* A TFTP server

For *Ubuntu*, install::

   host$ sudo apt-get install tftpd-hpa xinetd

After the installation, there are two ways to configure the TFTP server.

TFTP Server Setup
~~~~~~~~~~~~~~~~~

1. As a stand-alone daemon
2. Controlled and handled by xinetd

* First, create a directory to store the TFTP files:

::

   host$ sudo mkdir /tftpboot
   host$ sudo chmod -R 777 /tftpboot
   host$ sudo chown -R nobody /tftpboot

* Then copy your BSP image files to this directory. You also need to configure a
  static IP address for the appropriate interface. The default IP address of the
  PHYTEC evaluation boards is 192.168.3.11. Setting a host address 192.168.3.10
  with netmask 255.255.255.0 is a good choice.

::

   host$ ifconfig eth1

* You will receive:

::

   eth1     Link encap:Ethernet   HWadr 00:11:6b:98:e3:47
            inet addr:192.168.3.10 Bcast:192.168.3.255 Mask:255.255.255.0

TFTP as a Stand-alone Daemon
****************************

* Create or edit /etc/default/tftpd-hpa:

::

   # /etc/default/tftpd-hpa
  
   TFTP_USERNAME="tftp"
   TFTP_DIRECTORY="/tftpboot"
   TFTP_ADDRESS=":69"
   TFTP_OPTIONS="-s -c"

* Set TFTP_DIRECTORY to your TFTP server root directory
* Set TFTP_ADDRESS to the host address the server is listening to (set to
  0.0.0.0:69 to listen to all local IPs)
* Set TFTP_OPTIONS, the following command shows the available options:

::

   host$ man tftpd

* Restart the services to pick up the configuration changes:

::

   host$ sudo service tftpd-hpa restart

* Now connect the ethernet port of the board to your host system, configure the
  board to network boot, and start it.

Usually, TFTP servers fetch files from the /tftpboot directory. If you built
your own images, please copy them from the BSP’s build directory to the
/tftpboot directory. We also need a network connection between the embedded
board and the TFTP server. The server should be set to IP 192.168.3.10 and
netmask 255.255.255.0.

NFS Server Setup
****************

* After the installation of the TFTP server, an NFS server needs to be
  installed, too.

::

   host$ sudo apt-get install nfs-kernel-server

* The NFS server is not restricted to a certain file system location, so all we
  have to do on most distributions is modify the file /etc/exports and export
  our root file system to the embedded network. In this example file, the whole
  directory is exported and the "lab network" address of the development host is
  192.168.3.10. The IP address has to be adapted to the local needs:

::

   /home/<user>/<rootfspath> 192.168.3.11/255.255.255.0(rw,no_root_squash,sync,no_subtree_check)

<user> must be replaced with your home directory name.
<rootfspath> can be set to a folder that contains a rootfs tar.gz image
extracted with sudo.

* Now the NFS-Server has to read the /etc/exportfs file again:

::

   host$ sudo exportfs -ra

Place Images on Host for Netboot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Copy the kernel image to your tftpboot directory:

::

   cp Image /tftpboot

* Copy the devicetree  to your tftpboot directory:

::

   cp oftree /tftpboot

* Extract the rootfs to your nfsroot:

.. parsed-literal::

   sudo tar -xvzf |imagename|-|machinename|.tar.gz -C <path_to_your_NFSROOT>

.. note::
   Check the destination path when unpacking the rootfs. 

Network Settings on Target
~~~~~~~~~~~~~~~~~~~~~~~~~~

To customize the targets ethernet configuration, please follow the description
here: |network-ref|

Booting from an Embedded Board
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Boot the board into the U-boot prompt and press any key to hold.

* To boot from a network, call:

::

   u-boot=> run netboot

Working with UUU-Tool
.....................

The Universal Update Utility Tool (UUU-Tool) from NXP is software to execute
from the host to load and run the bootloader on the board through SDP. For
detailed information visit https://github.com/NXPmicro/mfgtools or download the
`Official UUU-tool documentation
<https://community.nxp.com/pwmxy87654/attachments/pwmxy87654/imx-processors/140261/1/UUU.pdf>`_.

Host preparations for UUU-Tool Usage
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   host$ sudo apt-get install libusb-1.0-0-dev libzstd-dev libzip-dev libbz2-dev pkg-config cmake
   host$ git clone https://github.com/NXPmicro/mfgtools.git
   host$ cd mfgtools
   host$ cmake .
   host$ make

Get _flash.bin
~~~~~~~~~~~~~~

Download imx-boot from our server or get it from your Yocto build directory at
../build/deploy/images/|machinename|/ and copy the U-boot image (imx-boot) to
the UUU directory::

   host$ cd mfgtools
   host$ cp -v imx-boot uuu/_flash.bin

Prepare Target
~~~~~~~~~~~~~~

For UUU boot, set the |bootswitch| to **Serial downloader (USB boot)** (Boot
Configuration Options). Also, connect USB A Male to USB  Male cable from the
host to the top connector of **X5**.

Starting bootloader via UUU-Tool
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Execute and  Power up the board:

::

   host$ cd mfgtools/uuu
   host$ sudo ./uuu _flash.bin

You can see the bootlog on the console via the debug USB |debugusbconnector|, as
usual. 

.. note::
   The default boot command when booting with UUU-Tool is set to fastboot. If
   you want to change this, please adjust the environment variable bootcmd_mfg
   in U-boot prompt with setenv bootcmd_mfg. Please note, when booting with
   UUU-tool the default environment is loaded. Saveenv has no effect. If you
   want to change the boot command permanently for UUU-boot, you need to change
   this in U-boot code.

Flashing SD Card Image to eMMC via UUU-Tool
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Set the |bootswitch| to Serial downloader (USB boot) (Boot
Configuration Options). Also, connect USB OTG |usb-otg-ref| to your host. 

Download |imagename|-|machinename|.sdcard and imx-boot image from our server or
get them from your Yocto build directory at
../build/deploy/images/|machinename|/ and copy them to the UUU directory:

.. parsed-literal::

   host$ cd mfgtools
   host$ cp -v |imagename|-|machinename|.sdcard uuu/_rootfs.sdcard

Make sure that the U-Boot image is also available!

* Execute and power up the board:

::

   host$ cd mfgtools/uuu
   host$ sudo ./uuu -b emmc_burn_all.lst _flash.bin _rootfs.sdcard

Standalone Build
................

In this section, we describe how to build the U-Boot and the Linux kernel
without using the *Yocto Project*. This procedure makes the most sense for
development. The U-Boot source code, the Linux kernel, and all other git
repositories are available on our *Git* server at git://git.phytec.de.

.. note::
   Should your company firewall/gateway inhibit the git protocol, you may use
   HTTP or HTTPS instead (e.g. git clone https://git.phytec.de/u-boot-imx)

Git Repositories
~~~~~~~~~~~~~~~~

* Used U-Boot repository:

::

   git://git.phytec.de/u-boot-imx

* Our U-Boot is based on the u-boot-imx and adds board-specific patches.
* Used Linux kernel repository:

::

   git://git.phytec.de/linux-imx

* Our |soc| kernel is based on the linux-imx kernel. To find out which tag is
  used for a specific board, have a look at your BSP source folder:

::

   meta-phytec/dynamic-layers/freescale-layer/recipes-kernel/linux/linux-imx_*.bb
   meta-phytec/recipes-bsp/u-boot/u-boot-imx_*.bb

Get the SDK
~~~~~~~~~~~

You can download the SDK `here <dl-sdk_>`_, or build it yourself with Yocto:

* Move to the Yocto build directory:

.. parsed-literal::

   host$ source sources/poky/oe-init-build-env
   host$ bitbake -c populate_sdk |imagename| # or another image

Install the SDK
~~~~~~~~~~~~~~~

* Set correct permissions and install the SDK:

.. parsed-literal::

   host$ chmod +x phytec-|distro|-glibc-x86_64-|imagename|-cortexa53-crypto-toolchain-|manifestbspname|.sh
   host$ ./phytec-|distro|-glibc-x86_64-|imagename|-cortexa53-crypto-toolchain-|manifestbspname|.sh ============================================================================================================
   Enter target directory for SDK (default: /opt/|distro|/|manifestbspname|):
   You are about to install the SDK to "/opt/|distro|/|manifestbspname|". Proceed [Y/n]?
   Extracting SDK...done
   Setting it up...done
   SDK has been successfully set up and is ready to be used.

Using the SDK
~~~~~~~~~~~~~

Activate the toolchain for your shell by sourcing the file *environment-setup*
in the toolchain directory:

.. parsed-literal::

   host$ source /opt/|distro|/|manifestbspname|/environment-setup-cortexa53-crypto-phytec-linux

Build imx-boot
~~~~~~~~~~~~~~

With *U-Boot* version v2021.04, the *mkimage tool* from NXP is finally
integrated. This means that you can create the imx-boot without manually using
the imx *mkimage tool*.

Get the needed binaries
***********************

To build the imx-boot, you need to **copy** these **files** to your **u-boot-imx
build directory** and rename them to fit with *mkimage tool* script:

* **ARM Trusted firmware binary** (*mkimage tool* compatible format
  **bl31.bin**): bl31-|shortboardname|.bin
* **DDR firmware files** (*mkimage tool* compatible format
  **lpddr4_pmu_train_\*d_\*mem.bin**): *lpddr4_pmu_train_2d_dmem_202006.bin,
  lpddr4_pmu_train_2d_imem_202006.bin; (lpddr4_pmu_train_1d_dmem_202006.bin,
  lpddr4_pmu_train_1d_imem_202006.bin)*

If you already build our BSP with Yocto, you can get
the bl31-|shortboardname|.bin and lpddr4_pmu_train*.bin from the directory
mentioned here: |bsp-images-ref|

Or you can download the files here: |boottoolslink|

.. warning::

   Make sure you rename the files you need so that they are compatible with the
   *mkimage tool*.

Build U-Boot
************

* Get the U-Boot sources:

::

   host$ git clone git://git.phytec.de/u-boot-imx

* To get the correct *U-Boot* **tag** you need to take a look at our release
  notes, which can be found here: `release notes <releasenotes_>`_
* The **tag** needed at this release is called |uboottag|
* Check out the needed *U-Boot* **tag**:

.. parsed-literal::

   host$ cd ~/u-boot-imx/
   host$ git fetch --all --tags
   host$ git checkout tags/|uboottag|

* Technically, you can now build the U-Boot, but practically there are some
  further steps necessary:

   * Create your own development branch:

::

   host$ git checkout -b <new-branch>

.. note::
   You can name your development branch as you like, this is just an example.


   * Copy all binaries (mentioned here) into the U-Boot build directory
   * Set up a build environment (mentioned here)

Set this environment variable before building the Image:

.. parsed-literal::

   host$ export ATF_LOAD_ADDR=\ |atfloadaddr|

* build flash.bin (imx-boot):

.. parsed-literal::

   host$ make phycore-|shortboardname|\ _defconfig
   host$ make flash.bin

The flash.bin can be found at u-boot-imx/ directory and now can be flashed. A
chip-specific offset is needed. E.g. flash SD card:

::

   host$ sudo dd if=flash.bin of=/dev/sd[x] bs=1024 seek=32 conv=sync

Build Kernel
~~~~~~~~~~~~

* The used linux-imx branch can be found in the release notes: release notes
* The tag needed for this release is called |kerneltag|
* Check out the needed linux-imx tag:

.. parsed-literal::

   host$ git clone git://git.phytec.de/linux-imx
   host$ cd ~/linux-imx/
   host$ git fetch --all --tags
   host$ git checkout tags/|kerneltag|
   host$ git checkout -b <new-branch>

* Set up a build environment (mentioned here)
* Build the linux kernel:

::

   host$ make imx_v8_defconfig imx8_phytec_distro.config imx8_phytec_platform.config
   host$ make -j16

* The Image can be found at ~/linux-imx/arch/arm64/boot/Image
* The dtb can be found at
  ~/linux-imx/arch/arm64/boot/dts/freescale/|dtcarrierboard|.dtb

.. note::

   If you are facing the following build issue:

   .. parsed-literal::

      scripts/dtc/yamltree.c:9:10: fatal error: yaml.h: No such file or directory

   Make sure you installed the package *"libghc-libyaml-dev"* on your host system:

   .. parsed-literal::

      sudo apt install libghc-libyaml-dev

Accessing the Development States between Releases
.................................................

Special release manifests exist to give you access to the current development
states of the *Yocto* BSP. They will not be displayed in the phyLinux selection
menu but need to be selected manually. This can be done using the following
command line:

.. parsed-literal::

   host$ ./phyLinux init -p |shortboardname| -r |yoctocodename|

This will initialize a BSP that will track the latest development state. From
now on *repo sync* in this folder will pull all the latest changes from
our Git repositories::

   host$ repo sync

Accessing Development State of Upcoming Major Release
.....................................................

We are already working on the next major release update based on NXP BSP
rel_imx_5.15.52_2.1.0 (kirkstone). We are trying to update the public
development state on a regular basis.

.. parsed-literal::

   host$ ./phyLinux init -p |shortboardname| -r kirkstone

Accessing the Latest Upstream Support
.....................................

We have a vanilla manifest that makes use of the Yocto master branches (not an
NXP release), Linux, and u-boot. This can be used to test the latest upstream
kernel/u-boot.

.. note::

   The master manifest reflects the latest state of development. This tends to
   be broken from time to time. We try to fix the master on a regular basis.

.. parsed-literal::

   host$ ./phyLinux init -p |shortboardname| -r BSP-Yocto-Ampliphy-i.MX8MP-master

Format SD-Card
..............

Most images are larger than the default root partition. To flash any storage
device with SD Card, the rootfs needs to be expanded or a separate partition
needs to be created. There are some different ways to format the SD Card.  The
easiest way to do this is to use the UI program Gparted. 

Gparted
~~~~~~~

* Get GParted:

::

   host$ sudo apt install gparted

* Insert the SD Card into your host and get the device name:

::

   host$ dmesg | tail
   ...
   [30436.175412] sd 4:0:0:0: [sdb] 62453760 512-byte logical blocks: (32.0 GB/29.8 GiB)
   [30436.179846]  sdb: sdb1 sdb2
   ...

* Unmount all SD Card partitions.
* Launch GParted:

::

   host$ sudo gparted

.. image:: /bsp/images/gparted1.png

Expand rootfs
*************

* Choose your SD Card device at the drop-down menu on the top right
* Choose the ext4 root partition and click on resize:

.. image:: /bsp/images/gparted5.png
.. image:: /bsp/images/gparted2.png

* Drag the slider as far as you like or enter the size manually.

.. image:: /bsp/images/gparted3.png
 
* Confirm your entry by clicking on the "Change size" button.

.. image:: /bsp/images/gparted4.png

* To apply your changes, press the green tick. 
* Now you can mount the root partition and copy e.g. the
  |imagename|-|machinename|.sdcard image to it. Then unmount it again:

.. parsed-literal::

   host$ sudo cp |imagename|-|machinename|.sdcard /mnt/ ; sync
   host$ umount /mnt

Create the Third Partition
**************************

* Choose your SD Card device at the drop-down menu on the top right

.. image:: /bsp/images/gparted1.png

* Choose the bigger unallocated  area and press "New":

.. image:: /bsp/images/gparted6.png

* Click "Add"

.. image:: /bsp/images/gparted7.png

* Confirm your changes by pressing the green tick.

.. image:: /bsp/images/gparted8.png

* Now you can mount the new partition and copy e.g.
  |imagename|-|machinename|.sdcard image to it. Then unmount it again:

.. parsed-literal::

   host$ sudo mount /dev/sde3 /mnt
   host$ sudo cp |imagename|-|machinename|.sdcard /mnt/ ; sync
   host$ umount /mnt
