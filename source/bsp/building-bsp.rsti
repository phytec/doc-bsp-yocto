Building the BSP
================

This section will guide you through the general build process of the |soc| BSP
using Yocto and the phyLinux script. For more information about our
meta-layer or Yocto in general visit: |yocto-ref-manual|.

Basic Set-Up
------------

If you have never created a Phytec BSP with Yocto on your computer, you should
take a closer look at the chapter BSP Workspace Installation in the
|yocto-ref-manual|.

Get the BSP
-----------

There are two ways to get the BSP sources. You can download the complete BSP
sources from our |dl-server-link| page; or you can fetch and build it
yourself with Yocto. This is particularly useful if you want to make
customizations.

The phyLinux script is a basic management tool for PHYTEC Yocto BSP releases
written in Python. It is mainly a helper to get started with the BSP sources
structure.

*  Create a fresh project folder, get phyLinux, and make the script executable:

   .. code-block:: console

      host:~$ mkdir ~/yocto
      host:~$ cd yocto/
      host:~/yocto$ wget https://download.phytec.de/Software/Linux/Yocto/Tools/phyLinux
      host:~/yocto$ chmod +x phyLinux

   .. warning::

      A clean folder is important because phyLinux will clean its working
      directory. Calling phyLinux from a directory that isn't empty will result in
      a warning.

*  Run phyLinux:

   .. code-block:: console

      host:~/yocto$ ./phyLinux init

   .. note::

      On the first initialization, the phyLinux script will ask you to install
      the Repo tool in your ``/usr/local/bin`` directory.

*  During the execution of the init command, you need to choose your processor
   platform (SoC), PHYTEC's BSP release number, and the hardware you are working
   on.

   .. note::

      If you cannot identify your board with the information given in the selector,
      have a look at the invoice for the product. And have a look at the webpage
      of |dlpage-bsp-link|.

*  It is also possible to pass this information directly using command line
   parameters:

   .. code-block:: console
      :substitutions:

      host:~/yocto$ DISTRO=|yocto-distro| MACHINE=|yocto-machinename| ./phyLinux init -p |kernel-socname| -r |yocto-manifestname|

After the execution of the init command, phyLinux will print a few important
notes. For example, it will print your git identity, SOC and BSP release which
was selected as well as information for the next steps in the build process.

Starting the Build Process
..........................

*  Set up the shell environment variables:

   .. code-block:: console

      host:~/yocto$ source sources/poky/oe-init-build-env

   .. note::

      This needs to be done every time you open a new shell for starting builds.

*  The current working directory of the shell should change to build/.
*  Open the main configuration file and accept the GPU and VPU binary license
   agreements. Do this by uncommenting the corresponding line, as below.

   .. code-block:: console

      host:~/yocto/build$ vim conf/local.conf
      # Uncomment to accept NXP EULA
      # EULA can be found under ../sources/meta-freescale/EULA
      ACCEPT_FSL_EULA = "1"

*  Build your image:

   .. code-block:: console
      :substitutions:

      host:~/yocto/build$ bitbake |yocto-imagename|

   .. note::
      For the first build we suggest starting with our smaller non-graphical
      image phytec-headless-image to see if everything is working correctly.

      .. code-block:: console
         :substitutions:

         host:~/yocto/build$ bitbake phytec-headless-image

      The first compile process takes about 40 minutes on a modern Intel
      Core i7. All subsequent builds will use the filled caches and should take
      about 3 minutes.

BSP Images
..........

All images generated by Bitbake are deployed to
``~/yocto/build/deploy*/images/<machine>``. The following list shows for
example all files generated for the |yocto-machinename| machine:
