# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, PHYTEC Messtechnik GmbH
# This file is distributed under the same license as the PHYTEC BSP Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PHYTEC BSP Documentation imx8mm-pd25.1.0-75-g28e760b\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 14:48+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

msgid "Documentation in pdf format: `Download <static-pdf-dl_>`_"
msgstr ""

msgid "|yocto-ref-manual|"
msgstr ""

msgid "Document Title"
msgstr ""

msgid "|yocto-ref-manual| |yocto-codename|"
msgstr ""

msgid "Document Type"
msgstr ""

msgid "Yocto Manual"
msgstr ""

msgid "Release Date"
msgstr ""

msgid "XXXX/XX/XX"
msgstr ""

msgid "Is Branch of"
msgstr ""

msgid "Compatible BSPs"
msgstr ""

msgid "BSP Release Type"
msgstr ""

msgid "BSP Release Date"
msgstr ""

msgid "BSP Status"
msgstr ""

msgid "BSP-Yocto-Ampliphy-i.MX6-PD22.1.0"
msgstr ""

msgid "Major"
msgstr ""

msgid "14.12.2022"
msgstr ""

msgid "released"
msgstr ""

msgid "BSP-Yocto-Ampliphy-i.MX6-PD22.1.1"
msgstr ""

msgid "Minor"
msgstr ""

msgid "20.06.2023"
msgstr ""

msgid "BSP-Yocto-Ampliphy-i.MX6UL-PD22.1.0"
msgstr ""

msgid "11.08.2022"
msgstr ""

msgid "BSP-Yocto-Ampliphy-i.MX6UL-PD22.1.1"
msgstr ""

msgid "23.05.2023"
msgstr ""

msgid "BSP-Yocto-Ampliphy-AM335x-PD23.1.0"
msgstr ""

msgid "25.04.2023"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX8MM-PD23.1.0"
msgstr ""

msgid "12.12.2023"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX8MP-PD23.1.0"
msgstr ""

msgid "BSP-Yocto-Ampliphy-AM62x-PD23.2.0"
msgstr ""

msgid "28.09.2023"
msgstr ""

msgid "BSP-Yocto-Ampliphy-AM62Ax-PD23.1.0"
msgstr ""

msgid "BSP-Yocto-Ampliphy-AM64x-PD23.2.0"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX7-PD23.1.0"
msgstr ""

msgid "15.12.2023"
msgstr ""

msgid "This manual applies to all |yocto-codename| based PHYTEC releases."
msgstr ""

msgid "The Yocto Project"
msgstr ""

msgid "PHYTEC Documentation"
msgstr ""

msgid "PHYTEC will provide a variety of hardware and software documentation for all of our products. This includes any or all of the following:"
msgstr ""

msgid "**QS Guide**: A short guide on how to set up and boot a phyCORE board along with brief information on building a BSP, the device tree, and accessing peripherals."
msgstr ""

msgid "**Hardware Manual**: A detailed description of the System on Module and accompanying carrier board."
msgstr ""

msgid "**Yocto Guide**: A comprehensive guide for the Yocto version the phyCORE uses. This guide contains an overview of Yocto; introducing, installing, and customizing the PHYTEC BSP; how to work with programs like Poky and Bitbake; and much more."
msgstr ""

msgid "**BSP Manual**: A manual specific to the BSP version of the phyCORE. Information such as how to build the BSP, booting, updating software, device tree, and accessing peripherals can be found here."
msgstr ""

msgid "**Development Environment Guide**: This guide shows how to work with the Virtual Machine (VM) Host PHYTEC has developed and prepared to run various Development Environments. There are detailed step-by-step instructions for Eclipse and Qt Creator, which are included in the VM. There are instructions for running demo projects for these programs on a phyCORE product as well. Information on how to build a Linux host PC yourself is also a part of this guide."
msgstr ""

msgid "**Pin Muxing Table**: phyCORE SOMs have an accompanying pin table (in Excel format). This table will show the complete default signal path, from processor to carrier board. The default device tree muxing option will also be included. This gives a developer all the information needed in one location to make muxing changes and design options when developing a specialized carrier board or adapting a PHYTEC phyCORE SOM to an application."
msgstr ""

msgid "On top of these standard manuals and guides, PHYTEC will also provide Product Change Notifications, Application Notes, and Technical Notes. These will be done on a case-by-case basis. Most of the documentation can be found in the applicable download page of our products."
msgstr ""

msgid "Yocto Introduction"
msgstr ""

msgid "Yocto is the smallest SI metric system prefix. Like milli equates to ``m = 10^-3``, and so is yocto ``y = 10^-24``. Yocto is also a project working group of the `Linux Foundation <https://www.linuxfoundation.org/>`_ and therefore backed up by several major companies in the field. On the `Yocto Project website <https://www.yoctoproject.org/>`_ you can read the official introduction:"
msgstr ""

msgid "The Yocto Project is an open-source collaboration project that provides templates, tools, and methods to help you create custom Linux-based systems for embedded products regardless of the hardware architecture. It was founded in 2010 as a collaboration among many hardware manufacturers, open-source operating systems vendors, and electronics companies to bring some order to the chaos of embedded Linux development."
msgstr ""

msgid "As said, the project wants to provide toolsets for embedded developers. It builds on top of the long-lasting `OpenEmbedded <https://www.openembedded.org/wiki/Main_Page>`_ project. It is not a Linux distribution. But it contains the tools to create a Linux distribution specially fitted to the product requirements. The most important step in bringing order to the set of tools is to define a common versioning scheme and a reference system. All subprojects have then to comply with the reference system and have to comply with the versioning scheme."
msgstr ""

msgid "The release process is similar to the `Linux kernel <https://kernel.org/>`_. Yocto increases its version number every six months and gives the release a codename. The release list can be found here: https://wiki.yoctoproject.org/wiki/Releases"
msgstr ""

msgid "Core Components"
msgstr ""

msgid "The most important tools or subprojects of the *Yocto* Project are:"
msgstr ""

msgid "Bitbake: build engine, a task scheduler like make, interprets metadata"
msgstr ""

msgid "OpenEmbedded-Core, a set of base layers, containing metadata of software, no sources"
msgstr ""

msgid "Yocto kernel"
msgstr ""

msgid "Optimized for embedded devices"
msgstr ""

msgid "Includes many subprojects: rt-kernel, vendor patches"
msgstr ""

msgid "The infrastructure provided by Wind River"
msgstr ""

msgid "Alternative: classic kernel build â†’ we use it to integrate our kernel into *Yocto*"
msgstr ""

msgid "*Yocto* Reference BSP: *beagleboneblack*, *minnow max*"
msgstr ""

msgid "*Poky*, the reference system, a collection of projects and tools, used to bootstrap a new distribution based on *Yocto*"
msgstr ""

msgid "Vocabulary"
msgstr ""

msgid "Recipes"
msgstr ""

msgid "Recipes contain information about the software project (author, homepage, and license). A recipe is versioned, defines dependencies, contains the URL of the source code, and describes how to fetch, configure, and compile the sources. It describes how to package the software, e.g. into different .deb packages, which then contain the installation path. Recipes are basically written in *Bitbake's* own programming language, which has a simple syntax. However, a recipe can contain *Python* as well as a bash code."
msgstr ""

msgid "Classes"
msgstr ""

msgid "Classes combine functionality used inside recipes into reusable blocks."
msgstr ""

msgid "Layers"
msgstr ""

msgid "A layer is a collection of recipes, classes, and configuration metadata. A layer can depend on other layers and can be included or excluded one by one. It encapsulates a specific functionality and fulfills a specific purpose. Each layer falls into a specific category:"
msgstr ""

msgid "Base"
msgstr ""

msgid "Machine (BSP)"
msgstr ""

msgid "Software"
msgstr ""

msgid "Distribution"
msgstr ""

msgid "Miscellaneous"
msgstr ""

msgid "*Yocto's* versioning scheme is reflected in every layer as version branches. For each *Yocto* version, every layer has a named branch in its *Git* repository. You can add one or many layers of each category in your build."
msgstr ""

msgid "A collection of OpenEmbedded layers can be found here. The search function is very helpful to see if a software package can be retrieved and integrated easily: https://layers.openembedded.org/layerindex/branch/kirkstone/layers/"
msgstr ""

msgid "Machine"
msgstr ""

msgid "Machines are configuration variables that describe the aspects of the target hardware."
msgstr ""

msgid "Distribution (Distro)"
msgstr ""

msgid "Distribution describes the software configuration and comes with a set of software features."
msgstr ""

msgid "Poky"
msgstr ""

msgid "*Poky* is the reference system to define *Yocto* Project compatibility. It combines several subprojects into releases:"
msgstr ""

msgid "*Bitbake*"
msgstr ""

msgid "*Toaster*"
msgstr ""

msgid "OpenEmbedded Core"
msgstr ""

msgid "*Yocto* Documentation"
msgstr ""

msgid "*Yocto* Reference BSP"
msgstr ""

msgid "Bitbake"
msgstr ""

msgid "*Bitbake* is the task scheduler. It is written in *Python* and interprets recipes that contain code in *Bitbake's* own programming language, *Python*, and bash code. The official documentation can be found here: https://docs.yoctoproject.org/bitbake/2.0/index.html"
msgstr ""

msgid "Toaster"
msgstr ""

msgid "*Toaster* is a web frontend for *Bitbake* to start and investigate builds. It provides information about the build history and statistics on created images. There are several use cases where the installation and maintenance of a *Toaster* instance are beneficial. PHYTEC did not add or remove any features to the upstream *Toaster*, provided by *Poky*. The best source for more information is the official documentation: https://docs.yoctoproject.org/4.0.6/toaster-manual/index.html"
msgstr ""

msgid "Official Documentation"
msgstr ""

msgid "For more general questions about *Bitbake* and *Poky* consult the mega-manual: https://docs.yoctoproject.org/4.0.6/singleindex.html"
msgstr ""

msgid "Compatible Linux Distributions"
msgstr ""

msgid "To build *Yocto* you need a compatible *Linux* host development machine. The list of supported distributions can be found in the reference manual: https://docs.yoctoproject.org/4.0.6/ref-manual/system-requirements.html#supported-linux-distributions"
msgstr ""

msgid "PHYTEC BSP Introduction"
msgstr ""

msgid "BSP Structure"
msgstr ""

msgid "The BSP consists roughly of three parts. BSP management, BSP metadata, and BSP content. The management consists of *Repo* and phyLinux while the metadata depends on the SOC, which describes how to build the software. The content comprises PHYTEC's *Git* repositories and external sources."
msgstr ""

msgid "BSP Management"
msgstr ""

msgid "*Yocto* is an umbrella project. Naturally, this will force the user to base their work on several external repositories. They need to be managed in a deterministic way. We use manifest files, which contain an XML data structure, to describe all git repositories with pinned-down versions. The *Repo* tool and our phyLinux wrapper script are used to manage the manifests and set up the BSP, as described in the manifest file."
msgstr ""

msgid "phyLinux"
msgstr ""

msgid "phyLinux is a wrapper for *Repo* to handle downloading and setting up the BSP with an \"out of the box\" experience."
msgstr ""

msgid "Repo"
msgstr ""

msgid "*Repo* is a wrapper around the *Repo* toolset. The phyLinux script will install the wrapper in a global path. This is only a wrapper, though. Whenever you run ``repo init -u <url>``, you first download the *Repo* tools from *Googles* Git server in a specific version to the ``.repo/repo`` directory. The next time you run *Repo*, all the commands will be available. Be aware that the *Repo* version in different build directories can differ over the years if you do not run *Repo sync*. Also if you store information for your archives, you need to include the complete ``.repo`` folder."
msgstr ""

msgid "*Repo* expects a *Git* repository which will be parsed from the command line. In the PHYTEC BSP, it is called phyÂ²octo. In this repository, all information about a software BSP release is stored in the form of a *Repo* XML manifest. This data structure defines URLs of *Git* servers (called \"remotes\") and *Git* repositories and their states (called \"projects\"). The *Git* repositories can be seen in different states. The revision field can be a branch, tag, or commit id of a repository. This means the state of the software is not necessarily unique and can change over time. That is the reason we use only tags or commit ids for our releases. The state of the working directory is then unique and does not change."
msgstr ""

msgid "The manifests for the releases have the same name as the release itself. It is a unique identifier for the complete BSP. The releases are sorted by the SoC platform. The selected SoC will define the branch of the phyÂ²octo *Git* repository which will be used for the manifest selection."
msgstr ""

msgid "BSP Metadata"
msgstr ""

msgid "We include several third-party layers in our BSP to get a complete *Linux* distribution up and running without the need to integrate external projects. All used repositories are described in the following section."
msgstr ""

msgid "The PHYTEC BSP is built on top of *Poky*. It comes with a specific version, defined in the *Repo* manifest. *Poky* comes with a specific version of *Bitbake*. The OpenEmbedded-core layer \"meta\" is used as a base for our *Linux* system."
msgstr ""

msgid "meta-openembedded"
msgstr ""

msgid "OpenEmbedded is a collection of different layers containing the meta description for many open-source software projects. We ship all OpenEmbedded layers with our BSP, but not all of them are activated. Our example images pull several software packages generated from OpenEmbedded recipes."
msgstr ""

msgid "meta-qt6"
msgstr ""

msgid "This layer provides an integration of *Qt6* in the *Poky*-based root filesystem and is integrated into our BSP."
msgstr ""

msgid "meta-nodejs"
msgstr ""

msgid "This is an application layer to add recent Node.js versions."
msgstr ""

msgid "meta-gstreamer1.0"
msgstr ""

msgid "This is an application layer to add recent GStreamer versions."
msgstr ""

msgid "meta-rauc"
msgstr ""

msgid "This layer contains the tools required to build an updated infrastructure with `RAUC <https://rauc.readthedocs.io/en/latest/index.html>`_. A comparison with other update systems can be found here: `Yocto update tools <https://wiki.yoctoproject.org/wiki/System_Update>`_."
msgstr ""

msgid "meta-phytec"
msgstr ""

msgid "This layer contains all machines and common features for all our BSPs. It is PHYTEC's `Yocto Board Support Package <https://docs.yoctoproject.org/4.0.6/bsp-guide/index.html>`_ for all supported hardware (since *fido*) and is designed to be standalone with *Poky*. Only these two parts are required if you want to integrate the PHYTEC's hardware into your existing *Yocto* workflow. The features are:"
msgstr ""

msgid "Bootloaders in ``recipes-bsp/barebox/`` and ``recipes-bsp/u-boot/``"
msgstr ""

msgid "Kernels in ``recipes-kernel/linux/`` and ``dynamic-layers/fsl-bsp-release/recipes-kernel/linux/``"
msgstr ""

msgid "Many machines in ``conf/machine/``"
msgstr ""

msgid "Proprietary *OpenGL ES/EGL* user space libraries for AM335x and i.MX 6 platforms"
msgstr ""

msgid "Proprietary *OpenCL* libraries for i.MX 6 platforms"
msgstr ""

msgid "meta-ampliphy"
msgstr ""

msgid "This is our example distribution and BSP layer. It extends the basic configuration of *Poky* with software projects described by all the other BSP components. It provides a base for your specific development scenarios. The current features are:"
msgstr ""

msgid "`systemd <https://www.freedesktop.org/wiki/Software/systemd//>`_ init system"
msgstr ""

msgid "Images: ``phytec-headless-image`` for non-graphics applications"
msgstr ""

msgid "Camera integration with OpenCV and GStreamer examples for the i.MX 6 platform bundled in a ``phytec-vision-image``"
msgstr ""

msgid "RAUC integration: we set up basic support for an A/B system image update, which is possible locally and over-the-air"
msgstr ""

msgid "meta-qt6-phytec"
msgstr ""

msgid "This is our layer for Qt6 board integration and examples. The features are:"
msgstr ""

msgid "`Qt6 with eglfs backend <https://doc.qt.io/qt-5/embedded-linux.html>`_ for PHYTEC's AM335x, i.MX 6 and RK3288 platforms"
msgstr ""

msgid "Images: ``phytec-qt6demo-image`` for *Qt6* and video applications"
msgstr ""

msgid "A *Qt6* demo application demonstrating how to create a *Qt6* project using *QML* widgets and a *Bitbake* recipe for the *Yocto* and *systemd* integration. It can be found in ``sources/meta-qt6-phytec/recipes-qt/examples/phytec-qtdemo_git.bb``"
msgstr ""

msgid "meta-virtualization"
msgstr ""

msgid "This layer provides support for building Xen, KVM, Libvirt, and associated packages necessary for constructing OE-based virtualized solutions."
msgstr ""

msgid "meta-security"
msgstr ""

msgid "This layer provides security tools, hardening tools for Linux kernels, and libraries for implementing security mechanisms."
msgstr ""

msgid "meta-selinux"
msgstr ""

msgid "This layer's purpose is to enable SE Linux support. The majority of this layer's work is accomplished in *bbappend* files, used to enable SE Linux support in existing recipes."
msgstr ""

msgid "meta-browser"
msgstr ""

msgid "This is an application layer to add recent web browsers (Chromium, Firefox, etc.)."
msgstr ""

msgid "meta-rust"
msgstr ""

msgid "Includes the Rust compiler and the Cargo package manager for Rust."
msgstr ""

msgid "meta-timesys"
msgstr ""

msgid "Timesys layer for Vigiles Yocto CVE monitoring, security notifications, and image manifest generation."
msgstr ""

msgid "meta-freescale"
msgstr ""

msgid "This layer provides support for the i.MX, Layerscape, and QorIQ product lines."
msgstr ""

msgid "meta-freescale-3rdparty"
msgstr ""

msgid "Provides support for boards from various vendors."
msgstr ""

msgid "meta-freescale-distro"
msgstr ""

msgid "This layer provides support for Freescale's Demonstration images for use with OpenEmbedded and/or Yocto Freescale's BSP layer."
msgstr ""

msgid "base (fsl-community-bsp-base)"
msgstr ""

msgid "This layer provides BSP base files of NXP."
msgstr ""

msgid "meta-fsl-bsp-release"
msgstr ""

msgid "This is the i.MX Yocto Project Release Layer."
msgstr ""

msgid "BSP Content"
msgstr ""

msgid "The BSP content gets pulled from different online sources when you first start using *Bitbake*. All files will be downloaded and cloned in a local directory configured as ``DL_DIR`` in *Yocto*. If you backup your BSP with the complete content, those sources have to be backed up, too. How you can do this will be explained in the chapter :ref:`kirkstone_gen-source-mirrors`."
msgstr ""

msgid "Build Configuration"
msgstr ""

msgid "The BSP initializes a build folder that will contain all files you create by running *Bitbake* commands. It contains a ``conf`` folder that handles build input variables."
msgstr ""

msgid "``bblayers.conf`` defines activated meta-layers,"
msgstr ""

msgid "``local.conf`` defines build input variables specific to your build"
msgstr ""

msgid "``site.conf`` defines build input variables specific to the development host"
msgstr ""

msgid "The two topmost build input variables are ``DISTRO`` and ``MACHINE``. They are preconfigured ``local.conf`` when you check out the BSP using phyLinux."
msgstr ""

msgid "We use \"*Ampliphy*\" as ``DISTRO`` with our BSP. This distribution will be preselected and give you a starting point for implementing your own configuration."
msgstr ""

msgid "A ``MACHINE`` defines a binary image that supports specific hardware combinations of module and baseboard. Check the ``machine.conf`` file or our webpage for a description of the hardware."
msgstr ""

msgid "Pre-built Images"
msgstr ""

msgid "For each BSP we provide pre-built target images that can be downloaded from the PHYTEC FTP server: https://download.phytec.de/Software/Linux/"
msgstr ""

msgid "These images are also used for the BSP tests, which are flashed to the boards during production. You can use the provided ``.wic`` images to create a bootable SD card at any time. Identify your hardware and flash the downloaded image file to an empty SD card using ``dd``. Please see section Images for information about the correct usage of the command."
msgstr ""

msgid "BSP Workspace Installation"
msgstr ""

msgid "Setting Up the Host"
msgstr ""

msgid "You can set up the host or use one of our build-container to run a Yocto build. You need to have a running *Linux* distribution. It should be running on a powerful machine since a lot of compiling will need to be done."
msgstr ""

msgid "If you want to use a build-container, you only need to install following packages on your host"
msgstr ""

msgid "Continue with the next step :ref:`kirkstone_git-config` after that. The documentation for using build-container can be found in this manual after :ref:`kirkstone_phylinux-advanced-usage` of phyLinux."
msgstr ""

msgid "Else *Yocto* needs a handful of additional packages on your host. For *Ubuntu 20.04* you need"
msgstr ""

msgid "For other distributions you can find information in the *Yocto* Quick Build: https://docs.yoctoproject.org/4.0.6/brief-yoctoprojectqs/index.html"
msgstr ""

msgid "Git Configuration"
msgstr ""

msgid "The BSP heavily utilizes *Git*. *Git* needs some information from you as a user to identify who made changes. Create a ``~/.gitconfig`` with the following content, if you do not have one"
msgstr ""

msgid "You should set ``name`` and ``email`` in your *Git* configuration, otherwise, *Bitbake* will complain during the first build. You can use the two commands to set them directly without editing ``~/.gitconfig`` manually"
msgstr ""

msgid "site.conf Setup"
msgstr ""

msgid "Before starting the *Yocto* build, it is advisable to configure the development setup. Two things are most important: the download directory and the cache directory. PHYTEC strongly recommends configuring the setup as it will reduce the compile time of consequent builds."
msgstr ""

msgid "A download directory is a place where *Yocto* stores all sources fetched from the internet. It can contain tar.gz, *Git* mirror, etc. It is very useful to set this to a common shared location on the machine. Create this directory with 777 access rights. To share this directory with different users, all files need to have group write access. This will most probably be in conflict with default *umask* settings. One possible solution would be to use ACLs for this directory"
msgstr ""

msgid "If you have already created a download directory and want to fix the permissions afterward, you can do so with"
msgstr ""

msgid "The cache directory stores all stages of the build process. *Poky* has quite an involved caching infrastructure. It is advisable to create a shared directory, as all builds can access this cache directory, called the shared state cache."
msgstr ""

msgid "Create the two directories on a drive where you have approximately 50 GB of space and assign the two variables in your ``build/conf/local.conf``"
msgstr ""

msgid "If you want to know more about configuring your build, see the documented example settings"
msgstr ""

msgid "phyLinux Documentation"
msgstr ""

msgid "The phyLinux script is a basic management tool for PHYTEC *Yocto* BSP releases written in *Python*. It is mainly a helper to get started with the BSP structure. You can get all the BSP sources without the need of interacting with *Repo* or *Git*."
msgstr ""

msgid "The phyLinux script has only one real dependency. It requires the *wget* tool installed on your host. It will also install the `Repo tool <https://source.android.com/docs/setup/download>`_ in a global path (/usr/local/bin) on your host PC. You can install it in a different location manually. *Repo* will be automatically detected by phyLinux if it is found in the PATH. The *Repo* tool will be used to manage the different *Git* repositories of the *Yocto* BSP."
msgstr ""

msgid "Get phyLinux"
msgstr ""

msgid "The phyLinux script can be found on the PHYTEC download server: https://download.phytec.de/Software/Linux/Yocto/Tools/phyLinux"
msgstr ""

msgid "Basic Usage"
msgstr ""

msgid "For the basic usage of phyLinux, type"
msgstr ""

msgid "which will result in"
msgstr ""

msgid "Initialization"
msgstr ""

msgid "Create a fresh project folder"
msgstr ""

msgid "Calling phyLinux will use the default Python version. Starting with Ubuntu 20.04 it will be Python3. If you want to initiate a BSP, which is not compatible with Python3, you need to set Python2 as default (temporarily) before running phyLinux"
msgstr ""

msgid "Now run phyLinux from the new folder"
msgstr ""

msgid "A clean folder is important because phyLinux will clean its working directory. Calling phyLinux from a directory that isn't empty will result in the following **warning**::"
msgstr ""

msgid "On the first initialization, the phyLinux script will ask you to install the *Repo* tool in your */usr/local/bin* directory. During the execution of the *init* command, you need to choose your processor platform (SoC), PHYTEC's BSP release number, and the hardware you are working on"
msgstr ""

msgid "If you cannot identify your board with the information given in the selector, have a look at the invoice for the product. After the configuration is done, you can always run"
msgstr ""

msgid "to see which SoC and Release are selected in the current workspace. If you do not want to use the selector, phyLinux also supports command-line arguments for several settings"
msgstr ""

msgid "or view the help command for more information"
msgstr ""

msgid "After the execution of the *init* command, phyLinux will print a few important notes as well as information for the next steps in the build process."
msgstr ""

msgid "Advanced Usage"
msgstr ""

msgid "phyLinux can be used to transport software states over any medium. The state of the software is uniquely identified by *manifest.xml*. You can create a manifest, send it to another place and recover the software state with"
msgstr ""

msgid "You can also create a *Git* repository containing your software states. The *Git* repository needs to have branches other than master, as we reserved the master branch for different usage. Use phyLinux to check out the states"
msgstr ""

msgid "Using build-container"
msgstr ""

msgid "Currently, it is not possible to run the phyLinux script inside of a container. After a complete init with the phyLinux script on your host machine, you can use a container for the build. If you do not have phyLinux script running on your machine, please see phyLinux Documentation."
msgstr ""

msgid "There are various possibilities to run a build-container. Commonly used is docker and podman, though we prefer podman as it does not need root privileges to run."
msgstr ""

msgid "Installation"
msgstr ""

msgid "How to install podman: https://podman.io How to install docker: https://docs.docker.com/engine/install/"
msgstr ""

msgid "Available container"
msgstr ""

msgid "Right now we provide 4 different container based on Ubuntu LTS versions: https://hub.docker.com/u/phybuilder"
msgstr ""

msgid "yocto-ubuntu-16.04"
msgstr ""

msgid "yocto-ubuntu-18.04"
msgstr ""

msgid "yocto-ubuntu-20.04"
msgstr ""

msgid "yocto-ubuntu-22.04"
msgstr ""

msgid "These containers can be run with podman or docker. With Yocto Project branch |yocto-codename| the container \"yocto-ubuntu-20.04\" is preferred."
msgstr ""

msgid "Download/Pull container"
msgstr ""

msgid "By adding a tag at the end separated by a colon, you can also pull or run a special tagged container."
msgstr ""

msgid "podman pull docker.io/phybuilder/yocto-ubuntu-20.04:phy2"
msgstr ""

msgid "You can find all available tags in our duckerhub space:"
msgstr ""

msgid "https://hub.docker.com/r/phybuilder/yocto-ubuntu-16.04/tags"
msgstr ""

msgid "https://hub.docker.com/r/phybuilder/yocto-ubuntu-18.04/tags"
msgstr ""

msgid "https://hub.docker.com/r/phybuilder/yocto-ubuntu-20.04/tags"
msgstr ""

msgid "https://hub.docker.com/r/phybuilder/yocto-ubuntu-22.04/tags"
msgstr ""

msgid "If you try to run a container, which is not pulled/downloaded, it will be pulled/downloaded automatically."
msgstr ""

msgid "You can have a look at all downloaded/pulled container with:"
msgstr ""

msgid "Run container"
msgstr ""

msgid "To run and use container for a Yocto build, first enter to your folder, where you run phyLinux init before. Then start the container"
msgstr ""

msgid "To run and use a container with docker, it is not that simple like with podman. Therefore the container-user has to be defined and configured. Furthermore forwarding of credentials is not given per default and has to be configured as well."
msgstr ""

msgid "Now your commandline should look something like that (where $USERNAME is the user, who called \"podman run\" and the char/number code diffs every time a container is started)"
msgstr ""

msgid "If the given username is \"root\" you will not be able to run bitbake at all. Please be sure, you run the container with your own user."
msgstr ""

msgid "Now you are ready to go on and starting the build. To stop/close the container, just call"
msgstr ""

msgid "Working with Poky and Bitbake"
msgstr ""

msgid "Start the Build"
msgstr ""

msgid "After you download all the metadata with phyLinux init, you have to set up the shell environment variables. This needs to be done every time you open a new shell for starting builds. We use the shell script provided by *Poky* in its default configuration. From the root of your project directory type"
msgstr ""

msgid "The abbreviation for the source command is a single dot"
msgstr ""

msgid "The current working directory of the shell should change to *build/*. Before building for the first time, you should take a look at the main configuration file"
msgstr ""

msgid "Your local modifications for the current build are stored here. Depending on the SoC, you might need to accept license agreements. For example, to build the image for Freescale/NXP processors you need to accept the GPU and VPU binary license agreements. You have to uncomment the corresponding line"
msgstr ""

msgid "Now you are ready to build your first image. We suggest starting with our smaller non-graphical image *phytec-headless-image* to see if everything is working correctly"
msgstr ""

msgid "The first compile process takes about 40 minutes on a modern Intel Core i7. All subsequent builds will use the filled caches and should take about 3 minutes."
msgstr ""

msgid "Images"
msgstr ""

msgid "If everything worked, the images can be found under"
msgstr ""

msgid "The easiest way to test your image is to configure your board for SD card boot and to flash the build image to the SD card"
msgstr ""

msgid "Here <your_device> could be \"sde\", for example, depending on your system. Be very careful when selecting the right drive! Selecting the wrong drive can erase your hard drive! The parameter conv=fsync forces a data buffer to write to the device before dd returns."
msgstr ""

msgid "After booting you can log in using a serial cable or over *ssh*. There is no root password. That is because of the debug settings in *conf/local.conf*. If you uncomment the line"
msgstr ""

msgid "the debug settings, like setting an empty root password, will not be applied."
msgstr ""

msgid "Accessing the Development States between Releases"
msgstr ""

msgid "Special release manifests exist to give you access to the current development states of the *Yocto* BSP. They will not be displayed in the phyLinux selection menu but need to be selected manually. This can be done using the following command line"
msgstr ""

msgid "This will initialize a BSP that will track the latest development state. From now on running"
msgstr ""

msgid "this folder will pull all the latest changes from our Git repositories."
msgstr ""

msgid "Inspect your Build Configuration"
msgstr ""

msgid "*Poky* includes several tools to inspect your build layout. You can inspect the commands of the layer tool"
msgstr ""

msgid "It can, for example, be used to view in which layer a specific recipe gets modified"
msgstr ""

msgid "Before running a build you can also launch *Toaster* to be able to inspect the build details with the Toaster web GUI"
msgstr ""

msgid "Maybe you need to install some requirements, first"
msgstr ""

msgid "You can then point your browser to *http://0.0.0.0:8000/* and continue working with *Bitbake*. All build activity can be monitored and analyzed from this web server. If you want to learn more about *Toaster*, look at https://docs.yoctoproject.org/4.0.6/toaster-manual/index.html. To shut down the *Toaster* web GUI again, execute"
msgstr ""

msgid "BSP Features of meta-phytec and meta-ampliphy"
msgstr ""

msgid "*Buildinfo*"
msgstr ""

msgid "The *buildinfo* task is a feature in our recipes that prints instructions to fetch the source code from the public repositories. So you do not have to look into the recipes yourself. To see the instructions, e.g. for the *barebox* package, execute"
msgstr ""

msgid "in your shell. This will print something like"
msgstr ""

msgid "As you can see, everything is explained in the output."
msgstr ""

msgid "Using *externalsrc* breaks a lot of *Yocto's* internal dependency mechanisms. It is not guaranteed that any changes to the source directory are automatically picked up by the build process and incorporated into the root filesystem or SD card image. You have to always use *--force*. E.g. to compile *barebox* and redeploy it to *deploy/images/<machine>* execute"
msgstr ""

msgid "To update the SD card image with a new kernel or image first force the compilation of it and then force a rebuild of the root filesystem. Use"
msgstr ""

msgid "Note that the build system is not modifying the external source directory. If you want to apply all patches the *Yocto* recipe is carrying to the external source directory, run the line"
msgstr ""

msgid "BSP Customization"
msgstr ""

msgid "To get you started with the BSP, we have summarized some basic tasks from the *Yocto* official documentation. It describes how to add additional software to the image, change the kernel and bootloader configuration, and integrate patches for the kernel and bootloader."
msgstr ""

msgid "Minor modifications, such as adding software, are done in the file *build/conf/local.conf*. There you can overwrite global configuration variables and make small modifications to recipes."
msgstr ""

msgid "There are 2 ways to make major changes:"
msgstr ""

msgid "Either create your own layer and use *bbappend* files."
msgstr ""

msgid "Add everything to PHYTEC's Distro layer *meta-ampliphy*."
msgstr ""

msgid "Creating your own layer is described in the section Create your own Layer."
msgstr ""

msgid "Disable Qt Demo"
msgstr ""

msgid "By default, the BSP image *phytec-qt6demo-image* starts a Qt6 Demo application on the attached display or monitor. If you want to stop the demo and use the *Linux* framebuffer console behind it, connect to the target via serial cable or *ssh* and execute the shell command"
msgstr ""

msgid "This command stops the demo temporarily. To start it again, reboot the board or execute"
msgstr ""

msgid "You can disable the service permanently, so it does not start on boot"
msgstr ""

msgid "The last command only disables the service. It does not *stop* immediately. To see the current status execute"
msgstr ""

msgid "If you want to disable the service by default, edit the file *build/conf/local.conf* and add the following line"
msgstr ""

msgid "After that, rebuild the image"
msgstr ""

msgid "Framebuffer Console"
msgstr ""

msgid "On boards with a display interface, the framebuffer console is enabled per default. You can attach a USB keyboard and log in. To change the keyboard layout from the English default to German, type"
msgstr ""

msgid "To detach the framebuffer console, run"
msgstr ""

msgid "To completely deactivate the framebuffer console, disable the following kernel configuration option"
msgstr ""

msgid "More information can be found at: https://www.kernel.org/doc/Documentation/fb/fbcon.txt"
msgstr ""

msgid "Tools Provided in the Prebuild Image"
msgstr ""

msgid "RAM Benchmark"
msgstr ""

msgid "Performing RAM and cache performance tests can best be done by using *pmbw* (Parallel Memory Bandwidth Benchmark/Measurement Tool). *Pmbw* runs several assembly routines which all use different access patterns to the caches and RAM of the SoC. Before running the test, make sure that you have about 2 MiB of space left on the device for the log files. We also lower the level of the benchmark to ask the kernel more aggressively for resources. The benchmark test will take several hours."
msgstr ""

msgid "To start the test type"
msgstr ""

msgid "Upon completion of the test run, the log file can be converted to a *gnuplot* script with"
msgstr ""

msgid "Now you can transfer the file to the host machine and install any version of *gnuplot*"
msgstr ""

msgid "The generated *plots-<machine>.pdf* file contains all plots. To render single plots as *png* files for any web output you can use *Ghostscript*"
msgstr ""

msgid "Add Additional Software for the BSP Image"
msgstr ""

msgid "To add additional software to the image, look at the OpenEmbedded layer index: https://layers.openembedded.org/layerindex/branch/kirkstone/layers/"
msgstr ""

msgid "First, select the *Yocto* version of the BSP you have from the drop-down list in the top left corner and click **Recipes**. Now you can search for a software project name and find which layer it is in. In some cases, the program is in *meta-openembedded*, *openembedded-core*, or *Poky* which means that the recipe is already in your build tree. This section describes how to add additional software when this is the case. If the package is in another layer, see the next section."
msgstr ""

msgid "You can also search the list of available recipes"
msgstr ""

msgid "When the recipe for the program is already in the *Yocto* build, you can simply add it by appending a configuration option to your file *build/conf/local.conf*. The general syntax to add additional software to an image is"
msgstr ""

msgid "For example, the line"
msgstr ""

msgid "installs some helper programs on the target image."
msgstr ""

msgid "The leading whitespace is essential for the append command."
msgstr ""

msgid "All configuration options in local.conf apply to all images. Consequently, the tools are now included in both images phytec-headless-image and phytec-qt6demo-image."
msgstr ""

msgid "Notes about Packages and Recipes"
msgstr ""

msgid "You are adding packages to the IMAGE_INSTALL variable. Those are not necessarily equivalent to the recipes in your meta-layers. A recipe defines per default a package with the same name. But a recipe can set the PACKAGES variable to something different and is able to generate packages with arbitrary names. Whenever you look for software, you have to search for the package name and, strictly speaking, not for the recipe. In the worst case, you have to look at all PACKAGES variables. A tool such as *Toaster* can be helpful in some cases."
msgstr ""

msgid "If you can not find your software in the layers provided in the folder *sources*, see the next section to include another layer into the *Yocto* build."
msgstr ""

msgid "References: `Yocto 4.0.6 Documentation - Customizing Yocto builds <https://docs.yoctoproject.org/4.0.6/singleindex.html#user-configuration>`_"
msgstr ""

msgid "Add an Additional Layer"
msgstr ""

msgid "This is a step-by-step guide on how to add another layer to your *Yocto* build and install additional software from it. As an example, we include the network security scanner *nmap* in the layer *meta-security*. First, you must locate the layer on which the software is hosted. Check out the `OpenEmbedded MetaData Index <https://layers.openembedded.org/layerindex/branch/kirkstone/layers/>`_ and guess a little bit. The network scanner *nmap* is in the *meta-security* layer. See `meta-security on layers.openembedded.org <https://layers.openembedded.org/layerindex/branch/kirkstone/layer/meta-security/>`_. To integrate it into the *Yocto* build, you have to check out the repository and then switch to the correct stable branch. Since the BSP is based on the *Yocto* 'sumo' build, you should try to use the 'sumo' branch in the layer, too."
msgstr ""

msgid "All available remote branches will show up. Usually there should be 'fido', 'jethro', 'krogoth', 'master', ..."
msgstr ""

msgid "Now we add the directory of the layer to the file *build/conf/bblayers.conf* by appending the line"
msgstr ""

msgid "to the end of the file. After that, you can check if the layer is available in the build configuration by executing"
msgstr ""

msgid "If there is an error like"
msgstr ""

msgid "the layer that you want to add (here *meta-security*), depends on another layer, which you need to enable first. E.g. the dependency required here is a layer in *meta-openembedded* (in the PHYTEC BSP it is in the path *sources/meta-openembedded/meta-perl/*). To enable it, add the following line to *build/conf/bblayers.conf*"
msgstr ""

msgid "Now the command *bitbake-layers show-layers* should print a list of all layers enabled including *meta-security* and *meta-perl*. After the layer is included, you can install additional software from it as already described above. The easiest way is to add the following line (here is the package *nmap*)"
msgstr ""

msgid "to your *build/conf/local.conf*. Do not forget to rebuild the image"
msgstr ""

msgid "After adding further external or own layers, it makes sense to reflect those additions by deriving a custom manifest file, cmp :ref:`kirkstone_phylinux-advanced-usage`"
msgstr ""

msgid "Create your own layer"
msgstr ""

msgid "Creating your layer should be one of the first tasks when customizing the BSP. You have two basic options. You can either copy and rename our *meta-ampliphy*, or you can create a new layer that will contain your changes. The better option depends on your use case. *meta-ampliphy* is our example of how to create a custom *Linux* distribution that will be updated in the future. If you want to benefit from those changes and are, in general, satisfied with the userspace configuration, it could be the best solution to create your own layer on top of *Ampliphy*. If you need to rework a lot of information and only need the basic hardware support from PHYTEC, it would be better to copy *meta-ampliphy*, rename it, and adapt it to your needs. You can also have a look at the OpenEmbedded layer index to find different distribution layers. If you just need to add your own application to the image, create your own layer."
msgstr ""

msgid "In the following chapter, we have an embedded project called \"racer\" which we will implement using our *Ampliphy Linux* distribution. First, we need to create a new layer."
msgstr ""

msgid "*Yocto* provides a script for that. If you set up the BSP and the shell is ready, type"
msgstr ""

msgid "Default options are fine for now. Move the layer to the source directory"
msgstr ""

msgid "Create a *Git* repository in this layer to track your changes"
msgstr ""

msgid "Now you can add the layer directly to your build/conf/bblayers.conf"
msgstr ""

msgid "or with a script provided by *Yocto*"
msgstr ""

msgid "Kernel and Bootloader Recipe and Version"
msgstr ""

msgid "First, you need to know which kernel and version are used for your target machine. PHYTEC provides multiple kernel recipes *linux-mainline*, *linux-ti* and *linux-imx*. The first one provides support for PHYTEC's i.MX 6 and AM335x modules and is based on the *Linux* kernel stable releases from `kernel.org <https://kernel.org/>`_. The *Git* repositories URLs are:"
msgstr ""

msgid "*linux-mainline*: git://git.phytec.de/linux-mainline"
msgstr ""

msgid "*linux-ti*: git://git.phytec.de/linux-ti"
msgstr ""

msgid "*linux-imx:* git://git.phytec.de/linux-imx"
msgstr ""

msgid "*barebox*: git://git.phytec.de/barebox"
msgstr ""

msgid "*u-boot-imx*: git://git.phytec.de/u-boot-imx"
msgstr ""

msgid "To find your kernel provider, execute the following command"
msgstr ""

msgid "The command prints the value of the variable *PREFERRED_PROVIDER_virtual/kernel*. The variable is used in the internal *Yocto* build process to select the kernel recipe to use. The following lines are different outputs you might see"
msgstr ""

msgid "To see which version is used, execute *bitbake -s*. For example"
msgstr ""

msgid "The parameter *-s* prints the version of all recipes. The output contains the recipe name on the left and the version on the right"
msgstr ""

msgid "As you can see, the recipe *linux-mainline* has version *5.15.102-phy1*. In the PHYTEC's *linux-mainline*  *Git* repository, you will find a corresponding tag *v5.15.102-phy1*. The version of the *barebox* recipe is 2022.02.0-phy1. On i.MX8M\\* modules the output will contain *linux-imx* and *u-boot-imx*."
msgstr ""

msgid "Kernel and Bootloader Configuration"
msgstr ""

msgid "The bootloader used by PHYTEC, *barebox*, uses the same build system as the *Linux* kernel. Therefore, all commands in this section can be used to configure the kernel and bootloader. To configure the kernel or bootloader, execute one of the following commands"
msgstr ""

msgid "After that, you can recompile and redeploy the kernel or bootloader"
msgstr ""

msgid "Instead, you can also just rebuild the complete build output with"
msgstr ""

msgid "In the last command, you can replace the image name with the name of an image of your choice. The new images and binaries are in *build/deploy/images/<machine>/*."
msgstr ""

msgid "The build configuration is not permanent yet. Executing *bitbake virtual/kernel -c clean* will remove everything."
msgstr ""

msgid "To make your changes permanent in the build system, you have to integrate your configuration modifications into a layer. For the configuration you have two options:"
msgstr ""

msgid "Include only a configuration fragment (a minimal *diff* between the old and new configuration)"
msgstr ""

msgid "Complete default configuration (*defconfig*) after your modifications."
msgstr ""

msgid "Having a set of configuration fragments makes what was changed at which stage more transparent. You can turn on and off the changes, you can manage configurations for different situations and it helps when porting changes to new kernel versions. You can also group changes together to reflect specific use cases. A fully assembled kernel configuration will be deployed in the directory *build/deploy/images/<machine>*. If you do not have any of those requirements, it might be simpler to just manage a separate *defconfig* file."
msgstr ""

msgid "Add a Configuration Fragment to a Recipe"
msgstr ""

msgid "The following steps can be used for both kernel and bootloader. Just replace the recipe name *linux-mainline* in the commands with *linux-ti*, or *barebox* for the bootloader. If you did not already take care of this, start with a clean build. Otherwise, the diff of the configuration may be wrong"
msgstr ""

msgid "Make your configuration changes in the menu and generate a config fragment"
msgstr ""

msgid "which prints the path of the written file"
msgstr ""

msgid "All config changes are in the file *fragment.cfg* which should consist of only some lines. The following example shows how to create a *bbappend* file and how to add the necessary lines for the config fragment. You just have to adjust the directories and names for the specific recipe: *linux-mainline*, *linux-ti*, linux-imx, u-boot-imx, or *barebox*."
msgstr ""

msgid "Replace the string *layer* with your own layer created as shown above (e.g. *meta-racer*), or just use *meta-ampliphy*. To use *meta-ampliphy*, first, create the directory for the config fragment and give it a new name (here *enable-r8169.cfg*) and move the fragment to the layer."
msgstr ""

msgid "Then open the *bbappend* file (in this case *sources/meta-ampliphy/recipes-kernel/linux/linux-mainline_%.bbappend* ) with your favorite editor and add the following lines"
msgstr ""

msgid "Do not forget to use the correct *bbappend* filenames: *linux-ti_%.bbappend* for the linux-ti recipe and *barebox_%.bbappend* for the bootloader in the folder *recipes-bsp/barebox/* !"
msgstr ""

msgid "After saving the *bbappend* file, you have to rebuild the image. *Yocto* should pick up the recipe changes automatically and generate a new image"
msgstr ""

msgid "Add a Complete Default Configuration (*defconfig*) to a Recipe"
msgstr ""

msgid "This approach is similar to the one above, but instead of adding a fragment, a *defconfig* is used. First, create the necessary folders in the layer you want to use, either your own layer or *meta-ampliphy*"
msgstr ""

msgid "Then you have to create a suitable *defconfig* file. Make your configuration changes using *menuconfig* and then save the *defconfig* file to the layer"
msgstr ""

msgid "This will print the path to the generated file"
msgstr ""

msgid "Then, as above, copy the generated file to your layer, rename it to *defconfig*, and add the following lines to the *bbappend* file (here *sources/meta-ampliphy/recipes-kernel/linux/linux-mainline_%.bbappend*)"
msgstr ""

msgid "Do not forget to use the correct bbappend filenames: *linux-ti_%.bbappend* for the linux-ti recipe and *barebox_%.bbappend* for the bootloader in the folder *recipes-bsp/barebox/* !"
msgstr ""

msgid "After that, rebuild your image as the changes are picked up automatically"
msgstr ""

msgid "Patch the Kernel or Bootloader with *devtool*"
msgstr ""

msgid "*Apart from using the standard versions of kernel and bootloader which are provided in the recipes, you can modify the source code or use our own repositories to build your customized kernel.*"
msgstr ""

msgid "PRO"
msgstr ""

msgid "CON"
msgstr ""

msgid "Standard workflow of the official *Yocto* documentation"
msgstr ""

msgid "Uses additional hard drive space as the sources get duplicated"
msgstr ""

msgid "Toolchain does not have to recompile everything"
msgstr ""

msgid "No optimal cache usage, build overhead"
msgstr ""

msgid "*Devtool* is a set of helper scripts to enhance the user workflow of *Yocto*. It was integrated with version 1.8. It is available as soon as you set up your shell environment. *Devtool* can be used to:"
msgstr ""

msgid "modify existing sources"
msgstr ""

msgid "integrate software projects into your build setup"
msgstr ""

msgid "build software and deploy software modifications to your target"
msgstr ""

msgid "Here we will use *devtool* to patch the kernel. We use *linux-mainline* as an example for the AM335x Kernel. The first command we use is *devtool modify - x <recipe> <directory>*"
msgstr ""

msgid "*Devtool* will create a layer in *build/workspace* where you can see all modifications done by *devtool* . It will extract the sources corresponding to the recipe to the specified directory. A *bbappend* will be created in the workspace directing the SRC_URI to this directory. Building an image with *Bitbake* will now use the sources in this directory. Now you can modify lines in the kernel"
msgstr ""

msgid "Your changes will now be recompiled and added to the image. If you want to store your changes permanently, it is advisable to create a patch from the changes, then store and backup only the patch. You can go into the *linux-mainline* directory and create a patch using *Git*. How to create a patch is described in :ref:`kirkstone_temporary-method` and is the same for all methods."
msgstr ""

msgid "If you want to learn more about *devtool*, visit:"
msgstr ""

msgid "`Yocto 4.0.6 - Devtool <https://docs.yoctoproject.org/4.0.6/sdk-manual/extensible.html#using-devtool-in-your-sdk-workflow>`_ or `Devtool Quick Reference <https://docs.yoctoproject.org/4.0.6/ref-manual/devtool-reference.html>`_"
msgstr ""

msgid "Patch the Kernel or Bootloader using the \"Temporary Method\""
msgstr ""

msgid "No overhead, no extra configuration"
msgstr ""

msgid "Changes are easily overwritten by *Yocto* (Everything is lost!!)."
msgstr ""

msgid "It is possible to alter the source code before *Bitbake* configures and compiles the recipe. Use *Bitbake'* s *devshell* command to jump into the source directory of the recipe. Here is the *barebox* recipe"
msgstr ""

msgid "After executing the command, a shell window opens. The current working directory of the shell will be changed to the source directory of the recipe inside the *tmp* folder. Here you can use your favorite editor, e.g. *vim*, *emacs*, or any other graphical editor, to alter the source code. When you are finished, exit the *devshell* by typing *exit* or hitting **CTRL-D**."
msgstr ""

msgid "After leaving the *devshell* you can recompile the package"
msgstr ""

msgid "The extra argument '--force' is important because *Yocto* does not recognize that the source code was changed."
msgstr ""

msgid "You cannot execute the *bitbake* command in the *devshell* . You have to leave it first."
msgstr ""

msgid "If the build fails, execute the devshell command again and fix it. If the build is successful, you can deploy the package and create a new SD card image"
msgstr ""

msgid "If you execute a clean e.g *bitbake barebox -c clean* , or if *Yocto* fetches the source code again, all your changes are lost!!!"
msgstr ""

msgid "To avoid this, you can create a patch and add it to a *bbappend* file. It is the same workflow as described in the section about changing the configuration."
msgstr ""

msgid "You have to create the patch in the *devshell* if you use the temporary method and in the subdirectory created by *devtool* if you used *devtool*."
msgstr ""

msgid "After you have created the patch, you must create a *bbappend* file for it. The locations for the three different recipes - *linux-mainline* , *linux-ti* , and *barebox* - are"
msgstr ""

msgid "The following example is for the recipe *barebox*. You have to adjust the paths. First, create the folders and move the patch into them. Then create the *bbappend* file"
msgstr ""

msgid "Pay attention to your current work directory. You have to execute the commands in the BSP top-level directory. Not in the *build* directory!"
msgstr ""

msgid "After that use your favorite editor to add the following snipped into the *bbappend* file (here *sources/meta-ampliphy/recipes-bsp/barebox/barebox_%.bbappend*)"
msgstr ""

msgid "Save the file and rebuild the *barebox* recipe with"
msgstr ""

msgid "If the build is successful, you can rebuild the final image with"
msgstr ""

msgid "**Further Resources:**"
msgstr ""

msgid "The *Yocto* Project has some documentation for software developers. Check the 'Kernel Development Manual' for more information about how to configure the kernel. Please note that not all of the information from the *Yocto* manual can be applied to the PHYTEC BSP as we use the classic kernel approach of *Yocto* and most of the documentation assumes the *Yocto* kernel approach."
msgstr ""

msgid "`Yocto - Kernel Development Manual <https://docs.yoctoproject.org/4.0.6/kernel-dev/index.html>`_"
msgstr ""

msgid "`Yocto - Development Manual <https://docs.yoctoproject.org/4.0.6/dev-manual/index.html>`_"
msgstr ""

msgid "Working with the Kernel and Bootloader using SRC_URI in *local.conf*"
msgstr ""

msgid "*Here we present a third option to make kernel and bootloader changes. You have external checkouts of the linux-mainline, linux-ti, or barebox  Git repositories. You will overwrite the URL of the source code fetcher, the variable SRC_URI, to point to your local checkout instead of the remote repositories.*"
msgstr ""

msgid "All changes are saved with *Git*"
msgstr ""

msgid "Many working directories in *build/tmp-\\ glibc/work/<machine>/<package>/*"
msgstr ""

msgid "You have to commit every change before recompiling"
msgstr ""

msgid "For each change, the toolchain compiles everything from scratch (avoidable with *ccache*)"
msgstr ""

msgid "First, you need a local clone of the *Git* repository *barebox* or kernel. If you do not have one, use the commands"
msgstr ""

msgid "Add the following snippet to the file build/conf/local.conf"
msgstr ""

msgid "You also have to set the correct BRANCH name in the file. Either you create your own branch in the *Git* repository, or you use the default (here \"v2015.02.0-phy\"). Now you should recompile *barebox* from your own source"
msgstr ""

msgid "The build should be successful because the source was not changed yet."
msgstr ""

msgid "You can alter the source in *~/git/barebox* or the default *defconfig* (e.g. *~/git/barebox/arch/arm/configs/imx_v7_defconfig*). After you are satisfied with your changes, you have to make a dummy commit for *Yocto*. If you do not, *Yocto* will not notice that the source code was modified in your repository folder (e.g. ~/git/barebox/)"
msgstr ""

msgid "Try to compile your new changes. *Yocto* will automatically notice that the source code was changed and fetches and configures everything from scratch."
msgstr ""

msgid "If the build fails, go back to the source directory, fix the problem, and recommit your changes. If the build was successful, you can deploy *barebox* and even create a new SD card image."
msgstr ""

msgid "If you want to make additional changes, just make another commit in the repository and rebuild *barebox* again."
msgstr ""

msgid "Add Existing Software with \"Sustainable Method\""
msgstr ""

msgid "Now that you have created your own layer, you have a second option to add existing software to existing image definitions. Our standard image is defined in meta-ampliphy"
msgstr ""

msgid "In your layer, you can now modify the recipe with a *bbappend* without modifying any BSP code"
msgstr ""

msgid "The append will be parsed together with the base recipe. As a result, you can easily overwrite all variables set in the base recipe, which is not always what you want. If we want to include additional software, we need to append it to the IMAGE_INSTALL variable"
msgstr ""

msgid "Add Linux Firmware Files to the Root Filesystem"
msgstr ""

msgid "It is a common task to add an extra firmware file to your root filesystem into */lib/firmware/*. For example, WiFi adapters or PCIe Ethernet cards might need proprietary firmware. As a solution, we use a *bbappend* in our layer. To create the necessary folders, *bbappend* and copy the firmware file type"
msgstr ""

msgid "Then add the following content to the *bbappend* file and replace every occurrence of *example-firmware.bin* with your firmware file name."
msgstr ""

msgid "Now try to build the linux-firmware recipe"
msgstr ""

msgid "This should generate a new package *deploy/ipk/all/linux-firmware-example*."
msgstr ""

msgid "As the final step, you have to install the firmware package to your image. You can do that in your *local.conf* or image recipe via"
msgstr ""

msgid "Ensure that you have adapted the package name *linux-firmware-example* with the name you assigned in *linux-firmware_%.bbappend*."
msgstr ""

msgid "Change the *u-boot* Environment via *bbappend* Files"
msgstr ""

msgid "All i.MX8M\\* products use the u-boot bootloader. The u-boot environment can be modified using the Temporary Method. In the *u-boot-imx* sources modify the header file corresponding to the processor located in *include/configs/phycore_imx8m\\**. New environment variables should be added at the end of *CONFIG_EXTRA_ENV_SETTINGS*"
msgstr ""

msgid "Commit the changes and and create the file *u-boot-imx_%.bbappend* in your layer at *<layer>/recipes-bsp/u-boot/u-boot-imx_%.bbappend*"
msgstr ""

msgid "Change the *barebox* Environment via *bbappend* Files"
msgstr ""

msgid "Since *BSP-Yocto-AM335x-16.2.0* and *BSP-Yocto-i.MX6-PD16.1.0*, the *barebox* environment handling in *meta-phytec* has changed. Now it is possible to add, change, and remove files in the *barebox* environment via the *Python* bitbake task *do_env*. There are two *Python* functions to change the environment. Their signatures are:"
msgstr ""

msgid "*env_add(d, *\\ **filename as string**\\ *, *\\ **file content as string**\\ *)*: to add a new file or overwrite an existing file"
msgstr ""

msgid "*env_rm(d, *\\ **filename as string**\\ *)*: to remove a file"
msgstr ""

msgid "The first example of a *bbappend* file in the custom layer *meta-racer* shows how to add a new non-volatile variable *linux.bootargs.fb* in the *barebox* environment folder */env/nv/*"
msgstr ""

msgid "The next example shows how to replace the network configuration file */env/network/eth0*"
msgstr ""

msgid "In the above example, the *Python* multiline string syntax **\"\"\" text \"\"\"** is used to avoid adding multiple newline characters *\\\\n* into the recipe *Python* code. The *Python* function *env_add* can add and overwrite environment files."
msgstr ""

msgid "The next example shows how to remove an already added environment file, for example *,* */env/boot/mmc*"
msgstr ""

msgid "Debugging the Environment"
msgstr ""

msgid "If you want to see all environment files that are added in the build process, you can enable a debug flag in the *local.conf*"
msgstr ""

msgid "After that, you have to rebuild the *barebox* recipe to see the debugging output"
msgstr ""

msgid "The output of the last command looks like this"
msgstr ""

msgid "Changing the Environment (depending on Machines)"
msgstr ""

msgid "If you need to apply some *barebox* environment modifications only to a single or only a few machines, you can use *Bitbake'* s machine overwrite syntax. For the machine overwrite syntax, you append a machine name or SoC name (such as *mx6* , *ti33x,* or *rk3288* ) with an underscore to a variable or task"
msgstr ""

msgid "The next example adds the environment variables only if the MACHINE is set to *phyboard-mira-imx6-4*"
msgstr ""

msgid "*Bitbake's* override syntax for variables is explained in more detail at: https://docs.yoctoproject.org/bitbake/2.0/bitbake-user-manual/bitbake-user-manual-metadata.html#conditional-metadata"
msgstr ""

msgid "Upgrading the *barebox* Environment from Previous BSP Releases"
msgstr ""

msgid "Prior to BSP version *BSP-Yocto-AM335x-16.2.0* and *BSP-Yocto-i.MX6-PD16.1.0* , *barebox* environment changes via *bbappend* file were done differently. For example, the directory structure in your meta layer (here *meta-skeleton* ) may have looked like this"
msgstr ""

msgid "and the file *barebox_%.bbappend* contained"
msgstr ""

msgid "In this example, all environment changes from the directory *boardenv* in the layer *meta-phytec* are ignored and the file *nv/linux.bootargs.cma* is added. For the new handling of the *barebox* environment, you use the *Python* functions *env_add* and *env_rm* in the *Python* task *do_env*. Now the above example translates to a single *Python* function in the file *barebox_%.bbappend* that looks like"
msgstr ""

msgid "Changing the Network Configuration"
msgstr ""

msgid "To tweak IP addresses, routes, and gateways at runtime you can use the *iproute2* tools. Some examples"
msgstr ""

msgid "The network configuration is managed by *systemd-networkd* . To query the current status use"
msgstr ""

msgid "The network daemon reads its configuration from the directories */etc/systemd/network/* , */run/systemd/network/* , and */lib/systemd/network/* (from higher to lower priority). A sample configuration in */lib/systemd/network/10-eth0.network* looks like this"
msgstr ""

msgid "These files *\\*.network* replace */etc/network/interfaces* from other distributions. You can either edit the file *10-eth0.network* in-place or copy it to */etc/systemd/network/* and make your changes there. After changing a file you must restart the daemon to apply your changes"
msgstr ""

msgid "To see the syslog message of the network daemon, use"
msgstr ""

msgid "To modify the network configuration at build time, look at the recipe *sources/meta-ampliphy/recipes-core/systemd/systemd-machine-units.bb* and the interface files in the folder *meta-ampliphy/recipes-core/systemd/systemd-machine-units/* where the static IP address configuration for *eth0* (and optionally *eth1*) is done."
msgstr ""

msgid "For more information, see https://wiki.archlinux.org/title/Systemd-networkd and https://www.freedesktop.org/software/systemd/man/latest/systemd.network.html."
msgstr ""

msgid "Changing the Wireless Network Configuration"
msgstr ""

msgid "Connecting to a WLAN Network"
msgstr ""

msgid "First set the correct regulatory domain for your country"
msgstr ""

msgid "You will see"
msgstr ""

msgid "Set up the wireless interface"
msgstr ""

msgid "Now you can scan for available networks"
msgstr ""

msgid "You can use a cross-platform supplicant with support for *WEP*, *WPA*, and *WPA2* called *wpa_supplicant* for an encrypted connection."
msgstr ""

msgid "To do so, add the network credentials to the file */etc/wpa_supplicant.conf*"
msgstr ""

msgid "Now a connection can be established"
msgstr ""

msgid "This should result in the following output"
msgstr ""

msgid "To finish the configuration you can configure DHCP to receive an IP address (supported by most WLAN access points). For other possible IP configurations, see the section :ref:`kirkstone_changing-net-config`."
msgstr ""

msgid "First, create the directory"
msgstr ""

msgid "Then add the following configuration snippet in */etc/systemd/network/10-wlan0.network*"
msgstr ""

msgid "Now, restart the network daemon so that the configuration takes effect"
msgstr ""

msgid "Creating a WLAN Access Point"
msgstr ""

msgid "This section provides a basic access point (AP) configuration for a secured *WPA2* network."
msgstr ""

msgid "Find the name of the WLAN interface with"
msgstr ""

msgid "Edit the configuration in */etc/hostapd.conf*. It is strongly dependent on the use case. The following shows an example"
msgstr ""

msgid "Set up and start the DHCP server for the network interface *wlan0* via *systemd-networkd*"
msgstr ""

msgid "Insert the following text into the file"
msgstr ""

msgid "Start the userspace daemon *hostapd*"
msgstr ""

msgid "Now, you should see the WLAN network *Test-Wifi* on your terminal device (laptop, smartphone, etc.)."
msgstr ""

msgid "If there are problems with the access point, you can either check the log messages with"
msgstr ""

msgid "or start the daemon in debugging mode from the command line"
msgstr ""

msgid "You should see"
msgstr ""

msgid "Further information about AP settings and the userspace daemon *hostapd* can be found at"
msgstr ""

msgid "phyCORE-i.MX 6UL/ULL Bluetooth"
msgstr ""

msgid "Special consideration must be paid when working with any Bluetooth on a phyCORE-i.MX 6UL/ULL. For further information, please check `L-844e.A5 i.MX 6UL/ULL BSP Manual - Bluetooth <https://www.phytec.de/cdocuments/?doc=xoJEEQ#BSPReferenceManualphyCOREi-MX6ULULLL844e-A5-Bluetooth>`_."
msgstr ""

msgid "Add OpenCV Libraries and Examples"
msgstr ""

msgid "*OpenCV* (Opensource Computer Vision https://opencv.org/) is an open-source library for computer vision applications."
msgstr ""

msgid "To install the libraries and examples edit the file *conf/local.conf* in the *Yocto* build system and add"
msgstr ""

msgid "Then rebuild your image"
msgstr ""

msgid "Most examples do not work out of the box, because they depend on the *GTK* graphics library. The BSP only supports *Qt6* ."
msgstr ""

msgid "Add Minimal PHP web runtime with *lightpd*"
msgstr ""

msgid "This is one example of how to add a small runtime for PHP applications and a web server on your target. Lighttpd can be used together with the PHP command line tool over cgi. This solution weights only 5.5 MiB of disk storage. It is already preconfigured in meta-ampliphy. Just modify the build configuration to install it on the image"
msgstr ""

msgid "After booting the image, you should find the example web content in */www/pages* . For testing php, you can delete the *index.html* and replace it with a *index.php* file"
msgstr ""

msgid "On your host, you can point your browser to the board's IP, (e.g. 192.168.3.11) and the phpinfo should show up."
msgstr ""

msgid "Common Tasks"
msgstr ""

msgid "Debugging a User Space Application"
msgstr ""

msgid "The phytec-qt6demo-image can be cross-debugged without any change. For cross-debugging, you just have to match the host sysroot with the image in use. So you need to create a toolchain for your image"
msgstr ""

msgid "Additionally, if you want to have full debug and backtrace capabilities for all programs and libraries in the image, you could add"
msgstr ""

msgid "to the ``conf/local.conf``. This is not necessary in all cases. The compiler options will then be switched from FULL_OPTIMIZATION to DEBUG_OPTIMIZATION. Look at the *Poky* source code for the default assignment of DEBUG_OPTIMIZATION."
msgstr ""

msgid "To start a cross debug session, install the SDK as mentioned previously, source the SDK environment, and run *Qt Creator* in the same shell. If you do not use *Qt Creator*, you can directly call the arm-<..>-gdb debugger instead which should be in your path after sourcing the environment script."
msgstr ""

msgid "If you work with *Qt Creator*, have a look at the appropriate documentation delivered with your product (either QuickStart or Application Guide) for information on how to set up the toolchain."
msgstr ""

msgid "When starting the debugger with your userspace application you will get a SIGILL, an illegal instruction from the *libcrypto*. *Openssl* probes for the system capabilities by trapping illegal instructions, which will trigger *GDB*. You can ignore this and hit **Continue** (c command). You can permanently ignore this stop by adding"
msgstr ""

msgid "to your *GDB* startup script or in the *Qt Creator GDB* configuration panel. Secondly, you might need to disable a security feature by adding"
msgstr ""

msgid "to the same startup script, which will enable the automatic loading of libraries from any location."
msgstr ""

msgid "If you need to have native debugging, you might want to install the debug symbols on the target. You can do this by adding the following line to your *conf/local.conf*"
msgstr ""

msgid "For cross-debugging, this is not required as the debug symbols will be loaded from the host side and the dbg-pkgs are included in the SDK of your image anyway."
msgstr ""

msgid "Generating Source Mirrors, working Offline"
msgstr ""

msgid "Modify your *site.conf* (or *local.conf* if you do not use a *site.conf* ) as follows"
msgstr ""

msgid "Now run"
msgstr ""

msgid "for all images and for all machines you want to provide sources for. This will create all the necessary *tar* archives. We can remove all SCM subfolders, as they are duplicated with the tarballs"
msgstr ""

msgid "Please consider that we used a local source mirror for generating the dl_dir. Because of that, some archives will be linked locally."
msgstr ""

msgid "First, we need to copy all files, resolving symbolic links into the new mirror directory"
msgstr ""

msgid "Now we clean the */build* directory by deleting everything except */build/conf/* but including */build/conf/sanity*. We change *site.conf* as follows"
msgstr ""

msgid "The BSP directory can now be compressed with"
msgstr ""

msgid "where filename and folder should be the full BSP Name."
msgstr ""

msgid "Compiling on the Target"
msgstr ""

msgid "To your *local.conf* add"
msgstr ""

msgid "Different Toolchains"
msgstr ""

msgid "There are several ways to create a toolchain installer in *Poky*. One option is to run"
msgstr ""

msgid "This will generate a toolchain installer in *build/deploy/sdk* which can be used for cross-compiling of target applications. However, the installer does not include libraries added to your image, so it is a bare *GCC* compiler only. This is suited for bootloader and kernel development."
msgstr ""

msgid "Another you can run is"
msgstr ""

msgid "This will generate a toolchain installer containing all necessary development packages of the software installed on the root filesystem of the target. This installer can be handed over to the user space application development team and includes all necessary parts to develop an application. If the image contains the *QT* libraries, all of those will be available in the installer too."
msgstr ""

msgid "The third option is to create the ADT (Application Development Toolkit) installer. It will contain the cross-toolchain and some tools to aid the software developers, for example, an *Eclipse* plugin and a *QEMU* target simulator."
msgstr ""

msgid "The ADT is untested for our BSP at the moment."
msgstr ""

msgid "Using the SDK"
msgstr ""

msgid "After generating the SDK with"
msgstr ""

msgid "run the generated binary with"
msgstr ""

msgid "You can activate the toolchain for your shell by sourcing the file *environment-setup* in the toolchain directory"
msgstr ""

msgid "Then the necessary tools like the cross compiler and linker are in your PATH. To compile a simple *C* program, use"
msgstr ""

msgid "The environment variable $CC contains the path to the ARM cross compiler and other compiler arguments needed like *-march* , *-sysroot* and *--mfloat-abi*."
msgstr ""

msgid "You cannot compile programs only with the compiler name like"
msgstr ""

msgid "It will fail in many cases. Always use *CC*, CFLAGS, LDFLAGS, and so on."
msgstr ""

msgid "For convenience, the *environment-setup* exports other environment variables like CXX, LD, SDKTARGETSYSROOT."
msgstr ""

msgid "A simple makefile compiling a *C* and *C++* program may look like this"
msgstr ""

msgid "To compile for the target, just source the toolchain in your shell before executing make"
msgstr ""

msgid "If you need to specify additionally included directories in the sysroot of the toolchain, you can use an '=' sign in the *-I* argument like"
msgstr ""

msgid "*GCC* replaces it by the sysroot path (here */opt/ampliphy/i.MX6-PD15.3-rc/sysroots/cortexa9hf-vfp-neon-phytec-linux-gnueabi/*). See the main page of *GCC* for more information."
msgstr ""

msgid "The variables $CFLAGS and $CXXFLAGS contain the compiler debug flag '-g' by default. This includes debugging information in the binary and making it bigger. Those should be removed from the production image. If you create a *Bitbake* recipe, the default behavior is to turn on '-g' too. The debugging symbols are used in the SDK rootfs to be able to get debugging information when invoking *GDB* from the host. Before installing the package to the target rootfs, *Bitbake* will invoke *strip* on the program which removes the debugging symbols. By default, they are not found nor required on the target root filesystem"
msgstr ""

msgid "Using the SDK with GNU Autotools"
msgstr ""

msgid "*Yocto* SDK is a straightforward tool for a project that uses the *GNU Autotools*. The traditional compile steps for the host are usually"
msgstr ""

msgid "The commands to compile for the target machine with the *Yocto* SDK are quite similar. The following commands assume that the SDK was unpacked to the directory */opt/phytec-ampliphy/i.MX6-PD15.3.0/* (adapt the path as needed)"
msgstr ""

msgid "Refer to the official *Yocto* documentation for more information: https://docs.yoctoproject.org/4.0.6/singleindex.html#autotools-based-projects"
msgstr ""

msgid "Working with Kernel Modules"
msgstr ""

msgid "You will come to the point where you either need to set some options for a kernel module or you want to blacklist a module. Those things are handled by *udev* and go into *\\*.conf* files in"
msgstr ""

msgid "If you want to specify an option at build time, there are three relevant variables. If you just want to autoload a module that has no autoload capabilities, add it to"
msgstr ""

msgid "either in the kernel recipe or in the global variable scope. If you need to specify options for a module, you can do so with"
msgstr ""

msgid "if you want to blacklist a module from autoloading, you can do it intuitively with"
msgstr ""

msgid "Working with *udev*"
msgstr ""

msgid "Udev (Linux dynamic device management) is a system daemon that handles dynamic device management in /dev. It is controlled by *udev* \\ rules that are located in */etc/udev/rules.d* (sysadmin configuration space) and\\  */lib/udev/rules.d/* (vendor-provided). Here is an example of an *udev* \\ rule file"
msgstr ""

msgid "See https://www.freedesktop.org/software/systemd/man/latest/udev.html for more details about the syntax and usage. To get the list of attributes for a specific device that can be used in an *udev* rule you can use the *udevadm info* tool. It prints all existing attributes of the device node and its parents. The key-value pairs from the output can be copied and pasted into a rule file. Some examples"
msgstr ""

msgid "After changing an *udev* rule, you have to notify the daemon. Otherwise, your changes are not reflected. Use the following command"
msgstr ""

msgid "While developing *udev* rules you should monitor the events in order to see when devices are attached or unattached to the system. Use"
msgstr ""

msgid "Furthermore, it is very useful to monitor the system log in another shell, especially if the rule executes external scripts. Execute"
msgstr ""

msgid "You cannot start daemons or heavy scripts in a *RUN* attribute. See https://www.freedesktop.org/software/systemd/man/latest/udev.html ."
msgstr ""

#, python-brace-format
msgid "This can only be used for very short-running foreground tasks. Running an event process for a long period of time may block all further events for this or a dependent device. Starting daemons or other long-running processes is not appropriate for *udev*; the forked processes, detached or not, will be unconditionally killed after the event handling has finished. You can use the special attribute *ENV{SYSTEMD_WANTS}=\"service-name.service\"* and a *systemd*\\ service instead."
msgstr ""

msgid "See https://unix.stackexchange.com/questions/63232/what-is-the-correct-way-to-write-a-udev-rule-to-stop-a-service-under-systemd."
msgstr ""

msgid "Troubleshooting"
msgstr ""

msgid "Setscene Task Warning"
msgstr ""

msgid "This warning occurs when the Yocto cache is in a dirty state."
msgstr ""

msgid "You should avoid canceling the build process or if you have to, press Ctrl-C once and wait until the build process has stopped. To remove all these warnings just clean the sstate cache and remove the build folders."
msgstr ""

msgid "Yocto Documentation"
msgstr ""

msgid "The most important piece of documentation for a BSP user is probably the developer manual. https://docs.yoctoproject.org/4.0.6/dev-manual/index.html"
msgstr ""

msgid "The chapter about common tasks is a good starting point. https://docs.yoctoproject.org/4.0.6/dev-manual/common-tasks.html#common-tasks"
msgstr ""

msgid "The complete documentation is available on one single HTML page, which is good for searching for a feature or a variable name. https://docs.yoctoproject.org/4.0.6/singleindex.html"
msgstr ""

msgid "Table of Contents"
msgstr ""

msgid "Kirkstone"
msgstr ""

msgid "Mickledore"
msgstr ""

msgid "Scarthgap"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX93-PD24.1.0"
msgstr ""

msgid "05.02.2024"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX93-PD24.1.1"
msgstr ""

msgid "08.05.2024"
msgstr ""

msgid "A collection of OpenEmbedded layers can be found here. The search function is very helpful to see if a software package can be retrieved and integrated easily: https://layers.openembedded.org/layerindex/branch/mickledore/layers/"
msgstr ""

msgid "*Bitbake* is the task scheduler. It is written in *Python* and interprets recipes that contain code in *Bitbake's* own programming language, *Python*, and bash code. The official documentation can be found here: https://docs.yoctoproject.org/bitbake/2.4/index.html"
msgstr ""

msgid "*Toaster* is a web frontend for *Bitbake* to start and investigate builds. It provides information about the build history and statistics on created images. There are several use cases where the installation and maintenance of a *Toaster* instance are beneficial. PHYTEC did not add or remove any features to the upstream *Toaster*, provided by *Poky*. The best source for more information is the official documentation: https://docs.yoctoproject.org/4.2.4/toaster-manual/index.html"
msgstr ""

msgid "For more general questions about *Bitbake* and *Poky* consult the mega-manual: https://docs.yoctoproject.org/4.2.4/singleindex.html"
msgstr ""

msgid "To build *Yocto* you need a compatible *Linux* host development machine. The list of supported distributions can be found in the reference manual: https://docs.yoctoproject.org/4.2.4/ref-manual/system-requirements.html#supported-linux-distributions"
msgstr ""

msgid "This layer contains all machines and common features for all our BSPs. It is PHYTEC's `Yocto Board Support Package <https://docs.yoctoproject.org/4.2.4/bsp-guide/index.html>`_ for all supported hardware (since *fido*) and is designed to be standalone with *Poky*. Only these two parts are required if you want to integrate the PHYTEC's hardware into your existing *Yocto* workflow. The features are:"
msgstr ""

msgid "`systemd <https://www.freedesktop.org/wiki/Software/systemd/>`_ init system"
msgstr ""

msgid "The BSP content gets pulled from different online sources when you first start using *Bitbake*. All files will be downloaded and cloned in a local directory configured as ``DL_DIR`` in *Yocto*. If you backup your BSP with the complete content, those sources have to be backed up, too. How you can do this will be explained in the chapter :ref:`mickledore_gen-source-mirrors`."
msgstr ""

msgid "Continue with the next step :ref:`mickledore_git-config` after that. The documentation for using build-container can be found in this manual after :ref:`mickledore_phylinux-advanced-usage` of phyLinux."
msgstr ""

msgid "Else *Yocto* needs a handful of additional packages on your host. For *Ubuntu* you need"
msgstr ""

msgid "For other distributions you can find information in the *Yocto* Quick Build: https://docs.yoctoproject.org/4.2.4/brief-yoctoprojectqs/index.html"
msgstr ""

msgid "Create the two directories on a drive where you have approximately 50 GB of space and assign the two variables in your ``build/conf/local.conf``::"
msgstr ""

msgid "You can then point your browser to *http://0.0.0.0:8000/* and continue working with *Bitbake*. All build activity can be monitored and analyzed from this web server. If you want to learn more about *Toaster*, look at https://docs.yoctoproject.org/4.2.4/toaster-manual/index.html. To shut down the *Toaster* web GUI again, execute"
msgstr ""

msgid "To add additional software to the image, look at the OpenEmbedded layer index: https://layers.openembedded.org/layerindex/branch/mickledore/layers/"
msgstr ""

msgid "References: `Yocto 4.2.4 Documentation - Customizing Yocto builds <https://docs.yoctoproject.org/4.2.4/singleindex.html#user-configuration>`_"
msgstr ""

msgid "This is a step-by-step guide on how to add another layer to your *Yocto* build and install additional software from it. As an example, we include the network security scanner *nmap* in the layer *meta-security*. First, you must locate the layer on which the software is hosted. Check out the `OpenEmbedded MetaData Index <https://layers.openembedded.org/layerindex/branch/mickledore/layers/>`_ and guess a little bit. The network scanner *nmap* is in the *meta-security* layer. See `meta-security on layers.openembedded.org <https://layers.openembedded.org/layerindex/branch/mickledore/layer/meta-security/>`_. To integrate it into the *Yocto* build, you have to check out the repository and then switch to the correct stable branch. Since the BSP is based on the *Yocto* 'sumo' build, you should try to use the 'sumo' branch in the layer, too."
msgstr ""

msgid "After adding further external or own layers, it makes sense to reflect those additions by deriving a custom manifest file, cmp :ref:`mickledore_phylinux-advanced-usage`"
msgstr ""

msgid "Your changes will now be recompiled and added to the image. If you want to store your changes permanently, it is advisable to create a patch from the changes, then store and backup only the patch. You can go into the *linux-mainline* directory and create a patch using *Git*. How to create a patch is described in :ref:`mickledore_temporary-method` and is the same for all methods."
msgstr ""

msgid "`Yocto 4.2.4 - Devtool <https://docs.yoctoproject.org/4.2.4/sdk-manual/extensible.html#using-devtool-in-your-sdk-workflow>`_ or `Devtool Quick Reference <https://docs.yoctoproject.org/4.2.4/ref-manual/devtool-reference.html>`_"
msgstr ""

msgid "`Yocto - Kernel Development Manual <https://docs.yoctoproject.org/4.2.4/kernel-dev/index.html>`_"
msgstr ""

msgid "`Yocto - Development Manual <https://docs.yoctoproject.org/4.2.4/dev-manual/index.html>`_"
msgstr ""

msgid "*Bitbake's* override syntax for variables is explained in more detail at: https://docs.yoctoproject.org/bitbake/2.4/bitbake-user-manual/bitbake-user-manual-metadata.html#conditional-metadata"
msgstr ""

msgid "To finish the configuration you can configure DHCP to receive an IP address (supported by most WLAN access points). For other possible IP configurations, see the section :ref:`mickledore_changing-net-config`."
msgstr ""

msgid "Special consideration must be paid when working with any Bluetooth on a phyCORE-i.MX 6UL/ULL. For further information, please check `L-844e.A5 i.MX 6UL/ULL BSP Manual - Bluetooth <https://www.phytec.de/cdocuments/?doc=xoJEEQ#L844e-A5i-MX6ULULLBSPManual-Bluetooth>`_."
msgstr ""

msgid "Refer to the official *Yocto* documentation for more information: https://docs.yoctoproject.org/4.2.4/singleindex.html#autotools-based-projects"
msgstr ""

msgid "You cannot start daemons or heavy scripts in a *RUN* attribute. See https://www.freedesktop.org/software/systemd/man/latest/udev.html#RUN%7Btype%7D ."
msgstr ""

msgid "The most important piece of documentation for a BSP user is probably the developer manual. https://docs.yoctoproject.org/4.2.4/dev-manual/index.html"
msgstr ""

msgid "The chapter about common tasks is a good starting point. https://docs.yoctoproject.org/4.2.4/dev-manual/layers.html#understanding-and-creating-layers"
msgstr ""

msgid "The complete documentation is available on one single HTML page, which is good for searching for a feature or a variable name. https://docs.yoctoproject.org/4.2.4/singleindex.html"
msgstr ""

msgid "BSP-Yocto-Ampliphy-i.MX8MP-PD24.1.0"
msgstr ""

msgid "2024-04-02"
msgstr ""

msgid "BSP-Yocto-Ampliphy-i.MX8MP-PD24.1.1"
msgstr ""

msgid "2024-04-09"
msgstr ""

msgid "BSP-Yocto-Ampliphy-i.MX8MP-PD24.1.2"
msgstr ""

msgid "2024-06-26"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX8MP-PD24.1.0"
msgstr ""

msgid "2024-11-07"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX93-PD24.2.0"
msgstr ""

msgid "2024-10-08"
msgstr ""

msgid "BSP-Yocto-Ampliphy-i.MX6-PD25.1.0"
msgstr ""

msgid "2024-12-20"
msgstr ""

msgid "BSP-Yocto-Ampliphy-i.MX6UL-PD24.1.0"
msgstr ""

msgid "2024-07-19"
msgstr ""

msgid "BSP-Yocto-Ampliphy-AM62Ax-PD24.1.0"
msgstr ""

msgid "2024-06-27"
msgstr ""

msgid "BSP-Yocto-Ampliphy-AM62x-PD24.1.0"
msgstr ""

msgid "BSP-Yocto-Ampliphy-AM64x-PD24.1.0"
msgstr ""

msgid "A collection of OpenEmbedded layers can be found here. The search function is very helpful to see if a software package can be retrieved and integrated easily: https://layers.openembedded.org/layerindex/branch/scarthgap/layers/"
msgstr ""

msgid "*Bitbake* is the task scheduler. It is written in *Python* and interprets recipes that contain code in *Bitbake's* own programming language, *Python*, and bash code. The official documentation can be found here: https://docs.yoctoproject.org/bitbake/2.8/index.html"
msgstr ""

msgid "*Toaster* is a web frontend for *Bitbake* to start and investigate builds. It provides information about the build history and statistics on created images. There are several use cases where the installation and maintenance of a *Toaster* instance are beneficial. PHYTEC did not add or remove any features to the upstream *Toaster*, provided by *Poky*. The best source for more information is the official documentation: https://docs.yoctoproject.org/dev/toaster-manual/index.html"
msgstr ""

msgid "For more general questions about *Bitbake* and *Poky* consult the mega-manual: https://docs.yoctoproject.org/dev/singleindex.html"
msgstr ""

msgid "To build *Yocto* you need a compatible *Linux* host development machine. The list of supported distributions can be found in the reference manual: https://docs.yoctoproject.org/dev/ref-manual/system-requirements.html#supported-linux-distributions"
msgstr ""

msgid "This layer contains all machines and common features for all our BSPs. It is PHYTEC's `Yocto Board Support Package <https://docs.yoctoproject.org/dev/bsp-guide/index.html>`_ for all supported hardware (since *fido*) and is designed to be standalone with *Poky*. Only these two parts are required if you want to integrate the PHYTEC's hardware into your existing *Yocto* workflow. The features are:"
msgstr ""

msgid "The BSP content gets pulled from different online sources when you first start using *Bitbake*. All files will be downloaded and cloned in a local directory configured as ``DL_DIR`` in *Yocto*. If you backup your BSP with the complete content, those sources have to be backed up, too. How you can do this will be explained in the chapter :ref:`scarthgap_gen-source-mirrors`."
msgstr ""

msgid "Continue with the next step :ref:`scarthgap_git-config` after that. The documentation for using build-container can be found in this manual after :ref:`scarthgap_phylinux-advanced-usage` of phyLinux."
msgstr ""

msgid "For other distributions you can find information in the *Yocto* Quick Build: https://docs.yoctoproject.org/dev/brief-yoctoprojectqs/index.html"
msgstr ""

msgid "Special release manifests exist to give you access to the current development states of the *Yocto* BSP. They will be displayed in the phyLinux selection menu with the ending *PDXX.X.y*"
msgstr ""

msgid "This will initialize a BSP that will track the latest development state."
msgstr ""

msgid "You can then point your browser to *http://0.0.0.0:8000/* and continue working with *Bitbake*. All build activity can be monitored and analyzed from this web server. If you want to learn more about *Toaster*, look at https://docs.yoctoproject.org/dev/toaster-manual/index.html. To shut down the *Toaster* web GUI again, execute"
msgstr ""

msgid "To add additional software to the image, look at the OpenEmbedded layer index: https://layers.openembedded.org/layerindex/branch/scarthgap/layers/"
msgstr ""

msgid "References: `Yocto dev Documentation - Customizing Yocto builds <https://docs.yoctoproject.org/dev/singleindex.html#user-configuration>`_"
msgstr ""

msgid "This is a step-by-step guide on how to add another layer to your *Yocto* build and install additional software from it. As an example, we include the network security scanner *nmap* in the layer *meta-security*. First, you must locate the layer on which the software is hosted. Check out the `OpenEmbedded MetaData Index <https://layers.openembedded.org/layerindex/branch/scarthgap/layers/>`_ and guess a little bit. The network scanner *nmap* is in the *meta-security* layer. See `meta-security on layers.openembedded.org <https://layers.openembedded.org/layerindex/branch/scarthgap/layer/meta-security/>`_. To integrate it into the *Yocto* build, you have to check out the repository and then switch to the correct stable branch. Since the BSP is based on the *Yocto* |yocto-codename| build, you should try to use the |yocto-codename| branch in the layer, too."
msgstr ""

msgid "All available remote branches will show up. Usually there should be 'sumo', 'warrior', 'zeus', 'dunfell', 'hardnkott', 'kirkstone', 'mickledore', 'master'..."
msgstr ""

msgid "After adding further external or own layers, it makes sense to reflect those additions by deriving a custom manifest file, cmp :ref:`scarthgap_phylinux-advanced-usage`"
msgstr ""

msgid "Your changes will now be recompiled and added to the image. If you want to store your changes permanently, it is advisable to create a patch from the changes, then store and backup only the patch. You can go into the *linux-mainline* directory and create a patch using *Git*. How to create a patch is described in :ref:`scarthgap_temporary-method` and is the same for all methods."
msgstr ""

msgid "`Yocto dev - Devtool <https://docs.yoctoproject.org/dev/sdk-manual/extensible.html#using-devtool-in-your-sdk-workflow>`_ or `Devtool Quick Reference <https://docs.yoctoproject.org/dev/ref-manual/devtool-reference.html>`_"
msgstr ""

msgid "`Yocto - Kernel Development Manual <https://docs.yoctoproject.org/dev/kernel-dev/index.html>`_"
msgstr ""

msgid "`Yocto - Development Manual <https://docs.yoctoproject.org/dev/dev-manual/index.html>`_"
msgstr ""

msgid "To finish the configuration you can configure DHCP to receive an IP address (supported by most WLAN access points). For other possible IP configurations, see the section :ref:`scarthgap_changing-net-config`."
msgstr ""

msgid "To be able to build a Qt6 application with the SDK and the Meson Build system, the following has to be done, *after* the SDK has been sourced:"
msgstr ""

msgid "Refer to the official *Yocto* documentation for more information: https://docs.yoctoproject.org/dev/singleindex.html#autotools-based-projects"
msgstr ""

msgid "The most important piece of documentation for a BSP user is probably the developer manual. https://docs.yoctoproject.org/dev/dev-manual/index.html"
msgstr ""

msgid "The chapter about common tasks is a good starting point. https://docs.yoctoproject.org/dev/dev-manual/layers.html#understanding-and-creating-layers"
msgstr ""

msgid "The complete documentation is available on one single HTML page, which is good for searching for a feature or a variable name. https://docs.yoctoproject.org/dev/singleindex.html"
msgstr ""

