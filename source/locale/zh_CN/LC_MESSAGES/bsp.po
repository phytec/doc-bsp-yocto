# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, PHYTEC Messtechnik GmbH
# This file is distributed under the same license as the PHYTEC BSP Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PHYTEC BSP Documentation imx8mm-pd25.1.0-75-g28e760b\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 14:48+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

msgid "i.MX 8M Plus Manuals"
msgstr ""

msgid "Libra i.MX 8M Plus FPSC Manuals"
msgstr ""

msgid "i.MX 8M Mini Manuals"
msgstr ""

msgid "i.MX 8M Nano Manuals"
msgstr ""

msgid "i.MX 8 Manuals"
msgstr ""

msgid "i.MX 8"
msgstr ""

msgid "Documentation in pdf format: `Download <static-pdf-dl_>`_"
msgstr ""

msgid "|doc-id| |soc| BSP Manual Head"
msgstr ""

msgid "Document Title"
msgstr ""

msgid "Document Type"
msgstr ""

msgid "BSP Manual"
msgstr ""

msgid "Article Number"
msgstr ""

msgid "|doc-id|"
msgstr ""

msgid "Yocto Manual"
msgstr ""

msgid "Release Date"
msgstr ""

msgid "XXXX/XX/XX"
msgstr ""

msgid "Is Branch of"
msgstr ""

msgid "The table below shows the Compatible BSPs for this manual:"
msgstr ""

msgid "Compatible BSPs"
msgstr ""

msgid "BSP Release Type"
msgstr ""

msgid "BSP Release  Date"
msgstr ""

msgid "BSP Status"
msgstr ""

msgid "This BSP manual guides you through the installation and creation steps for the Board Support Package (BSP) and describes how to handle the interfaces for the |kit|. Furthermore, this document describes how to create BSP images from the source code. This is useful for those who need to change the default image and need a way to implement these changes in a simple and reproducible way. Further, some sections of this manual require executing commands on a personal computer (host). Any and all of these commands are assumed to be executed on a Linux Operating System."
msgstr ""

msgid "This document contains code examples that describe the communication with the board over the serial shell. The code examples lines begin with \"host:~$\", \"target:~$\" or \"u-boot=>\". This describes where the commands are to be executed. Only after these keywords must the actual command be copied."
msgstr ""

msgid "PHYTEC Documentation"
msgstr ""

msgid "PHYTEC provides a variety of hardware and software documentation for all of our products. This includes any or all of the following:"
msgstr ""

msgid "**QS Guide**: A short guide on how to set up and boot a phyCORE board along with brief informationon building a BSP, the device tree, and accessing peripherals."
msgstr ""

msgid "**Hardware Manual**: A detailed description of the System on Module and accompanying carrierboard."
msgstr ""

msgid "**Yocto Guide**: A comprehensive guide for the Yocto version the phyCORE uses. This guide contains an overview of Yocto; introducing, installing, and customizing the PHYTEC BSP; how to work with programs like Poky and Bitbake; and much more."
msgstr ""

msgid "**BSP Manual**: A manual specific to the BSP version of the phyCORE. Information such as how to build the BSP, booting, updating software, device tree, and accessing peripherals can be found here."
msgstr ""

msgid "**Development Environment Guide**: This guide shows how to work with the Virtual Machine (VM) Host PHYTEC has developed and prepared to run various Development Environments. There are detailed step-by-step instructions for Eclipse and Qt Creator, which are included in the VM. There are instructions for running demo projects for these programs on a phyCORE product as well. Information on how to build a Linux host PC yourself is also a part of this guide."
msgstr ""

msgid "**Pin Muxing Table**: phyCORE SOMs have an accompanying pin table (in Excel format). This table will show the complete default signal path, from the processor to the carrier board. The default device tree muxing option will also be included. This gives a developer all the information needed in one location to make muxing changes and design options when developing a specialized carrier board or adapting a PHYTEC phyCORE SOM to an application."
msgstr ""

msgid "On top of these standard manuals and guides, PHYTEC will also provide Product Change Notifications, Application Notes, and Technical Notes. These will be done on a case-by-case basis. Most of the documentation can be found on the |dlpage-product| of our product."
msgstr ""

msgid "Supported Hardware"
msgstr ""

msgid "The |sbc| populated with either the i.MX 8M Mini SoC or i.MX 8M Nano SoC, is supported."
msgstr ""

msgid "On our web page, you can see all supported Machines with the available Article Numbers for this release: |yocto-manifestname| `download <dlpage-bsp_>`_. If you choose a specific **Machine Name** in the section **Supported Machines**, you can see which **Article Numbers** are available under this machine and also a short description of the hardware information. In case you only have the **Article Number** of your hardware, you can leave the **Machine Name** drop-down menu empty and only choose your **Article Number**. Now it should show you the necessary **Machine Name** for your specific hardware"
msgstr ""

msgid "|sbc| Components"
msgstr ""

msgid "|sbc| Components (top)"
msgstr ""

msgid "|sbc| Components (bottom)"
msgstr ""

msgid "Getting Started"
msgstr ""

msgid "The |kit| is shipped with a pre-flashed SD card. It contains the |yocto-imagename| and can be used directly as a boot source. The eMMC is programmed with only a U-Boot by default. You can get all sources from the `PHYTEC download server <dl-server_>`_. This chapter explains how to flash a BSP image to SD card and how to start the board."
msgstr ""

msgid "There are several ways to flash an image to SD card or even eMMC. Most notably using simple, sequential writing with the Linux command line tool ``dd``. An alternative way is to use PHYTEC's system initialization program called `partup <https://github.com/phytec/partup>`_, which makes it especially easy to format more complex systems. You can get `prebuilt Linux binaries of partup <https://github.com/phytec/partup/releases>`__ from its release page. Also read `partup's README <https://github.com/phytec/partup#readme>`__ for installation instructions."
msgstr ""

msgid "Get the Image"
msgstr ""

msgid "The image contains all necessary files and makes sure partitions and any raw data are correctly written. Both the partup package and the WIC image, which can be flashed using ``dd``, can be downloaded from the `PHYTEC download server <dl-server_>`_."
msgstr ""

msgid "Get either the partup package or the WIC image from the download server:"
msgstr ""

msgid "For eMMC, more complex partitioning schemes or even just large images, we recommend using the partup package, as it is faster in writing than ``dd`` and allows for a more flexible configuration of the target flash device."
msgstr ""

msgid "Write the Image to SD Card"
msgstr ""

msgid "To create your bootable SD card, you must have root privileges on your Linux host PC. Be very careful when specifying the destination device! All files on the selected device will be erased immediately without any further query!"
msgstr ""

msgid "Selecting the wrong device may result in **data loss** and e.g. could erase your currently running system on your host PC!"
msgstr ""

msgid "Finding the Correct Device"
msgstr ""

msgid "To create your bootable SD card, you must first find the correct device name of your SD card and possible partitions. If any partitions of the SD cards are mounted, unmount those before you start copying the image to the SD card."
msgstr ""

msgid "In order to get the correct device name, remove your SD card and execute:"
msgstr ""

msgid "Now insert your SD card and execute the command again:"
msgstr ""

msgid "Compare the two outputs to find the new device names listed in the second output. These are the device names of the SD card (device and partitions if the SD card was formatted)."
msgstr ""

msgid "In order to verify the device names being found, execute the command ``sudo dmesg``. Within the last lines of its output, you should also find the device names, e.g. ``/dev/sde`` or ``/dev/mmcblk0`` (depending on your system)."
msgstr ""

msgid "Alternatively, you may use a graphical program of your choice, like `GNOME Disks <https://apps.gnome.org/en/DiskUtility/>`_ or `KDE Partition Manager <https://apps.kde.org/partitionmanager/>`_, to find the correct device."
msgstr ""

msgid "Now that you have the correct device name, e.g. ``/dev/sde``, you can see the partitions which must be unmounted if the SD card is formatted. In this case, you will also find the device name with an appended number (e.g. ``/dev/sde1``) in the output. These represent the partitions. Some Linux distributions automatically mount partitions when the device gets plugged in. Before writing, however, these need to be unmounted to avoid data corruption."
msgstr ""

msgid "Unmount all those partitions, e.g.:"
msgstr ""

msgid "Now, the SD card is ready to be flashed with an image, using either ``partup``, ``dd`` or ``bmap-tools``."
msgstr ""

msgid "Using bmap-tools"
msgstr ""

msgid "One way to prepare an SD card is using `bmap-tools <https://github.com/yoctoproject/bmaptool>`_. Yocto automatically creates a block map file (``<IMAGENAME>-<MACHINE>.wic.bmap``) for the WIC image that describes the image content and includes checksums for data integrity. *bmaptool* is packaged by various Linux distributions. For Debian-based systems install it by issuing:"
msgstr ""

msgid "Flash a WIC image to SD card by calling:"
msgstr ""

msgid "Replace <your_device> with your actual SD card's device name found previously, and make sure to place the file ``<IMAGENAME>-<MACHINE>.wic.bmap`` alongside the regular WIC image file, so bmaptool knows which blocks to write and which to skip."
msgstr ""

msgid "*bmaptool* only overwrites the areas of an SD card where image data is located. This means that a previously written U-Boot environment may still be available after writing the image."
msgstr ""

msgid "Using partup"
msgstr ""

msgid "Writing to an SD card with partup is done in a single command:"
msgstr ""

msgid "Make sure to replace <your_device> with your actual device name found previously."
msgstr ""

msgid "Further usage of partup is explained at its `official documentation website <https://partup.readthedocs.io/en/latest/>`__."
msgstr ""

msgid "Host systems which are using resize2fs version 1.46.6 and older (e.g. Ubuntu 22.04) are not able to write partup packages created with Yocto Mickledore or newer to SD-Card. This is due to a new default option in resize2fs which causes an incompatibility. See `release notes <https://e2fsprogs.sourceforge.net/e2fsprogs-release.html#1.47.0>`_."
msgstr ""

msgid "*partup* has the advantage of allowing to clear specific raw areas in the MMC user area, which is used in our provided partup packages to erase any existing U-Boot environments. This is a known issue *bmaptool* does not solve, as mentioned in the previous chapter."
msgstr ""

msgid "Another key advantage of partup over other flashing tools is that it allows configuring MMC specific parts, like writing to eMMC boot partitions, without the need to call multiple other commands when writing."
msgstr ""

msgid "Using ``dd``"
msgstr ""

msgid "After having unmounted all SD card's partitions, you can create your bootable SD card."
msgstr ""

msgid "Some PHYTEC BSPs produce uncompressed images (with filename-extension \\*.wic), and some others produce compressed images (with filename-extension \\*.wic.xz)."
msgstr ""

msgid "To flash an uncompressed images (\\*.wic) use command below:"
msgstr ""

msgid "Or to flash a compressed images (\\*.wic.xz) use that command:"
msgstr ""

msgid "Again, make sure to replace <your_device> with your actual device name found previously."
msgstr ""

msgid "The parameter ``conv=fsync`` forces a sync operation on the device before ``dd`` returns. This ensures that all blocks are written to the SD card and none are left in memory. The parameter ``status=progress`` will print out information on how much data is and still has to be copied until it is finished."
msgstr ""

msgid "First Start-up"
msgstr ""

msgid "To boot from an SD card, |ref-bootswitch| needs to be set to the following position:"
msgstr ""

msgid "Bootmode Selection"
msgstr ""

msgid "Mini"
msgstr ""

msgid "Insert the SD card"
msgstr ""

msgid "Connect the target and the host with **micro USB** on |ref-debugusbconnector| debug USB"
msgstr ""

msgid "Power up the board"
msgstr ""

msgid "Building the BSP"
msgstr ""

msgid "This section will guide you through the general build process of the |soc| BSP using Yocto and the phyLinux script. For more information about our meta-layer or Yocto in general visit: |yocto-ref-manual|."
msgstr ""

msgid "Basic Set-Up"
msgstr ""

msgid "If you have never created a Phytec BSP with Yocto on your computer, you should take a closer look at the chapter BSP Workspace Installation in the |yocto-ref-manual|."
msgstr ""

msgid "Get the BSP"
msgstr ""

msgid "There are two ways to get the BSP sources. You can download the complete BSP sources from our download page: |yocto-bsp-name|_; or you can fetch and build it yourself with Yocto. This is particularly useful if you want to make customizations."
msgstr ""

msgid "The phyLinux script is a basic management tool for PHYTEC Yocto BSP releases written in Python. It is mainly a helper to get started with the BSP structure."
msgstr ""

msgid "Create a fresh project folder, get phyLinux, and make the script executable:"
msgstr ""

msgid "A clean folder is important because phyLinux will clean its working directory. Calling phyLinux from a directory that isn't empty will result in a warning."
msgstr ""

msgid "Run phyLinux:"
msgstr ""

msgid "On the first initialization, the phyLinux script will ask you to install the Repo tool in your ``/usr/local/bin`` directory."
msgstr ""

msgid "During the execution of the init command, you need to choose your processor platform (SoC), PHYTEC's BSP release number, and the hardware you are working on."
msgstr ""

msgid "If you cannot identify your board with the information given in the selector, have a look at the invoice for the product. And have a look at |dlpage-bsp|_."
msgstr ""

msgid "It is also possible to pass this information directly using command line parameters:"
msgstr ""

msgid "After the execution of the init command, phyLinux will print a few important notes. For example, it will print your git identify, SOC and BSP release which was selected as well as information for the next steps in the build process."
msgstr ""

msgid "Starting the Build Process"
msgstr ""

msgid "Set up the shell environment variables:"
msgstr ""

msgid "This needs to be done every time you open a new shell for starting builds."
msgstr ""

msgid "The current working directory of the shell should change to build/."
msgstr ""

msgid "Open the main configuration file and accept the GPU and VPU binary license agreements. Do this by uncommenting the corresponding line, as below."
msgstr ""

msgid "Build your image:"
msgstr ""

msgid "For the first build we suggest starting with our smaller non-graphical image phytec-headless-image to see if everything is working correctly."
msgstr ""

msgid "The first compile process takes about 40 minutes on a modern Intel Core i7. All subsequent builds will use the filled caches and should take about 3 minutes."
msgstr ""

msgid "BSP Images"
msgstr ""

msgid "All images generated by Bitbake are deployed to ``~/yocto/build/deploy*/images/<machine>``. The following list shows for example all files generated for the |yocto-machinename| machine:"
msgstr ""

msgid "**u-boot.bin**: Binary compiled U-boot bootloader (U-Boot). Not the final Bootloader image!"
msgstr ""

msgid "**oftree**: Default kernel device tree"
msgstr ""

msgid "**u-boot-spl.bin**: Secondary program loader (SPL)"
msgstr ""

msgid "**bl31-imx8mm.bin**: ARM Trusted Firmware binary"
msgstr ""

msgid "**lpddr4_pmu_train_2d_dmem_202006.bin, lpddr4_pmu_train_2d_imem_202006.bin**: DDR PHY firmware images"
msgstr ""

msgid "**imx-boot**: Bootloader build by imx-mkimage which includes SPL, U-Boot, ARM Trusted Firmware and DDR firmware. This is the final bootloader image which is bootable."
msgstr ""

msgid "**fitImage**: Linux kernel FIT image"
msgstr ""

msgid "**fitImage-its\\*.its**: FIT image configuration file"
msgstr ""

msgid "**Image**: Linux kernel image"
msgstr ""

msgid "**Image.config**: Kernel configuration"
msgstr ""

msgid "**imx8mm-phyboard-polis-rdk*.dtb**: Kernel device tree file"
msgstr ""

msgid "**imx8mm-phy*.dtbo**: Kernel device tree overlay files"
msgstr ""

msgid "**phytec-qt6demo-image\\*.tar.gz**: Root file system"
msgstr ""

msgid "**phytec-qt6demo-image\\*.rootfs.wic.xz**: SD card image"
msgstr ""

msgid "Installing the OS"
msgstr ""

msgid "Bootmode Switch (S1)"
msgstr ""

msgid "The |sbc| features a boot switch with six individually switchable ports to select the phyCORE-|soc| default bootsource."
msgstr ""

msgid "eMMC (Default SoM boot)"
msgstr ""

msgid "SPI NOR"
msgstr ""

msgid "USB Serial Download"
msgstr ""

msgid "SD Card"
msgstr ""

msgid "Switch between UART1 RS485/RS232"
msgstr ""

msgid "UART1 RS485"
msgstr ""

msgid "UART1 RS232"
msgstr ""

msgid "Flash eMMC"
msgstr ""

msgid "For consistency, it is assumed that a TFTP server is configured; More importantly, all generated images, as listed above, are copied to the default /srv/tftp directory. If you do not have this set up, you need to adjust the paths that point to the images being used in the instructions. For instructions on how to set up the TFTP server and directory, see |ref-setup-network-host|."
msgstr ""

msgid "To boot from eMMC, make sure that the BSP image is flashed correctly to the eMMC and the |ref-bootswitch| is set to **eMMC**."
msgstr ""

msgid "When eMMC and SD card are flashed with the same (identical) image, the UUIDs of the boot partitions are also identical. If the SD card is connected when booting, this leads to non-deterministic behavior as Linux mounts the boot partition based on UUID."
msgstr ""

msgid "can be run to inspect whether the current setup is affected. If ``mmcblk2p1`` and ``mmcblk1p1`` have an identical UUID, the setup is affected."
msgstr ""

msgid "Flash eMMC from Network"
msgstr ""

msgid "|soc| boards have an Ethernet connector and can be updated over a network. Be sure to set up the development host correctly. The IP needs to be set to 192.168.3.10, the netmask to 255.255.255.0, and a TFTP server needs to be available. From a high-level point of view, an eMMC device is like an SD card. Therefore, it is possible to flash the **WIC image** (``<name>.wic``) from the Yocto build system directly to the eMMC. The image contains the bootloader, kernel, device tree, device tree overlays, and root file system."
msgstr ""

msgid "Flash eMMC via Network in Linux on Host"
msgstr ""

msgid "It is also possible to install the OS at eMMC from your Linux host. As before, you need a complete image on your host."
msgstr ""

msgid "A working network is necessary! |ref-setup-network-host|"
msgstr ""

msgid "Show your available image files on the host:"
msgstr ""

msgid "Send the image with the ``bmaptool`` command combined with ssh through the network to the eMMC of your device:"
msgstr ""

msgid "Flash eMMC via Network in Linux on Target"
msgstr ""

msgid "You can update the eMMC from your target."
msgstr ""

msgid "Take a compressed or decompressed image with the accompanying block map file `*.bmap` on the host and send it with `ssh` through the network to the eMMC of the target with a one-line command:"
msgstr ""

msgid "Flash eMMC from Network in U-Boot on Target"
msgstr ""

msgid "These steps will show how to update the eMMC via a network."
msgstr ""

msgid "This step only works if the size of the image file is less than 1GB due to limited usage of RAM size in the Bootloader after enabling OPTEE."
msgstr ""

msgid "Uncompress your image"
msgstr ""

msgid "Load your image via network to RAM:"
msgstr ""

msgid "when using dhcp"
msgstr ""

msgid "when using a static ip address (serverip and ipaddr must be set additionally)."
msgstr ""

msgid "Write the image to the eMMC:"
msgstr ""

msgid "Flash eMMC U-Boot image via Network from running U-Boot"
msgstr ""

msgid "Update the standalone U-Boot image imx-boot is also possible from U-Boot. This can be used if the bootloader on eMMC is located in the eMMC user area."
msgstr ""

msgid "Load image over tftp into RAM and then write it to eMMC:"
msgstr ""

msgid "The hexadecimal value represents the offset as a multiple of 512 byte blocks. See the `offset table <#offset-table>`__ for the correct value of the corresponding SoC."
msgstr ""

msgid "Flash eMMC from USB stick"
msgstr ""

msgid "Flash eMMC from USB in Linux"
msgstr ""

msgid "These steps will show how to flash the eMMC on Linux with a USB stick. You only need a complete image saved on the USB stick and a bootable WIC image. (e.g. |yocto-imagename|-|yocto-machinename|.|yocto-imageext|). Set the |ref-bootswitch| to SD Card."
msgstr ""

msgid "Insert and mount the USB stick:"
msgstr ""

msgid "Now show your saved image files on the USB Stick:"
msgstr ""

msgid "Write the image to the phyCORE-|soc| eMMC (MMC device 2 without partition):"
msgstr ""

msgid "After a complete write, your board can boot from eMMC."
msgstr ""

msgid "Before this will work, you need to configure the |ref-bootswitch| to **eMMC**."
msgstr ""

msgid "Flash eMMC from USB stick in U-Boot on Target"
msgstr ""

msgid "These steps will show how to update the eMMC via a USB device. Configure the |ref-bootswitch| to SD Card and insert an SD card. Power on the board and stop in U-Boot prompt. Insert a USB device with the copied uncompressed WIC image to the USB slot."
msgstr ""

msgid "Load your image from the USB device to RAM:"
msgstr ""

msgid "Flash eMMC from SD Card"
msgstr ""

msgid "Even if there is no network available, you can update the eMMC. For that, you only need a ready-to-use image file (``*.wic``) located on the SD card. Because the image file is quite large, you have to create a third partition. To create a new partition or enlarge your SD card, see |ref-format-sd|."
msgstr ""

msgid "Alternatively, flash a partup package to the SD card, as described in |ref-getting-started|. This will ensure the full space of the SD card is used."
msgstr ""

msgid "Flash eMMC from SD card in Linux on Target"
msgstr ""

msgid "You can also flash the eMMC on Linux. You only need a partup package or WIC image saved on the SD card."
msgstr ""

msgid "Show your saved partup package or WIC image files on the SD card:"
msgstr ""

msgid "Write the image to the phyCORE-|soc| eMMC (MMC device 2 **without** partition) using `partup`_:"
msgstr ""

msgid "Flashing the partup package has the advantage of using the full capacity of the eMMC device, adjusting partitions accordingly."
msgstr ""

msgid "Alternatively, ``bmaptool`` may be used instead:"
msgstr ""

msgid "Keep in mind that the root partition does not make use of the full space when flashing with ``bmaptool``."
msgstr ""

msgid "Before this will work, you need to configure the |ref-bootswitch| to eMMC."
msgstr ""

msgid "Flash eMMC from SD card in U-Boot on Target"
msgstr ""

msgid "This step only works if the size of the image file is less than 1GB due to limited usage of RAM size in the Bootloader after enabling OPTEE. If the image file is too large use the `Updating eMMC from SD card in Linux on Target` subsection."
msgstr ""

msgid "Flash an SD card with a working image and create a third ext4 partition. Copy the WIC image (for example |yocto-imagename|.rootfs.wic) to this partition."
msgstr ""

msgid "Configure the |ref-bootswitch| to SD Card and insert the SD Card."
msgstr ""

msgid "Power on the board and stop in U-Boot."
msgstr ""

msgid "Load the image:"
msgstr ""

msgid "Switch the mmc dev to eMMC:"
msgstr ""

msgid "Flash your WIC image (for example |yocto-imagename|.rootfs.wic) from the SD card to eMMC. This will partition the card and copy imx-boot, Image, dtb, dtbo, and root file system to eMMC."
msgstr ""

msgid "Power off the board and change the |ref-bootswitch| to eMMC."
msgstr ""

msgid "Flash SPI NOR Flash"
msgstr ""

msgid "The |som| modules are optionally equipped with SPI NOR Flash. To boot from SPI Flash, set |ref-bootswitch| to **SPI NOR**. The SPI Flash is usually quite small. The phyBOARD-Pollux-i.MX8MP kit only has 32MB SPI NOR flash populated. Only the bootloader and the environment can be stored. The kernel, device tree, and file system are taken from eMMC by default."
msgstr ""

msgid "The SPI NOR flash partition table is defined in the U-Boot environment. It can be printed with:"
msgstr ""

msgid "Flash SPI NOR Flash from Network"
msgstr ""

msgid "The SPI NOR can contain the bootloader and environment to boot from. The arm64 kernel can not decompress itself, the image size extends the SPI NOR flash populated on the phyCORE-|soc|."
msgstr ""

msgid "Flash SPI NOR from Network in kernel on Target"
msgstr ""

msgid "Copy the image from the host to the target:"
msgstr ""

msgid "Find the number of blocks to erase of the U-boot partition:"
msgstr ""

msgid "Erase the U-Boot partition and flash it:"
msgstr ""

msgid "Flash SPI NOR from Network in U-Boot on Target"
msgstr ""

msgid "Similar to updating the eMMC over a network, be sure to set up the development host correctly. The IP needs to be set to 192.168.3.10, the netmask to 255.255.255.0, and a TFTP server needs to be available. Before reading and writing is possible, the SPI NOR flash needs to be probed:"
msgstr ""

msgid "A specially formatted U-Boot image for the SPI NOR flash is used. Ensure you use the correct image file. Load the image over tftp, erase and write the bootloader to the flash:"
msgstr ""

msgid "Erase the environment partition as well. This way, the environment can be written after booting from SPI NOR flash:"
msgstr ""

msgid "Flash SPI NOR Flash from SD Card"
msgstr ""

msgid "The bootloader on SPI NOR flash can be also flashed with SD Card."
msgstr ""

msgid "Flash SPI NOR from SD Card in kernel on Target"
msgstr ""

msgid "Copy the SPI NOR flash U-boot image imx-boot-|yocto-machinename|-fspi.bin-flash_evk_flexspi to the first partition on the SD Card."
msgstr ""

msgid "Mount the SD Card:"
msgstr ""

msgid "Find the number of blocks to erase of the U-Boot partition:"
msgstr ""

msgid "Erase the u-boot partition and flash it:"
msgstr ""

msgid "Flash SPI NOR from SD Card in U-Boot on Target"
msgstr ""

msgid "Before reading and writing are possible, the SPI-NOR flash needs to be probed:"
msgstr ""

msgid "A specially formatted U-boot image for the SPI NOR flash is used. Ensure you use the correct image file. Load the image from the SD Card, erase and write the bootloader to the flash:"
msgstr ""

msgid "RAUC"
msgstr ""

msgid "The RAUC (Robust Auto-Update Controller) mechanism support has been added to meta-ampliphy. It controls the procedure of updating a device with new firmware. This includes updating the Linux kernel, Device Tree, and root filesystem. PHYTEC has written an online manual on how we have intergraded RAUC into our BSPs: |rauc-manual|_."
msgstr ""

msgid "EFI Boot"
msgstr ""

msgid "Standardboot in U-Boot also supports booting distros over efi. By default the U-Boot will search for a bootscript first, which is used to boot our Ampliphy distro. If it does not find any bootscript, it will search for bootable efi applications. So for booting over efi just make sure you don't have our distro installed."
msgstr ""

msgid "Disable booting with efi"
msgstr ""

msgid "To disable booting with efi you have to set the ``doefiboot`` variable to 0. Also make sure you do not have ``efi`` or ``efi_mgr`` specified in the ``bootmeths`` environment variable."
msgstr ""

msgid "Switch to only efi boot"
msgstr ""

msgid "If you want to only boot with efi, you can set the ``bootmeths`` environment variable to efi. Also make sure you have the ``doefiboot`` environment variable set to 1."
msgstr ""

msgid "Installing a distro"
msgstr ""

msgid "With efi you can install and boot different distros like openSUSE, Fedora or Debian. First you have to get the iso Image from their website. For example:"
msgstr ""

msgid "https://cdimage.debian.org/debian-cd/current/arm64/iso-dvd/"
msgstr ""

msgid "Then copy the .iso file to a usb stick for example. Make sure you select the correct device:"
msgstr ""

msgid "Insert the USB stick into the board and boot it. GRUB will then prompt you with a menu where you can select what to do. Here select install. Then you have to click through the installation menu. This is relatively straightforward and differs a bit for every distro. You can install the distro for example to emmc (|emmcdev-uboot|) or sdcard (|sdcarddev-uboot|). Make sure you do not overwrite your U-Boot during the install. Best to choose a different medium to install to than the U-Boot is stored on. Otherwise manual partitioning will be required. The automatic partitioning will start at the beginning of the disk. To not overwrite the U-Boot, use an offset of 4MiB at the beginning of the disk."
msgstr ""

msgid "During the Installation of Debian you will be asked, if you want to Force the GRUB installation to the EFI removable media path. Select no. Also select no, when you will be asked if you want to update the NVRAM variables. Otherwise the grub-dummy installation step will fail and you will be sent back to the \"Force GRUB installation\" prompt."
msgstr ""

msgid "After the installation is complete, reboot the board and remove the installation medium (USB-stick). The board should then boot the distro you installed."
msgstr ""

msgid "If that does not happen, check if there is a boot option set for the distro. The easiest way is with the ``eficonfig`` command."
msgstr ""

msgid "That will open a menu. Then you can select ``Edit Boot Option``. It will show you the current boot options. If this is empty or you don't find your distro, select ``Add Boot Option`` to add a new one. For debian for example you only need to set the description and the file. You can enter whatever you want into the description field. When you select the file field, you can select the disc you installed the distro on and partition number one. For example \"|emmcdev-uboot|:1\" for emmc, or \"|sdcarddev-uboot|:1\" for sdcard. The file you need to select is at ``EFI/debian/grubaa64.efi``. After that save, quit and reset the board. The board should then boot into debian."
msgstr ""

msgid "Development"
msgstr ""

msgid "Starting with this release, the boot behaviour in U-Boot changes. Before, kernel and device tree came as separate blobs. Now, both will be included in a single FIT image blob. Further, the logic for booting the PHYTEC ampliphy distributions is moved to a boot script which itself is part of a separate FIT image blob. To revert to the old style of booting, you may do"
msgstr ""

msgid "This way of booting is deprecated and will be removed in the next release. By default, booting via this command will return an error as kernel and device tree are missing in the boot partition."
msgstr ""

msgid "Standalone Build preparation"
msgstr ""

msgid "In this section, we describe how to build the U-Boot and the Linux kernel without using the `Yocto Project <https://www.yoctoproject.org/>`__. This procedure makes the most sense for development. The U-Boot source code, the Linux kernel, and all other git repositories are available on our `Git server <https://git.phytec.de/>`__ at git://git.phytec.de."
msgstr ""

msgid "Should your company firewall/gateway inhibit the git protocol, you may use HTTP or HTTPS instead (e.g. git clone |u-boot-repo-url|)"
msgstr ""

msgid "Git Repositories"
msgstr ""

msgid "Used U-Boot repository:"
msgstr ""

msgid "Our U-Boot is based on the |u-boot-repo-name| and adds board-specific patches."
msgstr ""

msgid "Used Linux kernel repository:"
msgstr ""

msgid "Our |soc| kernel is based on the |kernel-repo-name| kernel."
msgstr ""

msgid "To find out which u-boot and kernel tags to use for a specific board, have a look at your BSP source folder:"
msgstr ""

msgid "Get the SDK"
msgstr ""

msgid "You can download the SDK `here <dl-sdk_>`_, or build it yourself with Yocto:"
msgstr ""

msgid "Move to the Yocto build directory:"
msgstr ""

msgid "After a successful build the SDK installer is deployed to ``build/deploy*/sdk``."
msgstr ""

msgid "Install the SDK"
msgstr ""

msgid "Set correct permissions and install the SDK:"
msgstr ""

msgid "Using the SDK"
msgstr ""

msgid "Activate the toolchain for your shell by sourcing the *environment-setup* file in the toolchain directory:"
msgstr ""

msgid "Installing Required Tools"
msgstr ""

msgid "Building Linux and U-Boot out-of-tree requires some additional host tool dependencies to be installed. For Ubuntu you can install them with:"
msgstr ""

msgid "Using the SDK on older host distributions (e.g., Ubuntu 20.04 LTS) with Scarthgap NXP-based BSPs can cause issues when building U-Boot or Linux kernel tools for host use. If you encounter an \"undefined reference\" error, a workaround is to prepend the host's binutils to the PATH."
msgstr ""

msgid "Run this after sourcing the SDK *environment-setup* file."
msgstr ""

msgid "Note, SDK issue has not been observed on newer distributions, such as Ubuntu 22.04, which appear to work without requiring any modifications."
msgstr ""

msgid "U-Boot standalone build"
msgstr ""

msgid "Get the source code"
msgstr ""

msgid "Get the U-Boot sources:"
msgstr ""

msgid "To get the correct *U-Boot* **tag** you need to take a look at our release notes, which can be found here: `release notes <releasenotes_>`_"
msgstr ""

msgid "The **tag** used in this release is called |u-boot-tag|"
msgstr ""

msgid "Check out the needed *U-Boot* **tag**:"
msgstr ""

msgid "Set up a build environment:"
msgstr ""

msgid "Get the needed binaries"
msgstr ""

msgid "To build the bootloader, you need to **copy** these **files** to your |u-boot-repo-name| **build directory** and rename them to fit with *mkimage* script:"
msgstr ""

msgid "**ARM Trusted firmware binary** (*mkimage tool* compatible format **bl31.bin**): bl31-|kernel-socname|.bin"
msgstr ""

msgid "**OPTEE image** (optional): tee.bin"
msgstr ""

msgid "**DDR firmware files** (*mkimage tool* compatible format **lpddr4_[i,d]mem_\\*d_\\*.bin**): lpddr4_dmem_1d_*.bin, lpddr4_dmem_2d_*.bin, lpddr4_imem_1d_*.bin, lpddr4_imem_2d_*.bin"
msgstr ""

msgid "If you already built our BSP with Yocto, you can get the bl31-|kernel-socname|.bin, tee.bin and lpddr4_*.bin from the directory mentioned here: |ref-bsp-images|"
msgstr ""

msgid "Or you can download the files here: |link-boot-tools|"
msgstr ""

msgid "Make sure you rename the files you need so that they are compatible with the *mkimage tool*."
msgstr ""

msgid "Build the bootloader"
msgstr ""

msgid "build flash.bin (imx-boot):"
msgstr ""

msgid "Flash the bootloader to a block device"
msgstr ""

msgid "The flash.bin can be found at |u-boot-repo-name|/ directory and now can be flashed. A chip-specific offset is needed:"
msgstr ""

msgid "SoC"
msgstr ""

msgid "Offset User Area"
msgstr ""

msgid "Offset Boot Partition"
msgstr ""

msgid "eMMC Device"
msgstr ""

msgid "|soc|"
msgstr ""

msgid "|u-boot-offset| kiB"
msgstr ""

msgid "|u-boot-offset-boot-part| kiB"
msgstr ""

msgid "/dev/|emmcdev|"
msgstr ""

msgid "E.g. flash SD card:"
msgstr ""

msgid "The specific offset values are also declared in the Yocto variables \"BOOTLOADER_SEEK\" and \"BOOTLOADER_SEEK_EMMC\""
msgstr ""

msgid "Build U-Boot With a Fixed RAM Size"
msgstr ""

msgid "If you cannot boot your system anymore because the hardware introspection in the EEPROM is damaged or deleted, you can create a flash.bin with a fixed ram size. You should still contact support and flash the correct EEPROM data, as this could lead to unexpected behavior."
msgstr ""

msgid "Follow the steps to get the U-boot sources and check the correct branch in the **Build U-Boot** section."
msgstr ""

msgid "Edit the file configs/|u-boot-defconfig|:"
msgstr ""

msgid "Choose the correct RAM size as populated on the board and uncomment the line for this ram size. After saving the changes, follow the remaining steps from |ref-build-uboot|."
msgstr ""

msgid "Kernel standalone build"
msgstr ""

msgid "The kernel is packaged in a FIT image together with the device tree. U-Boot has been adapted to be able to load a FIT image and boot the kernel contained in it. As a result, the kernel Image has to packaged in a FIT image."
msgstr ""

msgid "Setup sources"
msgstr ""

msgid "The used |kernel-repo-name| branch can be found in the `release notes <releasenotes_>`_"
msgstr ""

msgid "The tag needed for this release is called |kernel-tag|"
msgstr ""

msgid "Check out the needed |kernel-repo-name| tag:"
msgstr ""

msgid "For committing changes, it is highly recommended to switch to a new branch:"
msgstr ""

msgid "Build the kernel"
msgstr ""

msgid "Build the linux kernel:"
msgstr ""

msgid "Install kernel modules to e.g. NFS directory:"
msgstr ""

msgid "The Image can be found at ~/|kernel-repo-name|/arch/arm64/boot/Image.gz"
msgstr ""

msgid "The dtb can be found at ~/|kernel-repo-name|/arch/arm64/boot/dts/freescale/|dt-carrierboard|.dtb"
msgstr ""

msgid "For (re-)building only Devicetrees and -overlays, it is sufficient to run"
msgstr ""

msgid "If you are facing the following build issue:"
msgstr ""

msgid "Make sure you installed the package *\"libyaml-dev\"* on your host system:"
msgstr ""

msgid "Package the kernel in a FIT image"
msgstr ""

msgid "To simply replace the kernel, you will need an ``image tree source`` (.its) file. If you already built our BSP with Yocto, you can get the its file from the directory mentioned here: |ref-bsp-images| Or you can download the file here: |link-bsp-images|"
msgstr ""

msgid "Copy the .its file to the current working directory, create a link to the kernel image and create the final fitImage with mkimage."
msgstr ""

msgid "Copy FIT image and kernel modules to SD Card"
msgstr ""

msgid "When one-time boot via netboot is not sufficient, the FIT image along with the kernel modules may be copied directly to a mounted SD card."
msgstr ""

msgid "Working with UUU-Tool"
msgstr ""

msgid "The Universal Update Utility Tool (UUU-Tool) from NXP is a software to execute on the host to load and run the bootloader on the board through SDP (Serial Download Protocol). For detailed information visit https://github.com/nxp-imx/mfgtools or download the `Official UUU-tool documentation <https://community.nxp.com/pwmxy87654/attachments/pwmxy87654/imx-processors/140261/1/UUU.pdf>`_."
msgstr ""

msgid "Host preparations for UUU-Tool Usage"
msgstr ""

msgid "Follow the instructions from https://github.com/nxp-imx/mfgtools#linux."
msgstr ""

msgid "If you built UUU from source, add it to ``PATH``:"
msgstr ""

msgid "This BASH command adds UUU only temporarily to ``PATH``. To add it permanently, add this line to ``~/.bashrc``."
msgstr ""

msgid "Set udev rules (documented in ``uuu -udev``):"
msgstr ""

msgid "Get Images"
msgstr ""

msgid "Download imx-boot from our server or get it from your Yocto build directory at build/deploy-|yocto-distro|/images/|yocto-machinename|/. For flashing a wic image to eMMC, you will also need |yocto-imagename|-|yocto-machinename|.rootfs.wic."
msgstr ""

msgid "Prepare Target"
msgstr ""

msgid "Set the |ref-bootswitch| to **USB Serial Download**. Also, connect USB port |ref-usb-otg| to your host."
msgstr ""

msgid "Starting bootloader via UUU-Tool"
msgstr ""

msgid "Execute and power up the board:"
msgstr ""

msgid "You can see the bootlog on the console via |ref-debugusbconnector|, as usual."
msgstr ""

msgid "The default boot command when booting with UUU-Tool is set to fastboot. If you want to change this, please adjust the environment variable bootcmd_mfg in U-boot prompt with setenv bootcmd_mfg. Please note, when booting with UUU-tool the default environment is loaded. Saveenv has no effect. If you want to change the boot command permanently for UUU-boot, you need to change this in U-Boot code."
msgstr ""

msgid "Flashing U-boot Image to eMMC via UUU-Tool"
msgstr ""

msgid "UUU flashes U-boot into eMMC BOOT (hardware) boot partitions, and it sets the BOOT_PARTITION_ENABLE in the eMMC! This is a problem since we want the bootloader to reside in the eMMC USER partition. Flashing next U-Boot version .wic image and not disabling BOOT_PARTITION_ENABLE bit will result in device always using U-boot saved in BOOT partitions. To fix this in U-Boot:"
msgstr ""

msgid "or check :ref:`Disable booting from eMMC boot partitions <emmc-disable-boot-part>` from Linux."
msgstr ""

msgid "This way the bootloader is still flashed to eMMC BOOT partitions but it is not used!"
msgstr ""

msgid "When using **partup** tool and ``.partup`` package for eMMC flashing this is done by default, which makes partup again superior flash option."
msgstr ""

msgid "Flashing wic Image to eMMC via UUU-Tool"
msgstr ""

msgid "Flashing SPI NOR Flash via UUU-Tool"
msgstr ""

msgid "This will update the U-Boot on SPI NOR Flash but not the environment. You may need to erase the old environment so the default environment of the new U-Boot gets loaded:"
msgstr ""

msgid "Host Network Preparation"
msgstr ""

msgid "For various tasks involving a network in the Bootloader, some host services are required to be set up. On the development host, a TFTP, NFS and DHCP server must be installed and configured. The following tools will be needed to boot via Ethernet:"
msgstr ""

msgid "TFTP Server Setup"
msgstr ""

msgid "First, create a directory to store the TFTP files:"
msgstr ""

msgid "Then copy your BSP image files to this directory and make sure other users have read access to all the files in the tftp directory, otherwise they are not accessible from the target."
msgstr ""

msgid "You also need to configure a static IP address for the appropriate interface. The default IP address of the PHYTEC evaluation boards is 192.168.3.11. Setting a host address 192.168.3.10 with netmask 255.255.255.0 is a good choice."
msgstr ""

msgid "Replace <network-interface> with the network interface you configured and want to connect the board to. You can show all network interfaces by not specifying a network interface."
msgstr ""

msgid "The message you receive should contain this:"
msgstr ""

msgid "Create or edit the ``/etc/default/tftpd-hpa`` file:"
msgstr ""

msgid "Set TFTP_DIRECTORY to your TFTP server root directory"
msgstr ""

msgid "Set TFTP_ADDRESS to the host address the server is listening to (set to 0.0.0.0:69 to listen to all local IPs)"
msgstr ""

msgid "Set TFTP_OPTIONS, the following command shows the available options:"
msgstr ""

msgid "Restart the services to pick up the configuration changes:"
msgstr ""

msgid "Now connect the ethernet port of the board to your host system. We also need a network connection between the embedded board and the TFTP server. The server should be set to IP 192.168.3.10 and netmask 255.255.255.0."
msgstr ""

msgid "NFS Server Setup"
msgstr ""

msgid "Create an nfs directory:"
msgstr ""

msgid "The NFS server is not restricted to a certain file system location, so all we have to do on most distributions is modify the file ``/etc/exports`` and export our root file system to the embedded network. In this example file, the whole directory is exported and the \"lab network\" address of the development host is 192.168.3.10. The IP address has to be adapted to the local needs:"
msgstr ""

msgid "Now the NFS-Server has to read the ``/etc/exportfs`` file again:"
msgstr ""

msgid "DHCP Server setup"
msgstr ""

msgid "Create or edit the ``/etc/kea/kea-dhcp4.conf`` file; Using the internal subnet sample. Replace <network-interface> with the name for the physical network interface:"
msgstr ""

msgid "Be careful when creating subnets as this may interfere with the company network policy. To be on the safe side, use a different network and specify that via the ``interfaces`` configuration option."
msgstr ""

msgid "Now the DHCP-Server has to read the ``/etc/kea/kea-dhcp4.conf`` file again:"
msgstr ""

msgid "When you boot/restart your host PC and don't have the network interface, as specified in the kea-dhcp4 config, already active the kea-dhcp4-server will fail to start. Make sure to start/restart the systemd service when you connect the interface."
msgstr ""

msgid "Booting the Kernel from a Network"
msgstr ""

msgid "Booting from a network means loading the kernel and device tree over TFTP and the root file system over NFS. The bootloader itself must already be loaded from another available boot device."
msgstr ""

msgid "Place Images on Host for Netboot"
msgstr ""

msgid "Copy the kernel fitimage to your tftp directory:"
msgstr ""

msgid "Copy the bootscript to your tftp directory:"
msgstr ""

msgid "Make sure other users have read access to all the files in the tftp directory, otherwise they are not accessible from the target:"
msgstr ""

msgid "Extract the rootfs to your nfs directory:"
msgstr ""

msgid "Make sure you extract with sudo to preserve the correct ownership."
msgstr ""

msgid "Set the bootenv.txt for Netboot"
msgstr ""

msgid "Create a bootenv.txt file in your tftp directory and write the following variables into it."
msgstr ""

msgid "<overlayconfignames> has to be replaced with the devicetree overlay config names that you want to use. Separate the config names by hashtag. For example:"
msgstr ""

msgid "All supported devicetree overlays are in the |ref-dt| chapter. Or can be printed with:"
msgstr ""

msgid "Network Settings on Target"
msgstr ""

msgid "To customize the targets ethernet configuration, please follow the description here: |ref-network|"
msgstr ""

msgid "Booting from an Embedded Board"
msgstr ""

msgid "Boot the board into the U-boot prompt and press any key to hold."
msgstr ""

msgid "To boot from a network, call:"
msgstr ""

msgid "Accessing the Development states"
msgstr ""

msgid "Development state of current release"
msgstr ""

msgid "These release manifests exist to give you access to the development states of the *Yocto* BSP. They will not be displayed in the phyLinux selection menu but need to be selected manually. This can be done using the following command line:"
msgstr ""

msgid "This will initialize a BSP that will track the latest development state of the current release (|yocto-manifestname|). From now on *repo sync* in this folder will pull all the latest changes from our Git repositories:"
msgstr ""

msgid "Development state of upcoming release"
msgstr ""

msgid "Also development states of upcoming releases can be accessed this way. For this execute the following command and look for a release with a higher PDXX.Y number than the latest one (|yocto-manifestname|) and ``.y`` at the end:"
msgstr ""

msgid "Accessing the Latest Upstream Support"
msgstr ""

msgid "We have a vanilla manifest that makes use of the Yocto master branches (not an NXP release), Linux, and U-Boot. This can be used to test the latest upstream kernel/U-Boot."
msgstr ""

msgid "The master manifest reflects the latest state of development. This tends to be broken from time to time. We try to fix the master on a regular basis."
msgstr ""

msgid "Format SD-Card"
msgstr ""

msgid "Most images are larger than the default root partition. To flash any storage device with SD Card, the rootfs needs to be expanded or a separate partition needs to be created. There are some different ways to format the SD Card.  The easiest way to do this is to use the UI program Gparted."
msgstr ""

msgid "Gparted"
msgstr ""

msgid "Get GParted:"
msgstr ""

msgid "Insert the SD Card into your host and get the device name:"
msgstr ""

msgid "Unmount all SD Card partitions."
msgstr ""

msgid "Launch GParted:"
msgstr ""

msgid "Expand rootfs"
msgstr ""

msgid "Running gparted on host systems which are using resize2fs version 1.46.6 and older (e.g. Ubuntu 22.04) are not able to expand the ext4 partition created with Yocto Mickledore and newer. This is due to a new default option in resize2fs which causes a incompatibility. See `release notes <https://e2fsprogs.sourceforge.net/e2fsprogs-release.html#1.47.0>`_."
msgstr ""

msgid "Choose your SD Card device at the drop-down menu on the top right"
msgstr ""

msgid "Choose the ext4 root partition and click on resize:"
msgstr ""

msgid "Drag the slider as far as you like or enter the size manually."
msgstr ""

msgid "Confirm your entry by clicking on the \"Change size\" button."
msgstr ""

msgid "To apply your changes, press the green tick."
msgstr ""

msgid "Now you can mount the root partition and copy e.g. the |yocto-imagename|-|yocto-machinename|.wic image to it. Then unmount it again:"
msgstr ""

msgid "Create the Third Partition"
msgstr ""

msgid "Choose the bigger unallocated  area and press \"New\":"
msgstr ""

msgid "Click \"Add\""
msgstr ""

msgid "Confirm your changes by pressing the green tick."
msgstr ""

msgid "Now you can mount the new partition and copy e.g. |yocto-imagename|-|yocto-machinename|.wic image to it. Then unmount it again:"
msgstr ""

msgid "Switch back to legacyboot"
msgstr ""

msgid "As we switched to standardboot with fitimage as default, legacyboot is deprecated. We kept the option to switch back to legacyboot for this release, but it will be removed in the future."
msgstr ""

msgid "Changes in Yocto"
msgstr ""

msgid "By default, the fitImage and bootscript will be deployed into the wic.xz Image. To switch back to legacyboot, you need to replace the fitImage and bootscript for the kernel image and the devicetrees. They are still in the deploy folder from the Yocto build, so you can manually copy them to the boot partition on your device. Otherwise you can do the following changes in Yocto to get the kernel and devicetrees deployed in the Image again."
msgstr ""

msgid "First create the variable `KERNEL_DEVICETREE_DEPLOY`. This can be done for example in the local.conf file in your build directory `conf/local.conf`. The variable is basically a copy of the `KERNEL_DEVICETREE` variable that is set in conf/machine/|yocto-machinename|.conf in meta-phytec but the `freescale` at the beginning needs to be removed, so that only the devicetree filename are left. In the end it should look something like this:"
msgstr ""

msgid "Then add this line:"
msgstr ""

msgid "A clean might be required for this to work."
msgstr ""

msgid "Then start the build:"
msgstr ""

msgid "Changes in U-Boot environment"
msgstr ""

msgid "To re-enable legacyboot set the following variable:"
msgstr ""

msgid "Device Tree (DT)"
msgstr ""

msgid "Introduction"
msgstr ""

msgid "The following text briefly describes the Device Tree and can be found in the Linux kernel Documentation (https://docs.kernel.org/devicetree/usage-model.html)"
msgstr ""

msgid "*\"The “Open Firmware Device Tree”, or simply Devicetree (DT), is a data structure and language for describing hardware. More specifically, it is a description of hardware that is readable by an operating system so that the operating system doesn't need to hard code details of the machine.\"*"
msgstr ""

msgid "The kernel documentation is a really good source for a DT introduction. An overview of the device tree data format can be found on the device tree usage page at `devicetree.org <https://www.devicetree.org/>`_."
msgstr ""

msgid "PHYTEC |soc| BSP Device Tree Concept"
msgstr ""

msgid "The following sections explain some rules PHYTEC has defined on how to set up device trees for our |soc| SoC-based boards."
msgstr ""

msgid "Device Tree Structure"
msgstr ""

msgid "*Module.dtsi* - Module includes all devices mounted on the SoM, such as PMIC and RAM."
msgstr ""

msgid "*Board.dts* - include the module dtsi file. Devices that come from the |soc| SoC but are just routed down to the carrier board and used there are included in this dts."
msgstr ""

msgid "*Overlay.dtso* - enable/disable features depending on optional hardware that may be mounted or missing on SoM or baseboard (e.g SPI flash or PEB-AV-10)"
msgstr ""

msgid "From the root directory of the Linux Kernel our devicetree files for |socfamily| platforms can be found in ``arch/arm64/boot/dts/freescale/``."
msgstr ""

msgid "Device Tree Overlay"
msgstr ""

msgid "Device Tree overlays are device tree fragments that can be merged into a device tree during boot time. These are for example hardware descriptions of an expansion board. They are instead of being added to the device tree as an extra include, now applied as an overlay. They also may only contain setting the status of a node depending on if it is mounted or not. The device tree overlays are placed next to the other device tree files in our Linux kernel repository in the folder ``arch/arm64/boot/dts/freescale/``."
msgstr ""

msgid "Available overlays for |yocto-machinename|.conf are:"
msgstr ""

msgid "Otherwise you can show the content of a FIT image including all overlay configs in the FIT image with this command in Linux:"
msgstr ""

msgid "or in U-Boot:"
msgstr ""

msgid "The usage of overlays can be configured during runtime in Linux or U-Boot. Overlays are applied during the boot process in the bootloader after the boot command is called and before the kernel is loaded. The next sections explain the configuration in more detail."
msgstr ""

#, python-brace-format
msgid "Set ``${overlays}`` variable"
msgstr ""

#, python-brace-format
msgid "The ``${overlays}`` U-Boot environment variable contains a number-sign (#) separated list of overlays that will be applied during boot. The overlays listed in the overlays variable must be included in the FIT image. Overlays set in the $KERNEL_DEVICETREE Yocto machine variable will automatically be added to the FIT image."
msgstr ""

#, python-brace-format
msgid "The ``${overlays}`` variable can either be set directly in the U-Boot environment or can be part of the external ``bootenv.txt`` environment file. When desired to use the overlays variable as set manually in the U-Boot environment, disable bootenv by setting ``env set no_bootenv 1`` as the overlays variable may be overwritten during the execution of the boot script. By default, the ``${overlays}`` variable comes from the external ``bootenv.txt`` environment file which is located in the boot partition. You can read and write the file on booted target from linux:"
msgstr ""

msgid "Changes will take effect after the next reboot. If no ``bootenv.txt`` file is available the overlays variable can be set directly in the U-Boot environment."
msgstr ""

#, python-brace-format
msgid "If a user defined ``${overlays}`` variable should be directly loaded from U-Boot environment but there is still an external ``bootenv.txt`` available, the ``${no_bootenv}`` variable needs to be set as a flag:"
msgstr ""

msgid "More information about the external environment can be found in |ubootexternalenv|."
msgstr ""

#, python-brace-format
msgid "We use the ``${overlays}`` variable for overlays describing expansion boards and cameras that can not be detected during run time. To prevent applying overlays unset the overlays variable and set no_bootenv to anything other than 0."
msgstr ""

msgid "If desired to use the bootenv.txt file for setting U-Boot variables other than overlays and having overlays disabled, remove the overlays definition line from the bootenv.txt file instead of setting no_bootenv."
msgstr ""

msgid "SoM Variants"
msgstr ""

msgid "Additional overlays are applied automatically to disable components that are not populated on the SoM. The detection is done with the EEPROM data (EEPROM SoM Detection) found on the SoM i2c EEPROM."
msgstr ""

msgid "It depends on the SoM variant if any device tree overlays will be applied. To check if an overlay will be applied on the running SoM in U-Boot, run:"
msgstr ""

msgid "If the EEPROM data is not available, no device tree overlays are applied."
msgstr ""

#, python-brace-format
msgid "To prevent application of the SoM variant related overlays the ``${no_extensions}`` variable can be set to `1` in the bootloader environment::"
msgstr ""

msgid "U-boot External Environment"
msgstr ""

#, python-brace-format
msgid "During the start of the Linux Kernel the external environment ``bootenv.txt`` text file will be loaded from the boot partition of an MMC device or via TFTP. The main intention of this file is to store the ``${overlays}`` variable. This makes it easy to pre-define the overlays in Yocto depending on the used machine. The content from the file is defined in the Yocto recipe bootenv found in meta-phytec: |yocto-bootenv-link|"
msgstr ""

#, python-brace-format
msgid "Other variables can be set in this file, too. They will overwrite the existing settings in the environment. But only variables evaluated after issuing the boot command can be overwritten, such as ``${nfsroot}`` or ``${mmcargs}``. Changing other variables in that file will not have an effect. See the usage during netboot as an example."
msgstr ""

msgid "If the external environment can not be loaded the boot process will be anyway continued with the values of the existing environment settings."
msgstr ""

msgid "Change U-boot Environment from Linux on Target"
msgstr ""

msgid "Libubootenv is a tool included in our images to modify the U-Boot environment of Linux on the target machine."
msgstr ""

msgid "Print the U-Boot environment using the following command:"
msgstr ""

msgid "Modify a U-Boot environment variable using the following command:"
msgstr ""

msgid "Libubootenv takes the environment selected in a configuration file. The environment to use is inserted there, and by default it is configured to use the eMMC environment (known as the default used environment)."
msgstr ""

msgid "If the eMMC is not flashed or the eMMC environment is deleted, libubootenv will not work. You should modify the ``/etc/fw_env.config`` file to match the environment source that you want to use."
msgstr ""

msgid "Accessing Peripherals"
msgstr ""

msgid "To find out which boards and modules are supported by the release of PHYTEC's phyCORE-|soc| BSP described herein, visit |dlpage-bsp|_ web page and click the corresponding BSP release in the download section. Here you can find all hardware supported in the columns \"Hardware Article Number\" and the correct machine name in the corresponding cell under \"Machine Name\"."
msgstr ""

msgid "To achieve maximum software reuse, the Linux kernel offers a sophisticated infrastructure that layers software components into board-specific parts. The BSP tries to modularize the kit features as much as possible. When a customized baseboard or even a customer-specific module is developed, most of the software support can be reused without error-prone copy-and-paste. The kernel code corresponding to the boards can be found in device trees (DT) in the kernel repository under ``arch/arm64/boot/dts/freescale/*.dts``."
msgstr ""

msgid "In fact, software reuse is one of the most important features of the Linux kernel, especially of the ARM implementation which always has to fight with an insane number of possibilities of the System-on-Chip CPUs. The whole board-specific hardware is described in DTs and is not part of the kernel image itself. The hardware description is in its own separate binary, called the Device Tree Blob (DTB) (section |ref-dt|)."
msgstr ""

msgid "Please read section PHYTEC |soc| BSP Device Tree Concept to get an understanding of our |socfamily| BSP device tree model."
msgstr ""

msgid "The following sections provide an overview of the supported hardware components and their operating system drivers on the |socfamily| platform. Further changes can be ported upon customer request."
msgstr ""

msgid "|soc| Pin Muxing"
msgstr ""

msgid "The |soc| SoC contains many peripheral interfaces. In order to reduce package size and lower overall system cost while maintaining maximum functionality, many of the |soc| terminals can multiplex up to eight signal functions. Although there are many combinations of pin multiplexing that are possible, only a certain number of sets, called IO sets, are valid due to timing limitations. These valid IO sets were carefully chosen to provide many possible application scenarios for the user."
msgstr ""

msgid "Please refer to our Hardware Manual or the NXP |soc| Reference Manual for more information about the specific pins and the muxing capabilities."
msgstr ""

msgid "The IO set configuration, also called muxing, is done in the Device Tree. The driver pinctrl-single reads the DT's node fsl,pins, and does the appropriate pin muxing."
msgstr ""

msgid "The following is an example of the pin muxing of the UART1 device in |dt-carrierboard|.dts:"
msgstr ""

msgid "The first part of the string MX8MM_IOMUXC_SAI2_RXFS_UART1_DCE_TX names the pad (in this example SAI2_RXFS). The second part of the string (UART1_DCE_RX) is the desired muxing option for this pad. The pad setting value (hex value on the right) defines different modes of the pad, for example, if internal pull resistors are activated or not. In this case, the internal resistors are disabled."
msgstr ""

msgid "RS232/RS485"
msgstr ""

msgid "The |soc| SoC provides up to 4 UART units. PHYTEC boards support different numbers of these UART units. UART1 can also be used as RS-485. For this, |ref-bootswitch| needs to be set correctly:"
msgstr ""

msgid "**UART1 RS485**"
msgstr ""

msgid "**UART1 RS232**"
msgstr ""

msgid "RS232"
msgstr ""

msgid "Display the current settings of a terminal in a human-readable format:"
msgstr ""

msgid "Configuration of the UART interface can be done with stty. For example:"
msgstr ""

msgid "With a simple echo and cat, basic communication can be tested. Example:"
msgstr ""

msgid "The host should print out \"123\"."
msgstr ""

msgid "RS485"
msgstr ""

msgid "Remember to use bus termination resistors of 120 Ohm at each end of the bus, when using longer cables."
msgstr ""

msgid "For easy testing, look at the linux-serial-test. This tool is called the IOCTL for RS485 and sends a constant stream of data."
msgstr ""

msgid "More information about the linux-serial-test tool and its parameters can be found here: `linux-serial-test <https://github.com/cbrake/linux-serial-test>`_"
msgstr ""

msgid "The linux-serial-test will automatically set ioctls, but they can also be set manually with rs485conf."
msgstr ""

msgid "You can show the current config with:"
msgstr ""

msgid "You can show all options with:"
msgstr ""

msgid "Documentation for calling the IOCTL within c-code is described in the Linux kernel documentation: https://www.kernel.org/doc/Documentation/serial/serial-rs485.txt"
msgstr ""

msgid "RS485 half-duplex"
msgstr ""

msgid "For half-duplex mode your connection setup should look like this:"
msgstr ""

msgid "Which function is on which pin is described in the hardware manual."
msgstr ""

msgid "For half-duplex mode you can set the ioctls manually like this:"
msgstr ""

msgid "Then you can test if sending and receiving works like this:"
msgstr ""

msgid "You should see \"test\" printed out on target1. You can also switch the roles and send on target2 and receive on target1."
msgstr ""

msgid "Alternatively you can also test with the linux-serial-test tool:"
msgstr ""

msgid "In this example target1 will be the receiver and target2 will be the transmitter. You should also be able to switch the roles. Remember to first start the receiver and then the transmitter immediately after. The receiver will receive for 8 sec and the transmitter will send for 5 sec. The receiver needs to receive for a bit longer than the transmitter sends. At the end the program will print the final \"count for this session\". There you can check, that all transmitted frames were received."
msgstr ""

msgid "All the tests are target to target, but can also be done with host to target with a USB to rs485 converter. You may need to adjust the interfaces then."
msgstr ""

msgid "The device tree representation for RS232 and RS485: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phyboard-polis-rdk.dts#L297`"
msgstr ""

msgid "Network"
msgstr ""

msgid "|sbc|-|soc| provides one Gigabit Ethernet interface."
msgstr ""

msgid "All interfaces offer a standard Linux network port that can be programmed using the BSD socket interface. The whole network configuration is handled by the systemd-networkd daemon. The relevant configuration files can be found on the target in ``/lib/systemd/network/`` as well as the BSP in ``meta-ampliphy/recipes-core/systemd/systemd-conf``."
msgstr ""

msgid "IP addresses can be configured within \\*.network files. The interfaces are configured to static IP as default. The default IP address and netmask for eth0 is:"
msgstr ""

msgid "To configure eth0 to dynamic IP over DHCP, go to ``/lib/systemd/network/\\*-eth0.network`` and delete the line:"
msgstr ""

msgid "The DT Ethernet setup might be split into two files depending on your hardware configuration: the module DT and the board-specific DT. The device tree set up for the ethernet where the PHY is populated on the SoM can be found here: |dt-somnetwork|."
msgstr ""

msgid "|sbc-network|"
msgstr ""

msgid "Network Environment Customization"
msgstr ""

msgid "U-boot network-environment"
msgstr ""

msgid "To find the Ethernet settings in the target bootloader:"
msgstr ""

msgid "With your development host set to IP 192.168.3.10 and netmask 255.255.255.0, the target should return:"
msgstr ""

msgid "If you need to make any changes:"
msgstr ""

msgid "<parameter> should be one of ipaddr, netmask, gatewayip or serverip. <value> will be the actual value of the chosen parameter."
msgstr ""

msgid "The changes you made are temporary for now. To save these:"
msgstr ""

msgid "Here you can also change the IP address to DHCP instead of using a static one."
msgstr ""

msgid "Configure:"
msgstr ""

msgid "Set up paths for TFTP and NFS. A modification could look like this:"
msgstr ""

msgid "Please note that these modifications will only affect the bootloader settings."
msgstr ""

msgid "Variables like nfsroot and netargs can be overwritten by the U-boot External Environment. For netboot, the external environment will be loaded from tftp. For example, to locally set the nfsroot variable in a ``bootenv.txt`` file, locate the tftproot directory:"
msgstr ""

msgid "There is no need to store the info on the target. Please note that this does not work for variables like ipaddr or serveraddr as they need to be already set when the external environment is being loaded."
msgstr ""

msgid "Kernel network-environment"
msgstr ""

msgid "Find the ethernet settings for eth0 in the target kernel:"
msgstr ""

msgid "Temporary adaption of the eth0 configuration:"
msgstr ""

msgid "WLAN"
msgstr ""

msgid "For WLAN and Bluetooth support, we use the Sterling-LWB module from LSR. This module supports 2,4 GHz bandwidth and can be run in several modes, like client mode, Access Point (AP) mode using WEP, WPA, WPA2 encryption, and more. More information about the module can be found at https://connectivity-staging.s3.us-east-2.amazonaws.com/2019-09/CS-DS-SterlingLWB%20v7_2.pdf"
msgstr ""

msgid "Connecting to a WLAN Network"
msgstr ""

msgid "First set the correct regulatory domain for your country:"
msgstr ""

msgid "You will see:"
msgstr ""

msgid "Set up the wireless interface:"
msgstr ""

msgid "Now you can scan for available networks:"
msgstr ""

msgid "You can use a cross-platform supplicant with support for WEP, WPA, and WPA2 called wpa_supplicant for an encrypted connection."
msgstr ""

msgid "To do so, add the network-credentials to the file ``/etc/wpa_supplicant.conf``:"
msgstr ""

msgid "Now a connection can be established:"
msgstr ""

msgid "This should result in the following output:"
msgstr ""

msgid "The ip address is automatically configured over DHCP. For other possible IP configurations, see section `Changing the Network Configuration` in the |yocto-ref-manual|."
msgstr ""

msgid "Bluetooth"
msgstr ""

msgid "Bluetooth is connected to |bluetooth-uart| interface. The Bluetooth device needs to be set up manually:"
msgstr ""

msgid "Now you can scan your environment for visible Bluetooth devices. Bluetooth is not visible during a default startup."
msgstr ""

msgid "Visibility"
msgstr ""

msgid "To activate visibility:"
msgstr ""

msgid "To disable visibility:"
msgstr ""

msgid "Connect"
msgstr ""

msgid "If the connection fails with the error message: \"Failed to connect: org.bluez.Error.Failed\" try restarting PulseAudio with:"
msgstr ""

msgid "SD/MMC Card"
msgstr ""

msgid "The |soc| supports a slot for Secure Digital Cards and MultiMedia Cards to be used as general-purpose block devices. These devices can be used in the same way as any other block device."
msgstr ""

msgid "These kinds of devices are hot-pluggable. Nevertheless, you must ensure not to unplug the device while it is still mounted. This may result in data loss!"
msgstr ""

msgid "After inserting an SD/MMC card, the kernel will generate new device nodes in /dev. The full device can be reached via its /dev/mmcblk1 device node. SD/MMC card partitions will show up as:"
msgstr ""

msgid "<Y> counts as the partition number starting from 1 to the max count of partitions on this device. The partitions can be formatted with any kind of file system and also handled in a standard manner, e.g. the mount and umount command work as expected."
msgstr ""

msgid "These partition device nodes will only be available if the card contains a valid partition table (”hard disk” like handling). If no partition table is present, the whole device can be used as a file system (”floppy” like handling). In this case, /dev/mmcblk1 must be used for formatting and mounting. The cards are always mounted as being writable."
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phyboard-polis-rdk.dts#L381`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phycore-som.dtsi#L293`"
msgstr ""

msgid "eMMC Devices"
msgstr ""

msgid "PHYTEC modules like phyCORE-|soc| is populated with an eMMC memory chip as the main storage. eMMC devices contain raw Multi-Level Cells (MLC) or Triple-Level Cells (TLC) combined with a memory controller that handles ECC and wear leveling. They are connected via an SD/MMC interface to the |soc| and are represented as block devices in the Linux kernel like SD cards, flash drives, or hard disks."
msgstr ""

msgid "The electric and protocol specifications are provided by JEDEC (https://www.jedec.org/standards-documents/technology-focus-areas/flash-memory-ssds-ufs-emmc/e-mmc). The eMMC manufacturer's datasheet is relatively short and meant to be read together with the supported version of the JEDEC eMMC standard."
msgstr ""

msgid "PHYTEC currently utilizes the eMMC chips with JEDEC Version 5.0 and 5.1"
msgstr ""

msgid "Extended CSD Register"
msgstr ""

msgid "eMMC devices have an extensive amount of extra information and settings that are available via the Extended CSD registers. For a detailed list of the registers, see manufacturer datasheets and the JEDEC standard."
msgstr ""

msgid "In the Linux user space, you can query the registers:"
msgstr ""

msgid "Enabling Background Operations (BKOPS)"
msgstr ""

msgid "In contrast to raw NAND Flash, an eMMC device contains a Flash Transfer Layer (FTL) that handles the wear leveling, block management, and ECC of the raw MLC or TLC. This requires some maintenance tasks (for example erasing unused blocks) that are performed regularly. These tasks are called **Background Operations (BKOPS)**."
msgstr ""

msgid "By default (depending on the chip), the background operations may or may not be executed periodically, impacting the worst-case read and write latency."
msgstr ""

msgid "The JEDEC Standard has specified a method since version v4.41 that the host can issue BKOPS manually. See the JEDEC Standard chapter Background Operations and the description of registers BKOPS_EN (Reg: 163) and BKOPS_START (Reg: 164) in the eMMC datasheet for more details."
msgstr ""

msgid "Meaning of Register BKOPS_EN (Reg: 163) Bit MANUAL_EN (Bit 0):"
msgstr ""

msgid "Value 0: The host does not support the manual trigger of BKOPS. Device write performance suffers."
msgstr ""

msgid "Value 1: The host does support the manual trigger of BKOPS. It will issue BKOPS from time to time when it does not need the device."
msgstr ""

msgid "The mechanism to issue background operations has been implemented in the Linux kernel since v3.7. You only have to enable BKOPS_EN on the eMMC device (see below for details)."
msgstr ""

msgid "The JEDEC standard v5.1 introduces a new automatic BKOPS feature. It frees the host to trigger the background operations regularly because the device starts BKOPS itself when it is idle (see the description of bit AUTO_EN in register BKOPS_EN (Reg: 163))."
msgstr ""

msgid "To check whether *BKOPS_EN* is set, execute:"
msgstr ""

msgid "The output will be, for example:"
msgstr ""

msgid "Where value 0x00 means BKOPS_EN is disabled and device write performance suffers. Where value 0x01 means BKOPS_EN is enabled and the host will issue background operations from time to time."
msgstr ""

msgid "Enabling can be done with this command:"
msgstr ""

msgid "To set the BKOPS_EN bit, execute:"
msgstr ""

msgid "To ensure that the new setting is taken over and the kernel triggers BKOPS by itself, shut down the system:"
msgstr ""

msgid "The BKOPS_EN bit is one-time programmable only. It cannot be reversed."
msgstr ""

msgid "Reliable Write"
msgstr ""

msgid "There are two different Reliable Write options:"
msgstr ""

msgid "Reliable Write option for a whole eMMC device/partition."
msgstr ""

msgid "Reliable Write for single write transactions."
msgstr ""

msgid "Do not confuse eMMC partitions with partitions of a DOS, MBR, or GPT partition table (see the previous section)."
msgstr ""

msgid "The first Reliable Write option is mostly already enabled on the eMMCs mounted on the phyCORE-|soc| SoMs. To check this on the running target:"
msgstr ""

msgid "Otherwise, it can be enabled with the mmc tool:"
msgstr ""

msgid "The second Reliable Write option is the configuration bit Reliable Write Request parameter (bit 31) in command CMD23. It has been used in the kernel since v3.0 by file systems, e.g. ext4 for the journal and user space applications such as fdisk for the partition table. In the Linux kernel source code, it is handled via the flag REQ_META."
msgstr ""

msgid "**Conclusion**: ext4 file system with mount option data=journal should be safe against power cuts. The file system check can recover the file system after a power failure, but data that was written just before the power cut may be lost. In any case, a consistent state of the file system can be recovered. To ensure data consistency for the files of an application, the system functions fdatasync or fsync should be used in the application."
msgstr ""

msgid "Resizing ext4 Root Filesystem"
msgstr ""

msgid "When flashing the sdcard image to eMMC the ext4 root partition is not extended to the end of the eMMC. parted can be used to expand the root partition. The example works for any block device such as eMMC, SD card, or hard disk."
msgstr ""

msgid "Get the current device size:"
msgstr ""

msgid "The output looks like this:"
msgstr ""

msgid "Use parted to resize the root partition to the max size of the device:"
msgstr ""

msgid "Resize the filesystem to a new partition size:"
msgstr ""

msgid "Increasing the filesystem size can be done while it is mounted.  But you can also boot the board from an SD card and then resize the file system on the eMMC partition while it is not mounted."
msgstr ""

msgid "Enable pseudo-SLC Mode"
msgstr ""

msgid "eMMC devices use MLC or TLC (https://en.wikipedia.org/wiki/Multi-level_cell) to store the data. Compared with SLC used in NAND Flash, MLC or TLC have lower reliability and a higher error rate at lower costs."
msgstr ""

msgid "If you prefer reliability over storage capacity, you can enable the pseudo-SLC mode or SLC mode. The method used here employs the enhanced attribute, described in the JEDEC standard, which can be set for continuous regions of the device. The JEDEC standard does not specify the implementation details and the guarantees of the enhanced attribute. This is left to the chipmaker. For the Micron chips, the enhanced attribute increases the reliability but also halves the capacity."
msgstr ""

msgid "When enabling the enhanced attribute on the device, all data will be lost."
msgstr ""

msgid "The following sequence shows how to enable the enhanced attribute."
msgstr ""

msgid "First obtain the current size of the eMMC device with:"
msgstr ""

msgid "You will receive:"
msgstr ""

msgid "As you can see this device has 63652757504 Byte = 60704 MiB."
msgstr ""

msgid "To get the maximum size of the device after pseudo-SLC is enabled use:"
msgstr ""

msgid "which shows, for example:"
msgstr ""

msgid "Here the maximum size is 3719168 KiB = 3632 MiB."
msgstr ""

msgid "Now, you can set enhanced attribute for the whole device, e.g. 3719168 KiB, by typing:"
msgstr ""

msgid "You will get:"
msgstr ""

msgid "To ensure that the new setting has taken over, shut down the system:"
msgstr ""

msgid "and perform a power cycle. It is recommended that you verify the settings now."
msgstr ""

msgid "First, check the value of ENH_SIZE_MULT which must be 3719168 KiB:"
msgstr ""

msgid "You should receive::"
msgstr ""

msgid "Finally, check the size of the device:"
msgstr ""

msgid "Erasing the Device"
msgstr ""

msgid "It is possible to erase the eMMC device directly rather than overwriting it with zeros. The eMMC block management algorithm will erase the underlying MLC or TLC or mark these blocks as discard. The data on the device is lost and will be read back as zeros."
msgstr ""

msgid "After booting from SD Card execute:"
msgstr ""

msgid "The option --secure ensures that the command waits until the eMMC device has erased all blocks. The -f (force) option disables all checking before erasing and it is needed when the eMMC device contains existing partitions with data."
msgstr ""

msgid "also destroys all information on the device, but this command is bad for wear leveling and takes much longer!"
msgstr ""

msgid "eMMC Boot Partitions"
msgstr ""

msgid "An eMMC device contains four different hardware partitions: user, boot1, boot2, and rpmb."
msgstr ""

msgid "The user partition is called the User Data Area in the JEDEC standard and is the main storage partition. The partitions boot1 and boot2 can be used to host the bootloader and are more reliable. Which partition the |soc| uses to load the bootloader is controlled by the boot configuration of the eMMC device. The partition rpmb is a small partition and can only be accessed via a trusted mechanism."
msgstr ""

msgid "Furthermore, the user partition can be divided into four user-defined General Purpose Area Partitions. An explanation of this feature exceeds the scope of this document. For further information, see the JEDEC Standard Chapter 7.2 Partition Management."
msgstr ""

msgid "Do not confuse eMMC partitions with partitions of a DOS, MBR, or GPT partition table."
msgstr ""

msgid "The current PHYTEC BSP does not use the extra partitioning feature of eMMC devices. The U-Boot is flashed at the beginning of the user partition. The U-Boot environment is placed at a fixed location after the U-Boot. An MBR partition table is used to create two partitions, a FAT32 boot, and ext4 rootfs partition. They are located right after the U-Boot and the U-Boot environment. The FAT32 boot partition contains the kernel and device tree."
msgstr ""

msgid "With eMMC flash storage it is possible to use the dedicated boot partitions for redundantly storing the bootloader. The U-Boot environment still resides in the user area before the first partition. The user area also still contains the bootloader which the image first shipped during its initialization process. Below is an example, to flash the bootloader to one of the two boot partitions and switch the boot device via userspace commands."
msgstr ""

msgid "Via userspace Commands"
msgstr ""

msgid "On the host, run:"
msgstr ""

msgid "The partitions boot1 and boot2 are read-only by default. To write to them from user space, you have to disable force_ro in the sysfs."
msgstr ""

msgid "To manually write the bootloader to the eMMC boot partitions, first disable the write protection:"
msgstr ""

msgid "Write the bootloader to the eMMC boot partitions:"
msgstr ""

msgid "The following table is for the offset of the |soc| SoC:"
msgstr ""

msgid "Bootloader Filename"
msgstr ""

msgid "0 kiB"
msgstr ""

msgid "imx-boot"
msgstr ""

msgid "After that set the boot partition from user space using the mmc tool:"
msgstr ""

msgid "(for 'boot0') :"
msgstr ""

msgid "(for 'boot1') :"
msgstr ""

msgid "To disable booting from the eMMC boot partitions simply enter the following command:"
msgstr ""

msgid "To choose back to the user area u-boot environment:"
msgstr ""

msgid "fdisk can be used to expand the root filesystem. The example works for any block device such as eMMC, SD Card, or hard disk."
msgstr ""

msgid "The output looks like:"
msgstr ""

msgid "Use fdisk to delete and create a partition with a max size of the device:"
msgstr ""

msgid "Increasing the file system size can be done while it is mounted. An online resizing operation is performed. But you can also boot the board from an SD card and then resize the file system on the eMMC partition while it is not mounted. Furthermore, the board has to be rebooted so that the new partition table will be read."
msgstr ""

msgid "SPI Master"
msgstr ""

msgid "The |soc| controller has a FlexSPI and an ECSPI IP core included. The FlexSPI host controller supports two SPI channels with up to 4 devices. Each channel supports Single/Dual/Quad/Octal mode data transfer (1/2/4/8 bidirectional data lines). The ECSPI controller supports 3 SPI interfaces with one dedicated chip selected for each interface. As chip selects should be realized with GPIOs, more than one device on each channel is possible."
msgstr ""

msgid "SPI NOR Flash"
msgstr ""

msgid "phyCORE-|soc| is equipped with a QSPI NOR Flash which connects to the |soc|'s FlexSPI interface. The QSPI NOR Flash is suitable for booting. Please see different sections for flashing and bootmode setup. Due to limited space on the SPI NOR Flash, only the bootloader is stored inside. By default, the kernel, device tree, and rootfs are taken from eMMC."
msgstr ""

msgid "The Bootloader does detect with the help of the EEPROM Introspection data if an SPI flash is mounted or not. If no SPI flash is mounted a device tree overlay is applied with the expansion command to disable the SPI flash device tree node during boot. If no introspection data is available the SPI NOR flash node is always enabled. Find more information in the device tree overlay section."
msgstr ""

msgid "The bootloader also passes the SPI MTD partition table to Linux by fixing up the device tree based on the mtdparts boot parameter. The default partition layout in the BSP is set to:"
msgstr ""

msgid "This is a bootloader environment variable that is defined here and can be changed during runtime. From Linux userspace, the NOR Flash partitions are accessible via /dev/mtd<N> devices where <N> is the MTD device number associated with the NOR flash partition to access. To find the correct MTD device number for a partition, run on the target:"
msgstr ""

msgid "It lists all MTD devices and the corresponding partition names. The flash node is defined inside of the SPI master node in the module DTS. The SPI node contains all devices connected to this SPI bus which is in this case only the SPI NOR Flash."
msgstr ""

msgid "The definition of the SPI master node in the device tree can be found here:"
msgstr ""

msgid ":linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phycore-som.dtsi#L77`"
msgstr ""

msgid "GPIOs"
msgstr ""

msgid "The |sbc| has a set of pins especially dedicated to user I/Os. Those pins are connected directly to |soc| pins and are muxed as GPIOs. They are directly usable in Linux userspace. The processor has organized its GPIOs into five banks of 32 GPIOs each (GPIO1 – GPIO5) GPIOs. gpiochip0, gpiochip32, gpiochip64, gpiochip96, and gpiochip128 are the sysfs representation of these internal |soc| GPIO banks GPIO1 – GPIO5."
msgstr ""

msgid "The GPIOs are identified as GPIO<X>_<Y> (e.g. GPIO5_07). <X> identifies the GPIO bank and counts from 1 to 5, while <Y> stands for the GPIO within the bank. <Y> is being counted from 0 to 31 (32 GPIOs on each bank)."
msgstr ""

msgid "By contrast, the Linux kernel uses a single integer to enumerate all available GPIOs in the system. The formula to calculate the right number is:"
msgstr ""

msgid "Accessing GPIOs from userspace will be done using the libgpiod. It provides a library and tools for interacting with the Linux GPIO character device. Examples of some usages of various tools:"
msgstr ""

msgid "Detecting the gpiochips on the chip:"
msgstr ""

msgid "Show detailed information about the gpiochips. Like their names, consumers, direction, active state, and additional flags:"
msgstr ""

msgid "Read the value of a GPIO (e.g GPIO 20 from chip0):"
msgstr ""

msgid "Set the value of GPIO 20 on chip0 to 0 and exit tool:"
msgstr ""

msgid "Help text of gpioset shows possible options:"
msgstr ""

msgid "Some of the user IOs are used for special functions. Before using a user IO, refer to the schematic or the hardware manual of your board to ensure that it is not already in use."
msgstr ""

msgid "GPIOs via sysfs"
msgstr ""

msgid "Accessing gpios via sysfs is deprecated and we encourage to use libgpiod instead."
msgstr ""

msgid "Support to access GPIOs via sysfs is not enabled by default any more. It is only possible with manually enabling ``CONFIG_GPIO_SYSFS`` in the kernel configuration. To make ``CONFIG_GPIO_SYSFS`` visible in menuconfig the option ``CONFIG_EXPERT`` has to be enabled first."
msgstr ""

msgid "You can also add this option for example to the defconfig you use in ``arch/arm64/configs/`` in the linux kernel sources. For our NXP based releases, this could be for example |kernel-defconfig|::"
msgstr ""

msgid "Otherwise you can create a new config fragment. This is described in our |yocto-ref-manual-kernel-and-bootloader-conf|."
msgstr ""

msgid "Pinmuxing of some GPIO pins in the device tree |dt-carrierboard|.dts:"
msgstr ""

msgid "LEDs"
msgstr ""

msgid "If any LEDs are connected to GPIOs, you have the possibility to access them by a special LED driver interface instead of the general GPIO interface (section GPIOs). You will then access them using ``/sys/class/leds/`` instead of ``/sys/class/gpio/``. The maximum brightness of the LEDs can be read from the ``max_brightness`` file. The brightness file will set the brightness of the LED (taking a value from 0 up to max_brightness). Most LEDs do not have hardware brightness support and will just be turned on by all non-zero brightness settings."
msgstr ""

msgid "Below is a simple example."
msgstr ""

msgid "To get all available LEDs, type:"
msgstr ""

msgid "Here the LEDs blue-mmc, green-heartbeat, and red-emmc are on the |sbc|."
msgstr ""

msgid "To toggle the LEDs ON:"
msgstr ""

msgid "To toggle OFF:"
msgstr ""

msgid "Device tree configuration for the User I/O configuration can be found here: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phyboard-polis-rdk.dts#L47`"
msgstr ""

msgid "I²C Bus"
msgstr ""

msgid "The |soc| contains several Multimaster fast-mode I²C modules. PHYTEC boards provide plenty of different I²C devices connected to the I²C modules of the |soc|. This section describes the basic device usage and its DT representation of some I²C devices integrated into our |sbc|."
msgstr ""

msgid "The device tree node for i2c contains settings such as clock-frequency to set the bus frequency and the pin control settings including scl-gpios and sda-gpios which are alternate pin configurations used for bus recovery."
msgstr ""

msgid "General I²C1 bus configuration (e.g. |dt-som|.dtsi): :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phycore-som.dtsi#L105`"
msgstr ""

msgid "General I²C4 bus configuration (e.g. |dt-carrierboard|.dts): :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phyboard-polis-rdk.dts#L246`"
msgstr ""

msgid "EEPROM"
msgstr ""

msgid "On the |som| there is an i2c EEPROM flash populated. It has two addresses. The main EEPROM space (bus: I2C-0 address: 0x51) can be accessed via the sysfs interface in Linux. The first 256 bytes of the main EEPROM and the ID-page (bus: I2C-0 address: 0x59) are used for board detection and must not be overwritten. Therefore the ID-page can not be accessed via the sysfs interface. Overwriting reserved spaces will result in boot issues."
msgstr ""

msgid "If you deleted reserved EEPROM spaces, please contact our support!"
msgstr ""

msgid "I2C EEPROM on |som|"
msgstr ""

msgid "The EEPROM ID page (bus: I2C-0 addr: 0x59) and the first 256 bytes of the normal EEPROM area (bus: I2C-0 addr: 0x51) should not be erased or overwritten. As this will influence the behavior of the bootloader. The board might not boot correctly anymore."
msgstr ""

msgid "The I2C EEPROM on the |som| SoM is connected to I2C address 0x51 on the I2C-0 bus. It is possible to read and write directly to the device populated:"
msgstr ""

msgid "To read and print the first 1024 bytes of the EEPROM as a hex number, execute:"
msgstr ""

msgid "To fill the 4KiB EEPROM (bus: I2C-0 addr: 0x51) with zeros leaving out the EEPROM data use:"
msgstr ""

msgid "EEPROM SoM Detection"
msgstr ""

msgid "The I2C EEPROM, populated on the |som|, has a separate ID page that is addressable over I2C address 0x59 on bus 0 and a normal area that is addressable over I2C address 0x51 on bus 0. PHYTEC uses this data area of 32 Bytes to store information about the SoM. This includes PCB revision and mounting options."
msgstr ""

msgid "The EEPROM data is read at a really early stage during startup. It is used to select the correct RAM configuration. This makes it possible to use the same bootloader image for different RAM sizes and choose the correct DTS overlays automatically."
msgstr ""

msgid "If the EEPROM ID page data and the first 256 bytes of the normal area are deleted, the bootloader will fall back to the |som| Kit RAM setup, which is |kit-ram-size| RAM."
msgstr ""

msgid "SoMs that are flashed with data format API revision 2 will print out information about the module in the early stage."
msgstr ""

msgid "DT representation, e.g. in phyCORE-|soc| file |dt-som|.dtsi can be found in our PHYTEC git: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phycore-som.dtsi#L278`"
msgstr ""

msgid "RTC"
msgstr ""

msgid "RTCs can be accessed via ``/dev/rtc*``. Because PHYTEC boards have often more than one RTC, there might be more than one RTC device file."
msgstr ""

msgid "To find the name of the RTC device, you can read its sysfs entry with:"
msgstr ""

msgid "You will get, for example:"
msgstr ""

msgid "This will list all RTCs including the non-I²C RTCs. Linux assigns RTC device IDs based on the device tree/aliases entries if present."
msgstr ""

msgid "Date and time can be manipulated with the ``hwclock`` tool and the date command. To show the current date and time set on the target:"
msgstr ""

msgid "Change the date and time with the date command. The date command sets the time with the following syntax \"YYYY-MM-DD hh:mm:ss (+|-)hh:mm\":"
msgstr ""

msgid "Your timezone (in this example +0100) may vary."
msgstr ""

msgid "Using the date command does not change the time and date of the RTC, so if we were to restart the target those changes would be discarded. To write to the RTC we need to use the ``hwclock`` command. Write the current date and time (set with the date command) to the RTC using the ``hwclock`` tool and reboot the target to check if the changes were applied to the RTC:"
msgstr ""

msgid "To set the time and date from the RTC use:"
msgstr ""

msgid "RTC Wakealarm"
msgstr ""

msgid "It is possible to issue an interrupt from the RTC to wake up the system. The format uses the Unix epoch time, which is the number of seconds since UTC midnight on 1 January 1970. To wake up the system after 4 minutes from suspend to ram state, type:"
msgstr ""

msgid "Internally the wake alarm time will be rounded up to the next minute since the alarm function doesn't support seconds."
msgstr ""

msgid "RTC Parameters"
msgstr ""

msgid "RTCs have a few abilities which can be read/set with the help of ``hwclock`` tool."
msgstr ""

msgid "We can check RTC supported features with:"
msgstr ""

msgid "What this value means is encoded in kernel, each set bit translates to:"
msgstr ""

msgid "We can check RTC BSM (Backup Switchover Mode) with:"
msgstr ""

msgid "We can set RTC BSM with:"
msgstr ""

msgid "What BSM values mean translates to these values:"
msgstr ""

msgid "You should set BSM mode to DSM or LSM for RTC to switch to backup power source when the initial power source is not available. Check **RV-3028** RTC datasheet to read what LSM (Level Switching Mode) and DSM (Direct Switching Mode) actually mean."
msgstr ""

msgid "DT representation for I²C RTCs: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phycore-som.dtsi#L286`"
msgstr ""

msgid "USB Host Controller"
msgstr ""

msgid "The USB controller of the |soc| SoC provides a low-cost connectivity solution for numerous consumer portable devices by providing a mechanism for data transfer between USB devices with a line/bus speed up to 480 Mbps (HighSpeed 'HS'). The USB subsystem has two independent USB controller cores. Both cores are On-The-Go (OTG) controller cores and are capable of acting as a USB peripheral device or a USB host. Each is connected to a USB 2.0 PHY."
msgstr ""

msgid "The unified BSP includes support for mass storage devices and keyboards. Other USB-related device drivers must be enabled in the kernel configuration on demand. Due to udev, all mass storage devices connected get unique IDs and can be found in ``/dev/disk/by-id``. These IDs can be used in ``/etc/fstab`` to mount the different USB memory devices in different ways."
msgstr ""

msgid "User USB2 (host) configuration is in the kernel device tree |dt-carrierboard|.dts:"
msgstr ""

msgid "DT representation for USB Host: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phyboard-polis-rdk.dts#L353`"
msgstr ""

msgid "USB OTG"
msgstr ""

msgid "Most PHYTEC boards provide a USB OTG interface. USB OTG ports automatically act as a USB device or USB host. The mode depends on the USB hardware attached to the USB OTG port. If, for example, a USB mass storage device is attached to the USB OTG port, the device will show up as ``/dev/sda``."
msgstr ""

msgid "USB Device"
msgstr ""

msgid "In order to connect the board's USB device to a USB host port (for example a PC), you need to configure the appropriate USB gadget. With USB configfs you can define the parameters and functions of the USB gadget. The BSP includes USB configfs support as a kernel module."
msgstr ""

msgid "**Example**:"
msgstr ""

msgid "First, define the parameters such as the USB vendor and product IDs, and set the information strings for the English (0x409) language:"
msgstr ""

msgid "To save time, copy these commands and execute them in a script"
msgstr ""

msgid "Next, create a file for the mass storage gadget:"
msgstr ""

msgid "Now you should create the functions you want to use:"
msgstr ""

msgid "*acm*: Serial gadget, creates serial interface like ``/dev/ttyGS0``."
msgstr ""

msgid "*ecm*: Ethernet gadget, creates ethernet interface, e.g. usb0"
msgstr ""

msgid "*mass_storage*: The host can partition, format, and mount the gadget mass storage the same way as any other USB mass storage."
msgstr ""

msgid "Bind the defined functions to a configuration:"
msgstr ""

msgid "Finally, start the USB gadget with the following commands:"
msgstr ""

msgid "If your system has more than one USB Device or OTG port, you can pass the right one to the USB Device Controller (UDC)."
msgstr ""

msgid "To stop the USB gadget and unbind the used functions, execute:"
msgstr ""

msgid "Both USB interfaces are configured as host in the kernel device tree |dt-carrierboard|.dts. See: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phyboard-polis-rdk.dts#L342`"
msgstr ""

msgid "CAN FD"
msgstr ""

msgid "The |sbc| has one CAN interface supporting CAN FD. It is supported by the Linux standard CAN framework which builds upon then the Linux network layer. Using this framework, the CAN interfaces behave like an ordinary Linux network device, with some additional features special to CAN. More information can be found in the Linux Kernel documentation: https://www.kernel.org/doc/html/latest/networking/can.html"
msgstr ""

msgid "phyBOARD-Polis has an external CANFD chip MCP2518FD connected over SPI. There are different interfaces involved, which limits the datarate capabilities of CANFD."
msgstr ""

msgid "On phyBOARD-Polis-i.MX8MM a terminating resistor can be enabled by setting S5 to ON if required."
msgstr ""

msgid "Use:"
msgstr ""

msgid "to see the state of the interfaces. The two CAN interfaces should show up as can0 and can1."
msgstr ""

msgid "To get information on can0, such as bit rate and error counters, type:"
msgstr ""

msgid "The information for can0 will look like:"
msgstr ""

msgid "The output contains a standard set of parameters also shown for Ethernet interfaces, so not all of these are necessarily relevant for CAN (for example the MAC address). The following output parameters contain useful information:"
msgstr ""

msgid "can0"
msgstr ""

msgid "Interface Name"
msgstr ""

msgid "NOARP"
msgstr ""

msgid "CAN cannot use ARP protocol"
msgstr ""

msgid "MTU"
msgstr ""

msgid "Maximum Transfer Unit"
msgstr ""

msgid "RX packets"
msgstr ""

msgid "Number of Received Packets"
msgstr ""

msgid "TX packets"
msgstr ""

msgid "Number of Transmitted Packets"
msgstr ""

msgid "RX bytes"
msgstr ""

msgid "Number of Received Bytes"
msgstr ""

msgid "TX bytes"
msgstr ""

msgid "Number of Transmitted Bytes"
msgstr ""

msgid "errors..."
msgstr ""

msgid "Bus Error Statistics"
msgstr ""

msgid "The CAN configuration is done in the systemd configuration file ``/lib/systemd/network/can0.network``. For a persistent change of (as an example, the default bitrates), change the configuration in the BSP under ``./meta-ampliphy/recipes-core/systemd/systemd-conf/can0.network`` in the root filesystem and rebuild the root filesystem."
msgstr ""

msgid "The bitrate can also be changed manually, for example, to make use of the flexible bitrate:"
msgstr ""

msgid "You can send messages with cansend or receive messages with candump:"
msgstr ""

msgid "To generate random CAN traffic for testing purposes, use cangen:"
msgstr ""

msgid "``cansend --help`` and ``candump --help`` provide help messages for further information on options and usage."
msgstr ""

msgid "The mcp2518fd SPI to CANfd supports only baudrates starting from 125kB/s. Slower rates can be selected but may not work correctly."
msgstr ""

msgid "Device Tree CAN configuration of |dt-carrierboard|.dts: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phyboard-polis-rdk.dts#L178`"
msgstr ""

msgid "PCIe"
msgstr ""

msgid "The phyCORE-|soc| has one Mini-PCIe slot. In general, PCIe autodetects new devices on the bus. After connecting the device and booting up the system, you can use the command lspci to see all PCIe devices recognized."
msgstr ""

msgid "Type:"
msgstr ""

msgid "In this example, the PCIe device is the *Intel Corporation WiFi Link 5100*."
msgstr ""

msgid "For PCIe devices, you have to enable the correct driver in the kernel configuration. This WLAN card, for example, is manufactured by Intel. The option for the driver, which must be enabled, is named ``CONFIG_IWLWIFI`` and can be found under *Intel Wireless WiFi Next Gen AGN - Wireless-N/Advanced-N/Ultimat* in the kernel configuration."
msgstr ""

msgid "In order to activate the driver, follow the instructions from our |yocto-ref-manual-kernel-and-bootloader-conf|."
msgstr ""

msgid "The linux-imx is represented by: **virtual/kernel**"
msgstr ""

msgid "For some devices like the WLAN card, additional binary firmware blobs are needed. These firmware blobs have to be placed in ``/lib/firmware/`` before the device can be used."
msgstr ""

msgid "For example, if you try to bring up the network interface:"
msgstr ""

msgid "You will get the following output on the serial console:"
msgstr ""

msgid "Some PCIe devices, e.g. the Ethernet card, may function properly even if no firmware blob is loaded from ``/lib/firmware/`` and you received an error message as shown in the first line of the output above. This is because some manufacturers provide the firmware as a fallback on the card itself. In this case, the behavior and output depend strongly on the manufacturer's firmware."
msgstr ""

msgid "Device Tree PCIe configuration of |dt-carrierboard|.dts: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phyboard-polis-rdk.dts#L260`"
msgstr ""

msgid "Audio"
msgstr ""

msgid "The PEB-AV-10-Connector exists in two versions and the 1531.1 version is populated with a TI TLV320AIC3007 audio codec. Audio support is done via the I2S interface and controlled via I2C."
msgstr ""

msgid "There is a 3.5mm headset jack with OMTP standard and an 8-pin header to connect audio devices with the AV-Connector.  The 8-pin header contains a mono speaker, headphones, and line-in signals."
msgstr ""

msgid "To check if your soundcard driver is loaded correctly and what the device is called, type for playback devices:"
msgstr ""

msgid "Or type for recording devices:"
msgstr ""

msgid "Alsamixer"
msgstr ""

msgid "To inspect the capabilities of your soundcard, call:"
msgstr ""

msgid "You should see a lot of options as the audio-IC has many features you can experiment with. It might be better to open alsamixer via ssh instead of the serial console, as the console graphical effects are better. You have either mono or stereo gain controls for all mix points. \"MM\" means the feature is muted (both output, left & right), which can be toggled by hitting '**m**'. You can also toggle by hitting '**<**' for left and '**>**' for right output. With the **tab** key, you can switch between controls for playback and recording."
msgstr ""

msgid "Restore default volumes"
msgstr ""

msgid "There are some default settings stored in ``/var/lib/alsa/asound.state``. You can save your current alsa settings with:"
msgstr ""

msgid "You can restore saved alsa settings with:"
msgstr ""

msgid "ALSA configuration"
msgstr ""

msgid "Our BSP comes with a ALSA configuration file ``/etc/asound.conf``."
msgstr ""

msgid "The ALSA configuration file can be edited as desired or deleted since it is not required for ALSA to work properly."
msgstr ""

msgid "To set PEB-AV-10 as output, set *playback.pcm* from \"dummy\" to \"pebav10\":"
msgstr ""

msgid "If the sound is not audible change playback devices to the software volume control playback devices, set *playback.pcm* to the respective softvol playback device e.g. \"softvol_pebav10\". Use alsamixer controls to vary the volume levels."
msgstr ""

msgid "Pulseaudio Configuration"
msgstr ""

msgid "For applications using *Pulseaudio*, check for available sinks:"
msgstr ""

msgid "To select the output device, type:"
msgstr ""

msgid "Playback"
msgstr ""

msgid "Run speaker-test to check playback availability:"
msgstr ""

msgid "To playback simple audio streams, you can use aplay. For example to play the ALSA test sounds:"
msgstr ""

msgid "To playback other formats like mp3 for example, you can use Gstreamer:"
msgstr ""

msgid "Capture"
msgstr ""

msgid "``arecord`` is a command-line tool for capturing audio streams which use Line In as the default input source. To select a different audio source you can use ``alsamixer``. For example, switch on *Right PGA Mixer Mic3R* and *Left PGA Mixer Mic3R* in order to capture the audio from the microphone input of the TLV320-Codec using the 3.5mm jack."
msgstr ""

msgid "Since playback and capture share hardware interfaces, it is not possible to use different sampling rates and formats for simultaneous playback and capture operations."
msgstr ""

msgid "Device Tree Audio configuration: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phyboard-polis-peb-av-10.dtso#L52`"
msgstr ""

msgid "Video"
msgstr ""

msgid "Videos with Gstreamer"
msgstr ""

msgid "One example video is installed by default in the BSP at `/usr/share/qtphy/videos/`. Start the video playback with one of these commands:"
msgstr ""

msgid "Or:"
msgstr ""

msgid "Display"
msgstr ""

msgid "The 10\" Display is always active. If the PEB-AV-Connector is not connected, an error message may occur at boot."
msgstr ""

msgid "Qt Demo"
msgstr ""

msgid "With the ``phytec-qt6demo-image``, Weston starts during boot. Our Qt6 demo application named \"qtphy\" can be stopped with:"
msgstr ""

msgid "To start the demo again, run:"
msgstr ""

msgid "To disable autostart of the demo, run:"
msgstr ""

msgid "To enable autostart of the demo, run:"
msgstr ""

msgid "Weston can be stopped with:"
msgstr ""

msgid "The Qt demo must be closed before Weston can be closed."
msgstr ""

msgid "Backlight Control"
msgstr ""

msgid "If a display is connected to the PHYTEC board, you can control its backlight with the Linux kernel sysfs interface. All available backlight devices in the system can be found in the folder /sys/class/backlight. Reading the appropriate files and writing to them allows you to control the backlight."
msgstr ""

msgid "Some boards with multiple display connectors might have multiple backlight controls in /sys/class/backlight. For example: backlight0 and backlight1"
msgstr ""

msgid "To get, for example, the maximum brightness level (max_brightness) execute:"
msgstr ""

msgid "Valid brightness values are 0 to <max_brightness>."
msgstr ""

msgid "To obtain the current brightness level, type:"
msgstr ""

msgid "Write to the file brightness to change the brightness:"
msgstr ""

msgid "turns the backlight off for example."
msgstr ""

msgid "For documentation of all files, see https://www.kernel.org/doc/Documentation/ABI/stable/sysfs-class-backlight."
msgstr ""

msgid "The device tree of PEB-AV-10 can be found here: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx8mm-phyboard-polis-peb-av-10.dtso`"
msgstr ""

msgid "Power Management"
msgstr ""

msgid "CPU Core Frequency Scaling"
msgstr ""

msgid "The CPU in the |soc| SoC is able to scale the clock frequency and the voltage. This is used to save power when the full performance of the CPU is not needed. Scaling the frequency and the voltage is referred to as 'Dynamic Voltage and Frequency Scaling' (DVFS). The |soc| BSP supports the DVFS feature. The Linux kernel provides a DVFS framework that allows each CPU core to have a min/max frequency and a governor that governs it. Depending on the |socfamily| variant used, several different frequencies are supported."
msgstr ""

msgid "Although the DVFS framework provides frequency settings for each CPU core, a change in the frequency settings of one CPU core always affects all other CPU cores too. So all CPU cores always share the same DVFS setting. An individual DVFS setting for each core is not possible."
msgstr ""

msgid "To get a complete list type:"
msgstr ""

msgid "In case you have, for example, i.MX 8MPlus CPU with a maximum of approximately 1,6 GHz, the result will be:"
msgstr ""

msgid "To ask for the current frequency type:"
msgstr ""

msgid "So-called governors are automatically selecting one of these frequencies in accordance with their goals."
msgstr ""

msgid "List all governors available with the following command:"
msgstr ""

msgid "The result will be:"
msgstr ""

msgid "**conservative** is much like the ondemand governor. It differs in behavior in that it gracefully increases and decreases the CPU speed rather than jumping to max speed the moment there is any load on the CPU."
msgstr ""

msgid "**ondemand** (default) switches between possible CPU core frequencies in reference to the current system load. When the system load increases above a specific limit, it increases the CPU core frequency immediately."
msgstr ""

msgid "**powersave** always selects the lowest possible CPU core frequency."
msgstr ""

msgid "**performance** always selects the highest possible CPU core frequency."
msgstr ""

msgid "**userspace** allows the user or userspace program running as root to set a specific frequency (e.g. to 1600000). Type:"
msgstr ""

msgid "In order to ask for the current governor, type:"
msgstr ""

msgid "You will normally get:"
msgstr ""

msgid "Switching over to another governor (e.g. userspace) is done with:"
msgstr ""

msgid "Now you can set the speed:"
msgstr ""

msgid "For more detailed information about the governors, refer to the Linux kernel documentation in the linux kernel repository at ``Documentation/admin-guide/pm/cpufreq.rst``."
msgstr ""

msgid "CPU Core Management"
msgstr ""

msgid "The |soc| SoC can have multiple processor cores on the die. The |soc|, for example, has 4 ARM Cores which can be turned on and off individually at runtime."
msgstr ""

msgid "To see all available cores in the system, execute:"
msgstr ""

msgid "This will show, for example:"
msgstr ""

msgid "Here the system has four processor cores. By default, all available cores in the system are enabled to get maximum performance."
msgstr ""

msgid "To switch off a single-core, execute:"
msgstr ""

msgid "As confirmation, you will see:"
msgstr ""

msgid "Now the core is powered down and no more processes are scheduled on this core."
msgstr ""

msgid "You can use top to see a graphical overview of the cores and processes:"
msgstr ""

msgid "To power up the core again, execute:"
msgstr ""

msgid "Suspend to RAM"
msgstr ""

msgid "The |som| supports basic suspend and resume. Different wake-up sources can be used. Suspend/resume is possible with:"
msgstr ""

msgid "To wake up with serial console run"
msgstr ""

msgid "Thermal Management"
msgstr ""

msgid "U-Boot"
msgstr ""

msgid "The previous temperature control in the U-Boot was not satisfactory. Now the u-boot has a temperature shutdown to prevent the board from getting too hot during booting. The temperatures at which the shutdown occurs are identical to those in the kernel."
msgstr ""

msgid "The individual temperature ranges with the current temperature are displayed in the boot log:"
msgstr ""

msgid "Kernel"
msgstr ""

msgid "The Linux kernel has integrated thermal management that is capable of monitoring SoC temperatures, reducing the CPU frequency, driving fans, advising other drivers to reduce the power consumption of devices, and – worst-case – shutting down the system gracefully (https://www.kernel.org/doc/Documentation/thermal/sysfs-api.txt)."
msgstr ""

msgid "This section describes how the thermal management kernel API is used for the |soc| SoC platform. The |socfamily| has internal temperature sensors for the SoC."
msgstr ""

msgid "The current temperature can be read in millicelsius with:"
msgstr ""

msgid "There are two trip points registered by the imx_thermal kernel driver. These differ depending on the CPU variant. A distinction is made between Industrial and Commercial."
msgstr ""

msgid "Commercial"
msgstr ""

msgid "Industrial"
msgstr ""

msgid "passive (warning)"
msgstr ""

msgid "85°C"
msgstr ""

msgid "95°C"
msgstr ""

msgid "critical (shutdown)"
msgstr ""

msgid "90°C"
msgstr ""

msgid "100°C"
msgstr ""

msgid "(see kernel sysfs folder ``/sys/class/thermal/thermal_zone0/``)"
msgstr ""

msgid "The kernel thermal management uses these trip points to trigger events and change the cooling behavior. The following thermal policies (also named thermal governors) are available in the kernel: Step Wise, Fair Share, Bang Bang, and Userspace. The default policy used in the BSP is step_wise. If the value of the SoC temperature in the sysfs file temp is above *trip_point_0*, the CPU frequency is set to the lowest CPU frequency. When the SoC temperature drops below *trip_point_0* again, the throttling is released."
msgstr ""

msgid "The actual values of the thermal trip points may differ since we mount CPUs with different temperature grades."
msgstr ""

msgid "GPIO Fan"
msgstr ""

msgid "|pollux-fan-note|"
msgstr ""

msgid "A GPIO fan can be connected to the |sbc|-|soc|. The SoC only contains one temperature sensor which is already used by the thermal frequency scaling. The fan can not be controlled by the kernel. We use lmsensors with hwmon for this instead. lmsensors reads the temperature periodically and enables or disables the fan at a configurable threshold. For the |sbc|-|soc|, this is 60°C."
msgstr ""

msgid "The settings can be configured in the configuration file:"
msgstr ""

msgid "Fan control is started by a systemd service during boot. This can be disabled with:"
msgstr ""

msgid "Watchdog"
msgstr ""

msgid "The PHYTEC |soc| modules include a hardware watchdog that is able to reset the board when the system hangs. The watchdog is started on default in U-Boot with a timeout of 60s. So even during early kernel start, the watchdog is already up and running. The Linux kernel driver takes control over the watchdog and makes sure that it is fed. This section explains how to configure the watchdog in Linux using systemd to check for system hangs and during reboot."
msgstr ""

msgid "Watchdog Support in systemd"
msgstr ""

msgid "Systemd has included hardware watchdog support since version 183."
msgstr ""

msgid "To activate watchdog support, the file system.conf in ``/etc/systemd/`` has to be adapted by enabling the options:"
msgstr ""

msgid "*RuntimeWatchdogSec* defines the timeout value of the watchdog, while *ShutdownWatchdogSec* defines the timeout when the system is rebooted. For more detailed information about hardware watchdogs under systemd can be found at http://0pointer.de/blog/projects/watchdog.html. The changes will take effect after a reboot or run:"
msgstr ""

msgid "On-Chip OTP Controller (OCOTP_CTRL) - eFuses"
msgstr ""

msgid "The |soc| provides one-time programmable fuses to store information such as the MAC address, boot configuration, and other permanent settings (\"On-Chip OTP Controller (OCOTP_CTRL)\" in the |soc| Reference Manual). The following list is an abstract from the |soc| Reference Manual and includes some useful registers in the OCOTP_CTRL (at base address 0x30350000):"
msgstr ""

msgid "Name"
msgstr ""

msgid "Bank"
msgstr ""

msgid "Word"
msgstr ""

msgid "Memory offset at 0x30350000"
msgstr ""

msgid "Description"
msgstr ""

msgid "OCOTP_MAC_ADDR0"
msgstr ""

msgid "9"
msgstr ""

msgid "0"
msgstr ""

msgid "0x640"
msgstr ""

msgid "contains lower 32 bits of ENET0 MAC address"
msgstr ""

msgid "OCOTP_MAC_ADDR1"
msgstr ""

msgid "1"
msgstr ""

msgid "0x650"
msgstr ""

msgid "contains upper 16 bits of ENET0 MAC address and the lower 16 bits of ENET1 MAC address"
msgstr ""

msgid "OCOTP_MAC_ADDR2"
msgstr ""

msgid "2"
msgstr ""

msgid "0x660"
msgstr ""

msgid "contains upper 32 bits of ENET1 MAC address"
msgstr ""

msgid "A complete list and a detailed mapping between the fuses in the OCOTP_CTRL and the boot/mac/... configuration are available in the section \"Fuse Map\" of the |soc| Security Reference Manual."
msgstr ""

msgid "Reading Fuse Values in uBoot"
msgstr ""

msgid "You can read the content of a fuse using memory-mapped shadow registers. To calculate the memory address, use the fuse Bank and Word in the following formula:"
msgstr ""

msgid "OCOTP_MAC_ADDR:"
msgstr ""

msgid "Reading Fuse Values in Linux"
msgstr ""

msgid "To access the content of the fuses in Linux NXP provides the NVMEM_IMX_OCOTP module. All fuse content of the memory-mapped shadow registers is accessible via sysfs:"
msgstr ""

msgid "|soc| |mcore|"
msgstr ""

msgid "In addition to the Cortex-A53 cores, there is a Cortex-|mcore| as MCU integrated into the |soc| SoC. Our Yocto-Linux-BSP runs on the A53-Cores and the |mcore| can be used as a secondary core for additional tasks using bare-metal or RTOS firmware. Both cores have access to the same peripherals and thus peripheral usage needs to be limited either in the |mcore|'s firmware or the devicetree for the Linux operating system. This section describes how to build firmware examples and how to run them on |sbc|."
msgstr ""

msgid "The |sbc| is currently supported by the NXP MCUXpresso SDK and by The Zephyr Project. This section only describes the NXP MCUXpresso SDK because the MCUXpresso SDK has more supported features at the moment."
msgstr ""

msgid "If you want to use the |mcore| with The Zephyr Project, please refer to the The Zephyr Project documentation:"
msgstr ""

msgid "|mcore-zephyr-docs|"
msgstr ""

msgid "Getting the Firmware Examples"
msgstr ""

msgid "The firmware can be built using the NXP MCUxpresso SDK with a compatible compiler toolchain using command-line tools."
msgstr ""

msgid "Getting the Sources"
msgstr ""

msgid "The MCUX SDK and the examples for the |soc| can be obtained from PHYTEC's GitHub page:"
msgstr ""

msgid "https://github.com/phytec/mcux-sdk/"
msgstr ""

msgid "https://github.com/phytec/mcux-sdk-phytec-examples/"
msgstr ""

msgid "Initialize the MCUX SDK via west:"
msgstr ""

msgid "This will create a mcuxsdk directory with the mcux-sdk repository in it. The ``mcux-sdk-phytec-examples`` repository will be automatically cloned into the mcuxsdk directory. The given argument <VERSION> is a the branch name of the mcux-sdk repository that represents the MCUX SDK version. For the newest tested version you can use |mcore-sdk-version|."
msgstr ""

msgid "``west`` is a repository management tool and a part of the Zephyr Project. To install west, you can use pip. In this example west is installed in a python virtual environment::"
msgstr ""

msgid "Update the dependencies:"
msgstr ""

msgid "The directory ``examples-phytec`` contains all examples ported and tested for |sbc| with version |mcore-sdk-version| of MCUX."
msgstr ""

msgid "To build the firmware, a compiler toolchain and make/cmake are required. The GNU Arm Embedded Toolchain may be available in your distribution's repositories, e.g. for Ubuntu."
msgstr ""

msgid "The compiler toolchain can also be obtained directly from https://developer.arm.com/. After the archive has been extracted, the ``ARMGCC_DIR`` has to be added to the environment, e.g. for the ARM toolchain 10-2020-q4-major release located in the home directory:"
msgstr ""

msgid "Building the Firmware"
msgstr ""

msgid "To build the PHYTEC samples an environment has to be sourced"
msgstr ""

msgid "The scripts to build the firmware are located in <sdk-directory>/phytec-mcux-boards/phyboard-pollux/<example_category>/<example>/armgcc. There are scripts for each memory location the firmware is supposed to run in, e.g."
msgstr ""

msgid "to build the firmware for the |mcore|'s TCM. The output will be placed under release/ in the armgcc directory. .bin files and can be run in U-Boot and .elf files within Linux."
msgstr ""

msgid "To build the firmware for the DRAM, run the script build_ddr_release. The script of the firmware that is supposed to run, e.g."
msgstr ""

msgid "The output will be placed under ddr_release/ in the armgcc directory. .bin files and can be run in U-Boot and .elf files within Linux."
msgstr ""

msgid "Running |mcore| Examples"
msgstr ""

msgid "There are two ways to run the |mcore| with the built firmware, U-Boot and Remoteproc within a running Linux."
msgstr ""

msgid "To receive debug messages start your favorite terminal software (e.g. Minicom, Tio, or Tera Term) on your host PC and configure it for 115200 baud, 8 data bits, no parity, and 1 stop bit (8n1) with no handshake."
msgstr ""

msgid "Once a micro-USB cable is connected to the USB-debug port on the |sbc|, two ttyUSB devices are registered. One prints messages from A53-Core's debug UART and the other one from the |mcore|'s debug UART."
msgstr ""

msgid "Running Examples from U-Boot"
msgstr ""

msgid "To load firmware using the bootloader U-Boot, the bootaux command can be used:"
msgstr ""

msgid "Prepare an SD Card with our Yocto-BSP"
msgstr ""

msgid "Copy the generated .bin file to the SD Cards first partition"
msgstr ""

msgid "Stop the autoboot by pressing any key"
msgstr ""

msgid "Type the command depending on the type of firmware:"
msgstr ""

msgid "For firmware built to run in the |mcore|'s TCM::"
msgstr ""

msgid "For firmware built to run in the DRAM::"
msgstr ""

msgid "The program's output should appear on the |mcore|'s debug UART."
msgstr ""

msgid "Running Examples from Linux using Remoteproc"
msgstr ""

msgid "Remoteproc is a module that allows you to control the |mcore| from Linux during runtime. Firmware built for TCM can be loaded and the execution started or stopped. To use Remoteproc a devicetree overlay needs to be set:"
msgstr ""

msgid "Edit the bootenv.txt file located in the /boot directory on the target by adding |dtbo-rpmsg|:"
msgstr ""

msgid "Restart the target and execute in U-Boot::"
msgstr ""

msgid "Firmware .elf files for the |mcore| can be found under /lib/firmware. To load the firmware, type:"
msgstr ""

msgid "To load a different firmware, the |mcore| needs to be stopped:"
msgstr ""

msgid "The samples found in ``/lib/firmware`` on the target come from NXP's Yocto layer meta-imx. To use the samples you built yourself through MCUX SDK, please copy them to ``/lib/firmware`` on the target after building them."
msgstr ""

msgid "Debugging Using J-Link"
msgstr ""

msgid "The Segger software can be obtained from https://www.segger.com/downloads/jlink/. As of version V7.20a of the Segger software, accessing the |soc|' |mcore| requires additional configuration files to be copied into the J-Link software directory: NXP J-Link files for |soc|"
msgstr ""

msgid "Together with the J-Link, GDB Server can be used for running and debugging the software.  On the |sbc|, the JTAG-Pins are accessible via the |expansion-connector| Expansion Connector. The simplest way is to use a PEB-EVAL-01 board that has the JTAG-Pins reachable with a pin header on the top."
msgstr ""

msgid "To start the J-Link software, type:"
msgstr ""

msgid "To start GDB with a firmware example in another window, type:"
msgstr ""

msgid "BSP Extensions"
msgstr ""

msgid "Chromium"
msgstr ""

msgid "Our BSP for the |sbc|-|soc| supports Chromium. You can include it in the |yocto-imagename| with only a few steps."
msgstr ""

msgid "Adding Chromium to Your local.conf"
msgstr ""

msgid "To include Chromium you have to add the following line into your local.conf. You can find it in <yocto_dir>/build/conf/local.conf. This adds Chromium to your next image build. ::"
msgstr ""

msgid "Compiling Chromium takes a long time."
msgstr ""

msgid "Get Chromium Running on the Target"
msgstr ""

msgid "To run Chromium, it needs a few arguments to use the hardware graphics acceleration::"
msgstr ""

msgid "If you want to start Chromium via SSH, you must first define the display on which Chromium will run. For example::"
msgstr ""

msgid "After you have defined this, you can start it via virtual terminal on Weston as shown above."
msgstr ""

msgid "Table of Contents"
msgstr ""

msgid "HEAD"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX8MM-PD25.1.0"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX8MM-PD23.1.0"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX8MM-PD22.1.1"
msgstr ""

msgid "|soc| BSP Manual"
msgstr ""

msgid "2023/05/25"
msgstr ""

msgid "|yocto-manifestname|"
msgstr ""

msgid "Minor"
msgstr ""

msgid "2023/05/23"
msgstr ""

msgid "Released"
msgstr ""

msgid "The |kit| is shipped with a pre-flashed SD card. It contains the |yocto-imagename| and can be used directly as a boot source. The eMMC is programmed with only a U-boot by default. You can get all sources from the `PHYTEC download server <dl-server_>`_. This chapter explains how to flash a BSP image to SD card and how to start the board."
msgstr ""

msgid "The WIC image contains all BSP files in several, correctly pre-formatted partitions and can be copied to an SD card easily using the single Linux command ``dd``. It can be built by Yocto or downloaded from the PHYTEC download server."
msgstr ""

msgid "Get the WIC file from the download server:"
msgstr ""

msgid "To create your bootable SD card with the ``dd`` command, you must have root privileges. Be very careful when specifying the destination device with ``dd``! All files on the selected destination device will be erased immediately without any further query!"
msgstr ""

msgid "Selecting the wrong device may result in **data loss** and e.g. could erase your currently running system!"
msgstr ""

msgid "To create your bootable SD card, you must first find the correct device name of your SD card and possible partitions. Unmount any mounted partitions before you start copying the image to the SD card."
msgstr ""

msgid "In order to get the correct device name, remove your SD card and execute::"
msgstr ""

msgid "Now insert your SD card and execute the command again::"
msgstr ""

msgid "Unmount all partitions, e.g.::"
msgstr ""

msgid "After having unmounted all partitions, you can create your bootable SD card::"
msgstr ""

msgid "Again, make sure to replace ``/dev/sdX`` with your actual device name found previously."
msgstr ""

msgid "An alternative and much faster way to prepare an SD card can be done by using `bmap-tools <https://github.com/intel/bmap-tools>`_ from Intel. Yocto automatically creates a block map file (``<IMAGENAME>-<MACHINE>.wic.bmap``) for the WIC image that describes the image content and includes checksums for data integrity. *bmaptool* is packaged by various Linux distributions. For Debian-based systems install it by issuing::"
msgstr ""

msgid "Flash a WIC image to SD card by calling::"
msgstr ""

msgid "**phytec-qt5demo-image\\*.tar.gz**: Root file system"
msgstr ""

msgid "**phytec-qt5demo-image\\*.wic**: SD card image"
msgstr ""

msgid "To boot from eMMC, make sure that the BSP image is flashed correctly to the eMMC and the |ref-bootswitch| is set to **Default SOM boot**."
msgstr ""

msgid "Flash eMMC from Network in u-boot on Target"
msgstr ""

msgid "These steps will show how to update the eMMC via a network. However, they only work if the size of the image file is less than 1GB. If the image file is larger, go to the section Format SD Card. Configure the |ref-bootswitch| to boot from SD Card and put in an SD card. Power on the board and stop in U-Boot prompt."
msgstr ""

msgid "A working network is necessary! Setup Network Host."
msgstr ""

msgid "Take a compressed or uncompressed image on the host and send it with ssh through the network (then uncompress it, if necessary) to the eMMC of the target with a one-line command:"
msgstr ""

msgid "Send the image with the command dd command combined with ssh through the network to the eMMC of your device:"
msgstr ""

msgid "Flash eMMC u-boot image via Network from running u-boot"
msgstr ""

msgid "Update the standalone u-boot image imx-boot is also possible from u-boot. This can be used if the bootloader on eMMC is located in the eMMC user area."
msgstr ""

msgid "Flash eMMC from USB"
msgstr ""

msgid "Flash eMMC from USB in u-boot on Target"
msgstr ""

msgid "This step only works if the size of the image file is less than 1GB due to limited usage of RAM size in Bootloader after enabling the OPTEE."
msgstr ""

msgid "These steps will show how to update the eMMC via a USB device. Configure the bootmode switch to |ref-bootswitch| and put in an SD card. Power on the board and stop in u-boot prompt. Insert a USB device with the copied WIC image to the USB slot."
msgstr ""

msgid "These steps will show how to flash the eMMC on Linux with a USB stick. You only need a complete image saved on the USB stick and a bootable WIC image. (e.g. |yocto-imagename|-|yocto-machinename|.wic). Set the bootmode switch to |ref-bootswitch|."
msgstr ""

msgid "Show list of available MMC devices:"
msgstr ""

msgid "The eMMC device can be recognized by the fact that it contains two boot partitions: (mmcblk2boot0; mmcblk2boot1)"
msgstr ""

msgid "Before this will work, you need to configure the multi-port switch to **Default SOM Boot** to |ref-bootswitch|."
msgstr ""

msgid "Flash eMMC from SD card in u-boot on Target"
msgstr ""

msgid "This step only works if the size of the image file is less than 1GB due to limited usage of RAM size in Bootloader after enabling the OPTEE. If the image file is too large use the `Updating eMMC from SD card in Linux on Target` subsection."
msgstr ""

msgid "Flash an SD card with a working image and create a third FAT partition. Copy the WIC image (for example |yocto-imagename|.wic) to this partition."
msgstr ""

msgid "Configure the bootmode switch to boot from the SD Card and insert the SD card."
msgstr ""

msgid "Power on the board and stop in u-boot."
msgstr ""

msgid "Flash your WIC image (for example |yocto-imagename|.wic) from the SD card to eMMC. This will partition the card and copy imx-boot, Image, dtb, dtbo, and root file system to eMMC."
msgstr ""

msgid "Switch the mmc dev:"
msgstr ""

msgid "Power off the board and change the multi-port switch to Default SOM Boot to boot from eMMC."
msgstr ""

msgid "You can also flash the eMMC on Linux. You only need a complete image saved on the SD card (e.g. |yocto-imagename|-|yocto-machinename|.wic)."
msgstr ""

msgid "Show your saved image files on the SD card:"
msgstr ""

msgid "The eMMC device can be recognized by the fact that it contains two boot partitions: (mmcblk2\\ **boot0**; mmcblk2\\ **boot1**)"
msgstr ""

msgid "Write the image to the phyCORE-|soc| eMMC (MMC device 2 **without** partition):"
msgstr ""

msgid "Before this will work, you need to configure the |ref-bootswitch| to Default SOM Boot to boot from eMMC."
msgstr ""

msgid "The |som| modules are optionally equipped with SPI NOR Flash. To boot from SPI Flash, set |ref-bootswitch| to **QSPI boot** to boot from QSPI. The SPI Flash is usually quite small. The phyBOARD-Pollux-i.MX8MP kit only has 32MB SPI NOR flash populated. Only the bootloader and the environment can be stored. The kernel, device tree, and file system are taken from eMMC by default."
msgstr ""

msgid "Flash SPI NOR from Network in u-boot on Target"
msgstr ""

msgid "Similar to updating the eMMC over a network, be sure to set up the development host correctly. The IP needs to be set to 192.168.3.10, the netmask to 255.255.255.0, and a TFTP server needs to be available. Before reading and writing is possible, the SPI-NOR flash needs to be probed:"
msgstr ""

msgid "A specially formatted u-boot image for the SPI NOR flash is used. Ensure you use the correct image file. Load the image over tftp, erase and write the bootloader to the flash:"
msgstr ""

msgid "Erasing the complete SPI NOR flash when it is fully written will take quite some time. This can trigger the watchdog to reset. Due to this, erase the full flash in Linux."
msgstr ""

msgid "Find the number of erase blocks of the U-boot partition:"
msgstr ""

msgid "Flash SPI NOR from SD Card in u-boot on Target"
msgstr ""

msgid "Copy the SPI NOR flash U-boot image imx-boot-|yocto-machinename|-fspi.bin-flash_evk_flexspi to the FAT partition on the SD Card. Before reading and writing are possible, the SPI-NOR flash needs to be probed:"
msgstr ""

msgid "Find the number of erase blocks of the u-boot partition:"
msgstr ""

msgid "The RAUC (Robust Auto-Update Controller) mechanism support has been added to meta-ampliphy. It controls the procedure of updating a device with new firmware. This includes updating the Linux kernel, Device Tree, and root filesystem. PHYTEC has written an online manual on how we have intergraded RAUC into our BSPs: `L-1006e.A3 RAUC Update & Device Management Manual <https://www.phytec.de/cdocuments/?doc=BKXvGQ>`__."
msgstr ""

msgid "Copy the kernel image to your tftp directory:"
msgstr ""

msgid "Copy the devicetree to your tftp directory:"
msgstr ""

msgid "Copy all the overlays you want to use into your tftp directory:"
msgstr ""

msgid "<overlayfilenames> has to be replaced with the devicetree overlay filenames that you want to use. Separate the filenames by spaces. For example:"
msgstr ""

msgid "All supported devicetree overlays are in the |ref-dt| chapter."
msgstr ""

msgid "Download imx-boot from our server or get it from your Yocto build directory at build/deploy/images/|yocto-machinename|/. For flashing a wic image to eMMC, you will also need |yocto-imagename|-|yocto-machinename|.wic."
msgstr ""

msgid "The **tag** needed at this release is called |u-boot-tag|"
msgstr ""

msgid "Technically, you can now build the U-Boot, but practically there are some further steps necessary:"
msgstr ""

msgid "Create your own development branch:"
msgstr ""

msgid "You can name your development branch as you like, this is just an example."
msgstr ""

msgid "Set this environment variable before building the Image:"
msgstr ""

msgid "The flash.bin can be found at u-boot-imx/ directory and now can be flashed. A chip-specific offset is needed:"
msgstr ""

msgid "/dev/mmcblk2"
msgstr ""

msgid "The Image can be found at ~/|kernel-repo-name|/arch/arm64/boot/Image"
msgstr ""

msgid "Copy Kernel to SD Card"
msgstr ""

msgid "When one-time boot via netboot is not sufficient, the kernel along with its modules and the corresponding device tree blob may be copied directly to a mounted SD card."
msgstr ""

msgid "*Carrierboard.dtsi* - Devices that come from the |soc| SoC but are just routed down to the carrier board and used there are included in this dtsi."
msgstr ""

msgid "*Board.dts* - include the carrier board and module dtsi files. There may also be some hardware configuration nodes enabled on the carrier board or the module (i.e. the Board .dts shows the special characteristics of the board configuration). For example, there are phyCORE-|soc| SOMs which may or may not have a MIPI DSI to LVDS converter mounted. The converter is enabled (if available) in the Board .dts and not in the Module .dtsi"
msgstr ""

msgid "Device Tree overlays are device tree fragments that can be merged into a device tree during boot time. These are for example hardware descriptions of an expansion board. They are instead of being added to the device tree as an extra include, now applied as an overlay. They also may only contain setting the status of a node depending on if it is mounted or not. The device tree overlays are placed next to the other device tree files in our Linux kernel repository in the subfolder ``arch/arm64/boot/dts/freescale/overlays``."
msgstr ""

#, python-brace-format
msgid "The ``${overlays}`` U-Boot environment variable contains a space-separated list of overlays that will be applied during boot. Depending on the boot source the overlays have to either be placed in the boot partition of eMMC/SD-Card or are loaded over tftp. Overlays set in the $KERNEL_DEVICETREE Yocto machine variable will be automatically added to the boot partition of the final WIC image."
msgstr ""

#, python-brace-format
msgid "The ``${overlays}`` variable can be either set directly in the U-Boot environment or can be part of the external ``bootenv.txt`` environment file. By default, the ``${overlays}`` variable comes from the external ``bootenv.txt`` environment file which is located in the boot partition. You can read and write the file on booted target from linux:"
msgstr ""

#, python-brace-format
msgid "We use the ``${overlays}`` variable for overlays describing expansion boards and cameras that can not be detected during run time. To prevent applying overlays listed in the ``${overlays}`` variable during boot, the ``${no_overlays}`` variable can be set to `1` in the bootloader environment."
msgstr ""

msgid "Extension Command"
msgstr ""

msgid "The U-Boot extension command makes it possible to easily apply overlays that have been detected and added to a list by the board code callback `extension_board_scan() <overlaycallback_>`_. Overlays applied this way disable components that are not populated on the SoM. The detection is done with the EEPROM data (EEPROM SoM Detection) found on the SoM i2c EEPROM."
msgstr ""

#, python-brace-format
msgid "To prevent running the extension command during boot the ``${no_extensions}`` variable can be set to `1` in the bootloader environment::"
msgstr ""

msgid "The following is an example of the pin muxing of the UART1 device in imx8mm-phyboard-polis.dtsi:"
msgstr ""

msgid "The device tree representation for RS232 and RS485: :imx-dt:`imx8mm-phyboard-polis.dtsi?h=v5.10.72_2.2.0-phy17#n188`"
msgstr ""

msgid "To finish the configuration you can configure DHCP to receive an IP address (supported by most WLAN access points). For other possible IP configurations, see section `Changing the Network Configuration` in the |yocto-ref-manual|_."
msgstr ""

msgid "First, create the directory:"
msgstr ""

msgid "Then add the following configuration snippet in ``/etc/systemd/network/10-wlan0.network``:"
msgstr ""

msgid "Now, restart the network daemon so that the configuration takes effect:"
msgstr ""

msgid "Bluetooth is connected to |bluetooth-uart| interface. More information about the module can be found at https://connectivity-staging.s3.us-east-2.amazonaws.com/2019-09/CS-DS-SterlingLWB%20v7_2.pdf. The Bluetooth device needs to be set up manually:"
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :imx-dt:`imx8mm-phyboard-polis.dtsi?h=v5.10.72_2.2.0-phy17#n266`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :imx-dt:`imx8mm-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n315`"
msgstr ""

msgid "PHYTEC modules like phyCORE-|soc| is populated with an eMMC memory chip as the main storage. eMMC devices contain raw MLC memory cells combined with a memory controller that handles ECC and wear leveling. They are connected via an SD/MMC interface to the |soc| and are represented as block devices in the Linux kernel like SD cards, flash drives, or hard disks."
msgstr ""

msgid "In contrast to raw NAND Flash, an eMMC device contains a Flash Transfer Layer (FTL) that handles the wear leveling, block management, and ECC of the raw MLC cells. This requires some maintenance tasks (for example erasing unused blocks) that are performed regularly. These tasks are called **Background Operations (BKOPS)**."
msgstr ""

msgid "The userspace tool mmc does not currently support enabling automatic BKOPS features."
msgstr ""

msgid "eMMC devices use MLC memory cells (https://en.wikipedia.org/wiki/Multi-level_cell) to store the data. Compared with SLC memory cells used in NAND Flash, MLC memory cells have lower reliability and a higher error rate at lower costs."
msgstr ""

msgid "It is possible to erase the eMMC device directly rather than overwriting it with zeros. The eMMC block management algorithm will erase the underlying MLC memory cells or mark these blocks as discard. The data on the device is lost and will be read back as zeros."
msgstr ""

msgid ":imx-dt:`imx8mm-phycore-som.dtsi?h=v5.10.72_2.2.0-phy9#n71`"
msgstr ""

msgid "You can also add this option for example to the defconfig you use in ``arch/arm64/configs/`` in the linux kernel sources. For our NXP based releases, this could be for example ``imx8_phytec_distro.config``::"
msgstr ""

msgid "Otherwise you can create a new config fragment. This is described in our `Yocto Reference Manual <yocto-ref-manual-kernel-and-bootloader-config_>`_."
msgstr ""

msgid "Pinmuxing of some GPIO pins in the device tree |dt-carrierboard|.dtsi::"
msgstr ""

msgid "Device tree configuration for the User I/O configuration can be found here: :imx-dt:`imx8mm-phyboard-polis.dtsi?h=v5.10.72_2.2.0-phy17#n37`"
msgstr ""

msgid "General I²C1 bus configuration (e.g. |dt-som|.dtsi): :imx-dt:`imx8mm-phycore-som.dtsi?h=v5.10.72_2.2.0-phy#n102`"
msgstr ""

msgid "General I²C4 bus configuration (e.g. |dt-carrierboard|.dtsi): :imx-dt:`imx8mm-phyboard-polis.dtsi?h=v5.10.72_2.2.0-phy17#n149`"
msgstr ""

msgid "On the |som| there is an i2c EEPROM flash populated. It has two addresses. The main EEPROM space (bus: I2C-0 address: 0x51) and the ID-page (bus: I2C-0 address: 0x59) can be accessed via the sysfs interface in Linux. The first 256 bytes of the main EEPROM and the ID-page are used for board detection and must not be overwritten. Overwriting reserved spaces will result in boot issues."
msgstr ""

msgid "Rescue EEPROM Data"
msgstr ""

msgid "The hardware introspection data is pre-written on both EEPROM data spaces. If you have accidentally deleted or overwritten the normal area, you can copy the hardware introspection from the ID area to the normal area."
msgstr ""

msgid "If you deleted both EEPROM spaces, please contact our support!"
msgstr ""

msgid "DT representation, e.g. in phyCORE-|soc| file |dt-som|.dtsi can be found in our PHYTEC git: :imx-dt:`imx8mm-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n271`"
msgstr ""

msgid "DT representation for I²C RTCs: :imx-dt:`imx8mm-phycore-som.dtsi?h=v5.10.72_2.2.0-phy9#n277`"
msgstr ""

msgid "User USB2 (host) configuration is in the kernel device tree |kernel-socname|.dtsi::"
msgstr ""

msgid "DT representation for USB Host: :imx-dt:`imx8mm-phyboard-polis.dtsi?h=v5.10.72_2.2.0-phy9#n240`"
msgstr ""

msgid "Both USB interfaces are configured as host in the kernel device tree imx8mm-phyboard-polis.dtsi. See: :imx-dt:`imx8mm-phyboard-polis.dtsi?h=v5.10.72_2.2.0-phy17#n228`"
msgstr ""

msgid "Device Tree CAN configuration of imx8mm-phyboard-polis.dtsi: :imx-dt:`imx8mm-phyboard-polis.dtsi?h=v5.10.72_2.2.0-phy17#n106`"
msgstr ""

msgid "In order to activate the driver, follow the instructions from our `Yocto Reference Manual <yocto-ref-manual-kernel-and-bootloader-config_>`_."
msgstr ""

msgid "You should see a lot of options as the audio-IC has many features you can experiment with. It might be better to open alsamixer via ssh instead of the serial console, as the console graphical effects are better. You have either mono or stereo gain controls for all mix points. \"MM\" means the feature is muted (both output, left & right), which can be toggled by hitting **m**. You can also toggle by hitting '**<**' for left and '**>**' for right output. With the **tab** key, you can switch between controls for playback and recording."
msgstr ""

msgid "To set PEB-AV-10 as output, set playback.pcm from \"dummy\" to \"pebav10\":"
msgstr ""

msgid "For applications using Pulseaudio, check for available sinks:"
msgstr ""

msgid "To select PEB-AV-10, type:"
msgstr ""

msgid "Device Tree Audio configuration: :imx-dt:`overlays/imx8mm-phyboard-polis-peb-av-010.dtso?h=v5.10.72_2.2.0-phy17#n56`"
msgstr ""

msgid "The video is installed by default in the BSP:"
msgstr ""

msgid "kmssink Plugin ID Evaluation"
msgstr ""

msgid "The kmssink plugin needs a connector ID. To get the connector ID, you can use the tool modetest."
msgstr ""

msgid "The output will show something like:"
msgstr ""

msgid "With the phytec-qt5demo-image, Weston starts during boot. The phytec-qt5demo can be stopped with:"
msgstr ""

msgid "To disable autostart of the demo run:"
msgstr ""

msgid "The device tree of PEB-AV-10 can be found here: :imx-dt:`overlays/imx8mm-phyboard-polis-peb-av-010.dtso?h=v5.10.72_2.2.0-phy17`"
msgstr ""

msgid "Kirkstone"
msgstr ""

msgid "2024/01/10"
msgstr ""

msgid "BSP Release Date"
msgstr ""

msgid "Major"
msgstr ""

msgid "2023/12/12"
msgstr ""

msgid "*partup* has the advantage of allowing to clear specific raw areas in the MMC user area, which is used in our provided partup packages to erase any existing U-Boot environments. This is a known issue *bmaptool* does not solve, as mentioned below."
msgstr ""

msgid "An alternative and also fast way to prepare an SD card is using `bmap-tools <https://github.com/yoctoproject/bmaptool>`_. Yocto automatically creates a block map file (``<IMAGENAME>-<MACHINE>.wic.bmap``) for the WIC image that describes the image content and includes checksums for data integrity. *bmaptool* is packaged by various Linux distributions. For Debian-based systems install it by issuing:"
msgstr ""

msgid "**phytec-qt6demo-image\\*.wic**: SD card image"
msgstr ""

msgid "Take a compressed or uncompressed image with accompanying block map on the host and send it with ssh through the network to the eMMC of the target with a one-line command:"
msgstr ""

msgid "These steps will show how to update the eMMC via a USB device. Configure the |ref-bootswitch| to SD Card and insert an SD card. Power on the board and stop in U-Boot prompt. Insert a USB device with the copied WIC image to the USB slot."
msgstr ""

msgid "These steps will show how to flash the eMMC on Linux with a USB stick. You only need a complete image saved on the USB stick and a bootable WIC image. (e.g. |yocto-imagename|-|yocto-machinename|.wic). Set the |ref-bootswitch| to SD Card."
msgstr ""

msgid "Flash an SD card with a working image and create a third ext4 partition. Copy the WIC image (for example |yocto-imagename|.wic) to this partition."
msgstr ""

msgid "The regulator for the SD card reset pin has been disabled to ensure compatibility with 1532.1 revision baseboards. If you have a revision 1532.2(a) or higher baseboard, you may enable the device tree nodes for highest performance. In the imx8mm-phyboard-polis-rdk-u-boot.dtsi file, remove the following lines::"
msgstr ""

msgid "The device tree representation for RS232 and RS485: :imx-dt:`imx8mm-phyboard-polis-rdk.dts?h=v5.15.71_2.2.2-phy3#n291`"
msgstr ""

msgid "To finish the configuration you can configure DHCP to receive an IP address (supported by most WLAN access points). For other possible IP configurations, see section `Changing the Network Configuration` in the |yocto-ref-manual|."
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :imx-dt:`imx8mm-phyboard-polis-rdk.dts?h=v5.15.71_2.2.2-phy3#n383`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :imx-dt:`imx8mm-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n335`"
msgstr ""

msgid ":imx-dt:`imx8mm-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n87`"
msgstr ""

msgid "Device tree configuration for the User I/O configuration can be found here: :imx-dt:`imx8mm-phyboard-polis-rdk.dts?h=v5.15.71_2.2.2-phy3#n36`"
msgstr ""

msgid "General I²C1 bus configuration (e.g. |dt-som|.dtsi): :imx-dt:`imx8mm-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n119`"
msgstr ""

msgid "General I²C4 bus configuration (e.g. |dt-carrierboard|.dts): :imx-dt:`imx8mm-phyboard-polis-rdk.dts?h=v5.15.71_2.2.2-phy3#n244`"
msgstr ""

msgid "DT representation, e.g. in phyCORE-|soc| file |dt-som|.dtsi can be found in our PHYTEC git: :imx-dt:`imx8mm-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n311`"
msgstr ""

msgid "DT representation for I²C RTCs: :imx-dt:`imx8mm-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n319`"
msgstr ""

msgid "DT representation for USB Host: :imx-dt:`imx8mm-phyboard-polis-rdk.dts?h=v5.15.71_2.2.2-phy3#n347`"
msgstr ""

msgid "Both USB interfaces are configured as host in the kernel device tree |dt-carrierboard|.dts. See: :imx-dt:`imx8mm-phyboard-polis-rdk.dts?h=v5.15.71_2.2.2-phy3#n335`"
msgstr ""

msgid "Device Tree CAN configuration of |dt-carrierboard|.dts: :imx-dt:`imx8mm-phyboard-polis-rdk.dts?h=v5.15.71_2.2.2-phy3#n175`"
msgstr ""

msgid "Device Tree Audio configuration: :imx-dt:`overlays/imx8mm-phyboard-polis-peb-av-010.dtsi?h=v5.15.71_2.2.2-phy3#n54`"
msgstr ""

msgid "The device tree of PEB-AV-10 can be found here: :imx-dt:`overlays/imx8mm-phyboard-polis-peb-av-010.dtsi?h=v5.15.71_2.2.2-phy3`"
msgstr ""

msgid "|doc-id| |soc| BSP Manual"
msgstr ""

msgid "Scarthgap"
msgstr ""

msgid "2025/03/28"
msgstr ""

msgid "The |sbc| populated with the |soc| SoC is supported."
msgstr ""

msgid "SD Card Boot"
msgstr ""

msgid "**bl31-imx8mn.bin**: ARM Trusted Firmware binary"
msgstr ""

msgid "**imx8mn-phyboard-polis*.dtb**: Kernel device tree file"
msgstr ""

msgid "**imx8mn-phy*.dtbo**: Kernel device tree overlay files"
msgstr ""

msgid "**phytec-headless-image\\*.tar.gz**: Root file system"
msgstr ""

msgid "**phytec-headless-image\\*.rootfs.wic.xz**: compressed SD card image"
msgstr ""

msgid "Hardware revision baseboard: 1532.2 and newer"
msgstr ""

msgid "USB Serial Downloader"
msgstr ""

msgid "Internal Fuses"
msgstr ""

msgid "\\"
msgstr ""

msgid "Switch between USB HOST/OTG using Pos5 of switch(S1)"
msgstr ""

msgid "USB HOST"
msgstr ""

msgid "Switch between UART1 RS485/RS232 using Pos4 of switch(S1)"
msgstr ""

msgid "The first part of the string MX8MN_IOMUXC_SAI2_RXFS_UART1_DCE_TX names the pad (in this example SAI2_RXFS). The second part of the string (UART1_DCE_RX) is the desired muxing option for this pad. The pad setting value (hex value on the right) defines different modes of the pad, for example, if internal pull resistors are activated or not. In this case, the internal resistors are disabled."
msgstr ""

msgid "The device tree representation for RS232 and RS485: :imx-dt:`imx8mn-phyboard-polis.dts?h=v5.15.71_2.2.2-phy3#n220`"
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :imx-dt:`imx8mn-phyboard-polis.dts?h=v5.15.71_2.2.2-phy3#n301`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :imx-dt:`imx8mn-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n309`"
msgstr ""

msgid ":imx-dt:`imx8mn-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n78`"
msgstr ""

msgid "Device tree configuration for the User I/O configuration can be found here: :imx-dt:`imx8mn-phyboard-polis.dts?h=v5.15.71_2.2.2-phy3#n45`"
msgstr ""

msgid "General I²C1 bus configuration (e.g. |dt-som|.dtsi): :imx-dt:`imx8mn-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n106`"
msgstr ""

msgid "General I²C3 bus configuration (e.g. |dt-carrierboard|.dts): :imx-dt:`imx8mn-phyboard-polis.dts?h=v5.15.71_2.2.2-phy3#n196`"
msgstr ""

msgid "DT representation, e.g. in phyCORE-|soc| file |dt-som|.dtsi can be found in our PHYTEC git: :imx-dt:`imx8mn-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n259`"
msgstr ""

msgid "DT representation for I²C RTCs: :imx-dt:`imx8mn-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n267`"
msgstr ""

msgid "The USB controller of the |soc| SoC provides a low-cost connectivity solution for numerous consumer portable devices by providing a mechanism for data transfer between USB devices with a line/bus speed up to 480 Mbps (HighSpeed 'HS')."
msgstr ""

msgid "The |soc| SoC has a single USB controller core that is set to OTG mode. To use the micro USB / OTG port dip switch S1 Pos5 has to be set to on."
msgstr ""

msgid "The USB interface is configured as host in the kernel device tree |dt-carrierboard|.dts. See: :imx-dt:`imx8mn-phyboard-polis.dts?h=v5.15.71_2.2.2-phy3#n264`"
msgstr ""

msgid "On phyBOARD-Polis-i.MX8MN a terminating resistor can be enabled by setting S5 to ON if required."
msgstr ""

msgid "Device Tree CAN configuration of |dt-carrierboard|.dts: :imx-dt:`imx8mn-phyboard-polis.dts?h=v5.15.71_2.2.2-phy3#n125`"
msgstr ""

msgid "**imx8mn-phyboard-polis-dsi*.dtb**: Kernel device tree file"
msgstr ""

msgid "**phytec-headless-image\\*.wic**: SD card image"
msgstr ""

msgid "The following is an example of the pin muxing of the UART1 device in imx8mn-phyboard-polis.dtsi:"
msgstr ""

msgid "The device tree representation for RS232 and RS485: :imx-dt:`imx8mn-phyboard-polis.dtsi?h=v5.10.72_2.2.0-phy17#n166`"
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :imx-dt:`imx8mn-phyboard-polis.dtsi?h=v5.10.72_2.2.0-phy17#n238`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :imx-dt:`imx8mn-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n293`"
msgstr ""

msgid ":imx-dt:`imx8mn-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n75`"
msgstr ""

msgid "Device tree configuration for the User I/O configuration can be found here: :imx-dt:`imx8mn-phyboard-polis.dtsi?h=v5.10.72_2.2.0-phy17#n35`"
msgstr ""

msgid "General I²C1 bus configuration (e.g. |dt-som|.dtsi): :imx-dt:`imx8mn-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n98`"
msgstr ""

msgid "General I²C3 bus configuration (e.g. |dt-carrierboard|.dtsi): :imx-dt:`imx8mn-phyboard-polis.dtsi?h=v5.10.72_2.2.0-phy17#n147`"
msgstr ""

msgid "DT representation, e.g. in phyCORE-|soc| file |dt-som|.dtsi can be found in our PHYTEC git: :imx-dt:`imx8mn-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n248`"
msgstr ""

msgid "DT representation for I²C RTCs: :imx-dt:`imx8mn-phycore-som.dtsi?h=v5.10.72_2.2.0-phy9#n254`"
msgstr ""

msgid "Both USB interfaces are configured as host in the kernel device tree |dt-carrierboard|.dtsi. See: :imx-dt:`imx8mn-phyboard-polis.dtsi?h=v5.10.72_2.2.0-phy17#n206`"
msgstr ""

msgid "Device Tree CAN configuration of |dt-carrierboard|.dtsi: :imx-dt:`imx8mn-phyboard-polis.dtsi?h=v5.10.72_2.2.0-phy17#n104`"
msgstr ""

msgid "|doc-id| |soc| FPSC BSP ManualHead"
msgstr ""

msgid "|doc-id| |soc| FPSC BSP Manual Head"
msgstr ""

msgid "On our web page, you can see all supported Machines with the available Article Numbers for this release: |yocto-manifestname| `download <dlpage-bsp_>`_."
msgstr ""

msgid "If you choose a specific **Machine Name** in the section **Supported Machines**, you can see which **Article Numbers** are available under this machine and also a short description of the hardware information. In case you only have the **Article Number** of your hardware, you can leave the **Machine Name** drop-down menu empty and only choose your **Article Number**. Now it should show you the necessary **Machine Name** for your specific hardware"
msgstr ""

msgid "**Libra Components (top)**"
msgstr ""

msgid "**Libra Components (bottom)**"
msgstr ""

msgid "To boot from an SD card, the |ref-bootswitch| needs to be set to the following position:"
msgstr ""

msgid "**bl31-imx8mp.bin**: ARM Trusted Firmware binary"
msgstr ""

msgid "**fitImage-its\\*.its**"
msgstr ""

msgid "**imx8mp-libra-rdk-fpsc*.dtb**: Kernel device tree file"
msgstr ""

msgid "**imx8mp-phy*.dtbo**: Kernel device tree overlay files"
msgstr ""

msgid "**phytec-qt6demo-image\\*.rootfs.wic.xz**: compressed SD card image"
msgstr ""

msgid "Bootmode Switch (S3)"
msgstr ""

msgid "Hardware revision baseboard: 1552.2"
msgstr ""

msgid "The |sbc| features a boot switch with four individually switchable ports to select the phyCORE-|soc| default bootsource."
msgstr ""

msgid "eMMC"
msgstr ""

msgid "JTAG Mode"
msgstr ""

msgid "The first part of the string MX8MP_IOMUXC_UART1_RXD_UART1_DCE_RX names the pad (in this example UART1_RXD). The second part of the string (UART1_DCE_RX) is the desired muxing option for this pad. The pad setting value (hex value on the right) defines different modes of the pad, for example, if internal pull resistors are activated or not. In this case, the internal resistors are disabled."
msgstr ""

msgid "The device tree representation for UART1 pinmuxing: :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L373`"
msgstr ""

msgid "The phyCORE-|soc| supports up to 4 UART units. On the |sbc|, TTL level signals of UART1 (the standard console) and UART4 are routed to Silicon Labs CP2105 UART to USB converter expansion. This USB is brought out at Micro-USB connector X1. UART3 is at X6 (Expansion Connector) at TTL level. UART2 is connected to a multi-protocol transceiver for RS-232 and RS-485, available at pin header connector |ref-serial| at the RS-232 level, or at the RS-485 level. The configuration of the multi-protocol transceiver is done by jumpers |ref-jp3| and |ref-jp4| on the baseboard. For more information about the correct setup please refer to the phyCORE-|soc|/|sbc| Hardware Manual section UARTs."
msgstr ""

msgid "We use the same device tree node for RS-232 and RS-485. RS-485 mode can be enabled with ioctl TIOCSRS485. Also, full-duplex support is also configured using ioctls. Have a look at our small example application rs485test, which is also included in the BSP. The jumpers |ref-jp3| and |ref-jp4| need to be set correctly."
msgstr ""

msgid "RS485 full-duplex"
msgstr ""

msgid "For full-duplex mode your connection setup should look like this:"
msgstr ""

msgid "For full-duplex mode you can set the ioctls manually like this:"
msgstr ""

msgid "Also here you can do the echo test to see if sending and receiving works:"
msgstr ""

msgid "To check if the full-duplex operation works, you need to use the linux-serial-test tool:"
msgstr ""

msgid "In this example both targets will send and receive simultaneously. They will receive for 15sec and send for 10sec. The receiver needs to receive a bit longer, so that all sent messages will get received. Remember to start both targets almost simultaneously. A small difference in start time is accounted for with the ``-W 2`` option. At the end the program will print the final \"count for this session\". There you can check that all transmitted frames were received."
msgstr ""

msgid "All the test examples are target to target, but can also be done with host to target with a USB to rs485 converter. You may need to adjust the interfaces for commands to work on the host then."
msgstr ""

msgid "The device tree representation for RS232 and RS485: :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L412`"
msgstr ""

msgid "|sbc|-|soc| provides two ethernet interfaces. A gigabit Ethernet is provided by our module and board."
msgstr ""

msgid "The naming convention of the Ethernet interfaces in the hardware (ethernet0 and ethernet1) do not align with the network interfaces (eth0 and eth1) in Linux. So, be aware of these differences:"
msgstr ""

msgid "ethernet1 = eth0"
msgstr ""

msgid "ethernet0 = eth1"
msgstr ""

msgid "WLAN and Bluetooth on the |sbc| are provided by the PEB-WLBT-05 expansion card. The PEB-WLBT-05 for |sbc| Quickstart Guide shows you how to install the PEB-WLBT-05."
msgstr ""

msgid "With the BSP Version PD22.1 and newer, the PEB-WLBT-05 overlay needs to be activated first, otherwise the PEB-WLBT-05 won't be recognized."
msgstr ""

msgid "Afterwards the bootenv.txt file should look like this (it can also contain other devicetree overlays!):"
msgstr ""

msgid "The changes will be applied after a reboot:"
msgstr ""

msgid "For further information about devicetree overlays, read the |ref-dt| chapter."
msgstr ""

msgid "Bluetooth is supported on |sbc| with the PEB-WLBT-05 expansion card. How this can be activated is described in the WLAN section."
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L422`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phycore-som.dtsi#L214`"
msgstr ""

msgid ":linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phycore-som.dtsi#L76`"
msgstr ""

msgid "Device tree configuration for the User I/O configuration can be found here: :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L255`"
msgstr ""

msgid "General I²C1 bus configuration (e.g. |dt-som|.dtsi): :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phycore-som.dtsi#L113`"
msgstr ""

msgid "General I²C2 bus configuration (e.g. |dt-carrierboard|.dts) :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L239`"
msgstr ""

msgid "DT representation, e.g. in phyCORE-|soc| file imx8mp-phycore-som.dtsi can be found in our PHYTEC git: :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phycore-som.dtsi#L201`"
msgstr ""

msgid "DT representation for I²C RTCs: :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phycore-som.dtsi#L208`"
msgstr ""

msgid "The USB controller of the |soc| SoC provides a low-cost connectivity solution for numerous consumer portable devices by providing a mechanism for data transfer between USB devices with a line/bus speed of up to 4 Gbit/s (SuperSpeed 'SS'). The USB subsystem has two independent USB controller cores. Both cores are capable of acting as a USB peripheral device or a USB host. Each is connected to a USB 3.0 PHY."
msgstr ""

msgid "DT representation for USB Host: :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L380`"
msgstr ""

msgid "The |sbc| has two flexCAN interfaces supporting CAN FD. They are supported by the Linux standard CAN framework which builds upon then the Linux network layer. Using this framework, the CAN interfaces behave like an ordinary Linux network device, with some additional features special to CAN. More information can be found in the Linux Kernel documentation: https://www.kernel.org/doc/html/latest/networking/can.html"
msgstr ""

msgid "Device Tree CAN configuration of |dt-carrierboard|.dts: :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L203`"
msgstr ""

msgid "Device Tree PCIe configuration of |dt-carrierboard|.dts: :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L345`"
msgstr ""

msgid "Playback devices supported for |sbc| are HDMI and the TI TLV320AIC3007 audio codec on the PEB-AV-10 connector. On the AV-Connector there is a 3.5mm headset jack with OMTP-standard and an 8-pin header. The 8-pin header contains a mono speaker, headphones, and line in signals."
msgstr ""

msgid "Using the PEB-AV-10 connector for display output along HDMI as audio output is not supported. The audio output device must match the video output device."
msgstr ""

msgid "Device Tree Audio configuration: :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-peb-av-10.dtso#L58`"
msgstr ""

msgid "The |sbc| supports up to 3 different display outputs. Two can be used simultaneously. The following table shows the required extensions and devicetree overlays for the different interfaces."
msgstr ""

msgid "Interface"
msgstr ""

msgid "Expansion"
msgstr ""

msgid "devicetree overlay"
msgstr ""

msgid "HDMI"
msgstr ""

msgid "|sbc|"
msgstr ""

msgid "no overlay needed (enabled by default)"
msgstr ""

msgid "LVDS0"
msgstr ""

msgid "PEB-AV-10"
msgstr ""

msgid "|dtbo-peb-av-10| (loaded by default)"
msgstr ""

msgid "LVDS1"
msgstr ""

msgid "disabled if PEB-AV-10 overlay is used"
msgstr ""

msgid "When changing Weston output, make sure to match the audio output as well."
msgstr ""

msgid "LVDS0 (PEB-AV-10) and LVDS1 (onboard)can not be used at the same time."
msgstr ""

msgid "HDMI is always enabled in the devicetree. The other interfaces can be enabled with Device Tree Overlay."
msgstr ""

msgid "The default-enabled Interfaces are HDMI and LVDS0 (PEB-AV-010). We support a 10'' edt,etml1010g0dka display for the |lvds-display-adapters|."
msgstr ""

msgid "The current display driver limits the pixel clock for a display connected to LVDS to 74.25Mhz (or a divider of it).  If this does not fit your display requirements, please contact Support for further help."
msgstr ""

msgid "Weston Configuration"
msgstr ""

msgid "In order to get an output from Weston on the correct display, it still needs to be configured correctly. This will be done at /etc/xdg/weston/weston.ini."
msgstr ""

msgid "Single Display"
msgstr ""

msgid "In our BSP, the default Weston output is set to HDMI."
msgstr ""

msgid "When using the LVDS0 (PEB-AV-10) as output, set the output mode to off for HDMI-A-1 and for LVDS-1 to current."
msgstr ""

msgid "If you want to use LVDS1 (onboard) then you need to load no overlay. Remove the imx8mp-phyboard-pollux-peb-av-xxx.dtbo from bootenv.txt."
msgstr ""

msgid "Dual Display"
msgstr ""

msgid "For dual and triple display output you can not use LVDS1 (onboard) and HDMI together."
msgstr ""

msgid "For dual display in dual view mode at HDMI and LVDS0 (PEB-AV-10), both modes have to be set to the:"
msgstr ""

msgid "Device tree description of LVDS-1 and HDMI can be found here: :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L294` :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L218`"
msgstr ""

msgid "The device tree of LVDS-0 on PEB-AV-10 can be found here: :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-peb-av-10.dtso#L133`"
msgstr ""

msgid "The device tree description of GPIO Fan can be found here: :linux-phytec-imx:`tree/v6.6.23-2.0.0-phy10/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L35`"
msgstr ""

msgid "snvs Power Key"
msgstr ""

msgid "The X_ONOFF pin connected to the ON/OFF button can be pressed long to trigger Power OFF without SW intervention or used to wake up the system out of suspend. With the *snvs_pwrkey* driver, the KEY_POWER event is also reported to userspace when the button is pressed. On default, systemd is configured to ignore such events. The function of Power OFF without SW intervention and the wake-up from suspend are not configured. Triggering a power off with systemd when pushing the ON/OFF button can be configured under ``/etc/systemd/logind.conf`` and set using:"
msgstr ""

msgid "NPU"
msgstr ""

msgid "The |soc| SoC contains a Neural Processing Unit up to 2.3 TOPS as an accelerator for artificial intelligence operations. Refer to our latest phyCORE-|soc| AI Kit Guide on the phyCORE-|soc| download section to get information about the NPU: `L-1015e.A1 phyCORE-i.MX 8M Plus AI Kit Guide <https://www.phytec.de/cdocuments/?doc=9oB5Hg>`_"
msgstr ""

msgid "ISP"
msgstr ""

msgid "The |soc| SoC contains an Image Signal Processor (ISP). For more information see Using the ISPs on the |sbc| |soc| documentation. This documentation is also available in German."
msgstr ""

msgid "|doc-id| |soc| BSP ManualHead"
msgstr ""

msgid "**phyBOARD-Pollux Components (top)**"
msgstr ""

msgid "**phyBOARD-Pollux Components (bottom)**"
msgstr ""

msgid "**imx8mp-phyboard-pollux-rdk*.dtb**: Kernel device tree file"
msgstr ""

msgid "Test Mode"
msgstr ""

msgid "Build U-Boot With a Fixed RAM Size and Frequency"
msgstr ""

msgid "Starting with PD23.1.0 NXP or PD24.1.2 mainline release, the phyCORE-|soc| SoMs with revision 1549.3 and newer also support 2GHz RAM timings. These will be enabled for supported boards automatically, but they can also be enabled or disabled manually."
msgstr ""

msgid "Edit the file configs/|u-boot-defconfig|. The fixed RAM size with 2GHz timings will be used:"
msgstr ""

msgid "After saving the changes, follow the remaining steps from |ref-build-uboot|."
msgstr ""

msgid "Build U-Boot With a Fixed RAM Frequency"
msgstr ""

msgid "Starting with PD24.1.2 mainline release or PD24.1.0 NXP release, U-Boot can also be built with just fixed RAM Frequency while the RAM size will still be used from EEPROM."
msgstr ""

msgid "Edit the file configs/|u-boot-defconfig|. The RAM size from EEPROM with fixed frequency will be used:"
msgstr ""

msgid "Mainline HEAD"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX8MP-PD24.1.0"
msgstr ""

msgid "BSP-Yocto-Ampliphy-i.MX8MP-PD24.1.2"
msgstr ""

msgid "BSP-Yocto-Ampliphy-i.MX8MP-PD24.1.1"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX8MP-PD23.1.0"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX8MP-PD22.1.2"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX8MP-PD22.1.1"
msgstr ""

msgid "|doc-id| |soc| BSP Mainline Manual Head"
msgstr ""

msgid "**lpddr4_pmu_train_1d_dmem_202006.bin, lpddr4_pmu_train_1d_imem_202006.bin, lpddr4_pmu_train_2d_dmem_202006.bin, lpddr4_pmu_train_2d_imem_202006.bin**: DDR PHY firmware images"
msgstr ""

msgid "**phytec-qt6demo-image\\*.wic.xz**: SD card image"
msgstr ""

msgid "This step only works if the size of the image file is less than 1,28GB due to limited RAM space available in the Bootloader."
msgstr ""

msgid "Uncompress your image:"
msgstr ""

msgid "Only the lower USB-A port is configured for storage devices and only this port will work when trying to access a storage device in U-Boot."
msgstr ""

msgid "These steps will show how to flash the eMMC on Linux with a USB stick. You only need a complete image saved on the USB stick and a bootable WIC image. (e.g. |yocto-imagename|-|yocto-machinename|.\\ |yocto-imageext|). Set the |ref-bootswitch| to SD Card."
msgstr ""

msgid "Flash your WIC image (for example |yocto-imagename|.roots.wic) from the SD card to eMMC. This will partition the card and copy imx-boot, Image, dtb, dtbo, and root file system to eMMC."
msgstr ""

msgid "The RAUC (Robust Auto-Update Controller) mechanism support has been added to meta-ampliphy. It controls the procedure of updating a device with new firmware. This includes updating the Linux kernel, Device Tree, and root filesystem. PHYTEC has written an online manual on how we have intergraded RAUC into our BSPs: `L-1006e.A6 RAUC Update & Device Management Manual <https://www.phytec.de/cdocuments/?doc=F4DiM>`__."
msgstr ""

msgid "Download imx-boot from our server or get it from your Yocto build directory at build/deploy-|yocto-distro|/images/|yocto-machinename|/. For flashing a wic image to eMMC, you will also need |yocto-imagename|-|yocto-machinename|.rootfs.wic"
msgstr ""

msgid "Now you can mount the root partition and copy e.g. the |yocto-imagename|-|yocto-machinename|.\\ |yocto-imageext| image to it. Then unmount it again:"
msgstr ""

msgid "Now you can mount the new partition and copy e.g. |yocto-imagename|-|yocto-machinename|.\\ |yocto-imageext| image to it. Then unmount it again:"
msgstr ""

msgid "The device tree representation for UART1 pinmuxing: :linux-phytec:`blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L387`"
msgstr ""

msgid "The device tree representation for RS232 and RS485: :linux-phytec:`blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L251`"
msgstr ""

msgid "We currently use dynamic IP addresses in U-Boot. This is enabled by this variable:"
msgstr ""

msgid "Set up path for NFS. A modification could look like this:"
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :linux-phytec:`/blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L261`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :linux-phytec:`/blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phycore-som.dtsi#L181`"
msgstr ""

msgid "The definition of the SPI master node in the device tree can be found here: :linux-phytec:`blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phycore-som.dtsi#L67`"
msgstr ""

msgid "Device tree configuration for the User I/O configuration can be found here: :linux-phytec:`blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L160`"
msgstr ""

msgid "General I²C1 bus configuration (e.g. |dt-som|.dtsi): :linux-phytec:`blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phycore-som.dtsi#L81`"
msgstr ""

msgid "General I²C2 bus configuration (e.g. |dt-carrierboard|.dts) :linux-phytec:`blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L145`"
msgstr ""

msgid "DT representation, e.g. in phyCORE-|soc| file imx8mp-phycore-som.dtsi can be found in our PHYTEC git: :linux-phytec:`blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phycore-som.dtsi#L169`"
msgstr ""

msgid "DT representation for I²C RTCs: :linux-phytec:`blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phycore-som.dtsi#L175`"
msgstr ""

msgid "DT representation for USB Host: :linux-phytec:`blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L220`"
msgstr ""

msgid "Device Tree CAN configuration of |dt-carrierboard|.dts: :linux-phytec:`blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L130`"
msgstr ""

msgid "The mainline BSP currently only supports software rendering."
msgstr ""

msgid "The |sbc| supports LVDS output via the LVDS1 connector on the carrier board. The LVDS interface is enabled by default."
msgstr ""

msgid "Weston will work without any additional configuration. Configuration options are done at /etc/xdg/weston/weston.ini."
msgstr ""

msgid "Device tree description of LVDS can be found here: :linux-phytec:`blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L182`"
msgstr ""

msgid "We noticed some visible backlight flickering on brightness level 1 (probably due to frequency problems with the hardware)."
msgstr ""

msgid "The X_ONOFF pin connected to the ON/OFF button can be pressed long to trigger Power OFF without SW intervention. With the *snvs_pwrkey* driver, the KEY_POWER event is also reported to userspace when the button is pressed. On default, systemd is configured to ignore such events. The function of Power OFF without SW intervention are not configured. Triggering a power off with systemd when pushing the ON/OFF button can be configured under ``/etc/systemd/logind.conf`` and set using:"
msgstr ""

msgid "Even if there is no network available, you can update the eMMC. For that, you only need a ready-to-use image file (``*.wic``) located on the SD card. Because the image file is quite large, you have to enlarge your SD card to use its full space (if it was not enlarged before). To enlarge your SD card, see Resizing ext4 Root Filesystem."
msgstr ""

msgid "There is one more overlay available for phyboard-pollux-imx8mp-2.conf: imx8mp-phyboard-pollux-1552.1.dtbo"
msgstr ""

msgid "The following is an example of the pin muxing of the UART1 device in imx8mp-phyboard-pollux.dtsi:"
msgstr ""

msgid "The device tree representation for RS232 and RS485: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n331`"
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n367`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n220`"
msgstr ""

msgid ":imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n72`"
msgstr ""

msgid "Device tree configuration for the User I/O configuration can be found here: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n216`"
msgstr ""

msgid "General I²C1 bus configuration (e.g. |dt-som|.dtsi): :imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n105`"
msgstr ""

msgid "General I²C2 bus configuration (e.g. |dt-carrierboard|.dts) :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n201`"
msgstr ""

msgid "DT representation, e.g. in phyCORE-|soc| file imx8mp-phycore-som.dtsi can be found in our PHYTEC git: :imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n201`"
msgstr ""

msgid "DT representation for I²C RTCs: :imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy17#n207`"
msgstr ""

msgid "DT representation for USB Host: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n341`"
msgstr ""

msgid "Device Tree CAN configuration of imx8mp-phyboard-pollux.dtsi: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n165`"
msgstr ""

msgid "Device Tree PCIe configuration of imx8mm-phyboard-polis.dtsi: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n277`"
msgstr ""

msgid "If the sound is not audible change playback devices to the software volume control playback devices, set *playback.pcm* to the respective softvol playback device either \"softvol_hdmi\" or \"softvol_pebav10\". Use alsamixer controls to vary the volume levels."
msgstr ""

msgid "Device Tree Audio configuration: :imx-dt:`overlays/imx8mp-phyboard-pollux-peb-av-010.dtso?h=v5.10.72_2.2.0-phy17#n57`"
msgstr ""

msgid "The |sbc| supports up to 4 different display outputs. Three can be used simultaneously. The following table shows the required extensions and devicetree overlays for the different interfaces."
msgstr ""

msgid "imx8mp-phyboard-pollux-peb-av-010.dtbo (loaded by default)"
msgstr ""

msgid "MIPI"
msgstr ""

msgid "PEB-AV-12 (MIPI to LVDS)"
msgstr ""

msgid "imx8mp-phyboard-pollux-peb-av-012.dtbo"
msgstr ""

msgid "HDMI will not work if LVDS1 (onboard) is enabled."
msgstr ""

msgid "The default-enabled Interfaces are HDMI and LVDS0 (PEB-AV-010). We support a 10'' edt,etml1010g0dka display for the PEB-AV-10 and PEB-AV-12."
msgstr ""

msgid "In our BSP, the default Weston output is set to HDMI. ::"
msgstr ""

msgid "Device tree description of LVDS-1 and HDMI can be found here: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n255` :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n180`"
msgstr ""

msgid "The device tree of LVDS-0 on PEB-AV-10 can be found here: :imx-dt:`overlays/imx8mp-phyboard-pollux-peb-av-010.dtso?h=v5.10.72_2.2.0-phy17#n132`"
msgstr ""

msgid "The device tree description of GPIO Fan can be found here: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy17#n26`"
msgstr ""

msgid "The |soc| SoC contains a Neural Processing Unit up to 2.3 TOPS as an accelerator for artificial intelligence operations. Refer to our latest phyCORE-|soc| AI Kit Guide on the phyCORE-|soc| download section to get information about the NPU: `L-1015e.A0 phyCORE-i.MX 8M Plus AI Kit Guide <https://www.phytec.de/cdocuments/?doc=ZQBhDw>`_"
msgstr ""

msgid "NXP Examples for eIQ"
msgstr ""

msgid "NXP provides a set of machine learning examples for eIQ using Python3. To add a pre-configured machine learning package group, add to your local.conf and build your BSP::"
msgstr ""

msgid "This will require about 1GB of additional space on the SD Card. Instructions on how to install and use the NXP examples can be found at https://community.nxp.com/t5/NXP-Tech-Blog/PyeIQ-3-x-Release-User-Guide/ba-p/1305998."
msgstr ""

msgid "The installation of the eiq examples with pip3 requires an internet connection."
msgstr ""

msgid "On some Ubuntu 20.04 hosts, cmake uses the host's Python 3 instead of Python 3.7 from Yocto when building python3-pybind11. (see https://community.nxp.com/t5/i-MX-Processors/Yocto-L5-4-70-2-3-0-build-image-failed/m-p/1219619)"
msgstr ""

msgid "As a workaround edit, the python3-pybind11 recipe by::"
msgstr ""

msgid "and add to the file::"
msgstr ""

msgid "Reading the registers using ``/dev/mem`` will cause the system to hang unless the *ocotp_root_clk* is enabled. To enable this clock permanent, add to the device tree:"
msgstr ""

msgid "2024/08/05"
msgstr ""

msgid "When the PCM-070 does not have the X1 extension connector populated, some Software features described here do not work. These are Wirless LAN, PCIe, CSI (cameras), PEB-AV-12, CAN, USB-OTG."
msgstr ""

msgid "Edit the file configs/phycore-|kernel-socname|\\_defconfig:"
msgstr ""

msgid "Choose the correct RAM size as populated on the board and uncomment the line for this ram size. For Article number 0F\\ **8**\\ 443I, use [...]_4GB_2GHZ, for 0F\\ **5**\\ 443I, use [...]_4GB. After saving the changes, follow the remaining steps from |ref-build-uboot|."
msgstr ""

msgid "The device tree representation for RS232 and RS485: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy18#n331`"
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy18#n367`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy18#n220`"
msgstr ""

msgid ":imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy18#n72`"
msgstr ""

msgid "Device tree configuration for the User I/O configuration can be found here: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy18#n216`"
msgstr ""

msgid "General I²C1 bus configuration (e.g. |dt-som|.dtsi): :imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy18#n105`"
msgstr ""

msgid "General I²C2 bus configuration (e.g. |dt-carrierboard|.dts) :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy18#n201`"
msgstr ""

msgid "DT representation, e.g. in phyCORE-|soc| file imx8mp-phycore-som.dtsi can be found in our PHYTEC git: :imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy18#n201`"
msgstr ""

msgid "DT representation for I²C RTCs: :imx-dt:`imx8mp-phycore-som.dtsi?h=v5.10.72_2.2.0-phy18#n207`"
msgstr ""

msgid "DT representation for USB Host: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy18#n341`"
msgstr ""

msgid "Device Tree CAN configuration of imx8mp-phyboard-pollux.dtsi: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy18#n165`"
msgstr ""

msgid "Device Tree PCIe configuration of imx8mm-phyboard-polis.dtsi: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy18#n277`"
msgstr ""

msgid "Device Tree Audio configuration: :imx-dt:`overlays/imx8mp-phyboard-pollux-peb-av-010.dtso?h=v5.10.72_2.2.0-phy18#n57`"
msgstr ""

msgid "Device tree description of LVDS-1 and HDMI can be found here: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy18#n255` :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy18#n180`"
msgstr ""

msgid "The device tree of LVDS-0 on PEB-AV-10 can be found here: :imx-dt:`overlays/imx8mp-phyboard-pollux-peb-av-010.dtso?h=v5.10.72_2.2.0-phy18#n132`"
msgstr ""

msgid "The device tree description of GPIO Fan can be found here: :imx-dt:`imx8mp-phyboard-pollux.dtsi?h=v5.10.72_2.2.0-phy18#n26`"
msgstr ""

msgid "Starting with PD23.1.0 release, the phyCORE-|soc| SoMs with revision 1549.3 and newer also support 2GHz RAM timings. These will be enabled for supported boards automatically, but they can also be enabled or disabled manually."
msgstr ""

msgid "Edit the file configs/phycore-|kernel-socname|\\_defconfig. The fixed RAM size with 2GHz timings will be used:"
msgstr ""

msgid "Choose the correct RAM size as populated on the board and uncomment the line for this ram size. When not specifying the ``CONFIG_PHYCORE_IMX8MP_USE_2GHZ_RAM_TIMINGS`` option, the 1.5GHz timings will be chosen by default. After saving the changes, follow the remaining steps from |ref-build-uboot|."
msgstr ""

msgid "The device tree representation for UART1 pinmuxing: :imx-dt:`imx8mp-phyboard-pollux-rdk.dts?h=v5.15.71_2.2.2-phy3#n536`"
msgstr ""

msgid "The device tree representation for RS232 and RS485: :imx-dt:`imx8mp-phyboard-pollux-rdk.dts?h=v5.15.71_2.2.2-phy3#n341`"
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :imx-dt:`imx8mp-phyboard-pollux-rdk.dts?h=v5.15.71_2.2.2-phy3#n380`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :imx-dt:`imx8mp-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n223`"
msgstr ""

msgid ":imx-dt:`imx8mp-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n76`"
msgstr ""

msgid "Device tree configuration for the User I/O configuration can be found here: :imx-dt:`imx8mp-phyboard-pollux-rdk.dts?h=v5.15.71_2.2.2-phy3#n229`"
msgstr ""

msgid "General I²C1 bus configuration (e.g. |dt-som|.dtsi): :imx-dt:`imx8mp-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n110`"
msgstr ""

msgid "General I²C2 bus configuration (e.g. |dt-carrierboard|.dts) :imx-dt:`imx8mp-phyboard-pollux-rdk.dts?h=v5.15.71_2.2.2-phy3#n212`"
msgstr ""

msgid "On the |som| there is an i2c EEPROM flash populated. It has two addresses. The main EEPROM space (bus: I2C-0 address: 0x51) and the ID-page (bus: I2C-0 address: 0x59) can be accessed via the sysfs interface in Linux. The first 256 bytes of the main EEPROM and the ID-page are used for board detection and must not be overwritten. Overwriting reserved spaces will result in boot issue."
msgstr ""

msgid "DT representation, e.g. in phyCORE-|soc| file imx8mp-phycore-som.dtsi can be found in our PHYTEC git: :imx-dt:`imx8mp-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n199`"
msgstr ""

msgid "DT representation for I²C RTCs: :imx-dt:`imx8mp-phycore-som.dtsi?h=v5.15.71_2.2.2-phy3#n207`"
msgstr ""

msgid "DT representation for USB Host: :imx-dt:`imx8mp-phyboard-pollux-rdk.dts?h=v5.15.71_2.2.2-phy3#n351`"
msgstr ""

msgid "Device Tree CAN configuration of |dt-carrierboard|.dts: :imx-dt:`imx8mp-phyboard-pollux-rdk.dts?h=v5.15.71_2.2.2-phy3#n175`"
msgstr ""

msgid "Device Tree PCIe configuration of |dt-carrierboard|.dts: :imx-dt:`imx8mp-phyboard-pollux-rdk.dts?h=v5.15.71_2.2.2-phy3#n287`"
msgstr ""

msgid "Device Tree Audio configuration: :imx-dt:`overlays/imx8mp-phyboard-pollux-peb-av-010.dtso?h=v5.15.71_2.2.2-phy3#n58`"
msgstr ""

msgid "For dual display at LVDS0 (PEB-AV-010) and MIPI (PEB-AV-012), both dtbos need to be loaded at the bootenv.txt and the weston.ini should look like this:"
msgstr ""

msgid "Triple Display"
msgstr ""

msgid "Three outputs: HDMI, LVDS-1 (PEB-AV-10), and LVDS-2 (PEB-AV-12). Remember to load both dtbos for LVDS interfaces."
msgstr ""

msgid "Device tree description of LVDS-1 and HDMI can be found here: :imx-dt:`imx8mp-phyboard-pollux-rdk.dts?h=v5.15.71_2.2.2-phy3#n264` :imx-dt:`imx8mp-phyboard-pollux-rdk.dts?h=v5.15.71_2.2.2-phy3#n191`"
msgstr ""

msgid "The device tree of LVDS-0 on PEB-AV-10 can be found here: :imx-dt:`overlays/imx8mp-phyboard-pollux-peb-av-010.dtso?h=v5.15.71_2.2.2-phy3#n133`"
msgstr ""

msgid "The device tree description of GPIO Fan can be found here: :imx-dt:`imx8mp-phyboard-pollux-rdk.dts?h=v5.15.71_2.2.2-phy3#n33`"
msgstr ""

msgid "2024/11/08"
msgstr ""

msgid "2024/11/06"
msgstr ""

msgid "2024/04/08"
msgstr ""

msgid "PD24.1.1"
msgstr ""

msgid "Send the image with the ``dd`` command combined with ssh through the network to the eMMC of your device:"
msgstr ""

msgid "Flash eMMC from USB in U-Boot on Target"
msgstr ""

msgid "Flash an SD card with a working image and create a third FAT partition. Copy the WIC image (for example |yocto-imagename|.\\ |yocto-imageext|) to this partition."
msgstr ""

msgid "Flash your WIC image (for example |yocto-imagename|.\\ |yocto-imageext|) from the SD card to eMMC. This will partition the card and copy imx-boot, Image, dtb, dtbo, and root file system to eMMC."
msgstr ""

msgid "Alternatively, ``dd`` may be used instead:"
msgstr ""

msgid "Keep in mind that the root partition does not make use of the full space when flashing with ``dd``."
msgstr ""

msgid "Download imx-boot from our server or get it from your Yocto build directory at build/deploy/images/|yocto-machinename|/. For flashing a wic image to eMMC, you will also need |yocto-imagename|-|yocto-machinename|.\\ |yocto-imageext|"
msgstr ""

msgid "Build the SDK"
msgstr ""

msgid "You can build the SDK yourself with Yocto:"
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :linux-phytec:`blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phyboard-pollux-rdk.dts#L261`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :linux-phytec:`blob/v6.6.21-phy1/arch/arm64/boot/dts/freescale/imx8mp-phycore-som.dtsi#L181`"
msgstr ""

msgid "|doc-id| |soc| BSP Mainline Manual"
msgstr ""

msgid "2024/06/26"
msgstr ""

msgid "Download imx-boot from our server or get it from your Yocto build directory at build/deploy/images/|yocto-machinename|/. For flashing a wic image to eMMC, you will also need |yocto-imagename|-|yocto-machinename|.rootfs.wic"
msgstr ""

msgid "i.MX 93 Manuals"
msgstr ""

msgid "i.MX 95 Manuals"
msgstr ""

msgid "i.MX 9 Manuals"
msgstr ""

msgid "i.MX 9"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX93-PD24.2.1"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX93-PD24.2.0"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX93-PD24.1.1"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX93-PD24.1.0"
msgstr ""

msgid "Mickledore"
msgstr ""

msgid "2024/01/31"
msgstr ""

msgid "On our web page, you can see all supported Machines with the available Article Numbers for this release: |yocto-manifestname|, see `download <dlpage-bsp_>`_."
msgstr ""

msgid "If you choose a specific **Machine Name** in the section **Supported Machines**, you can see which **Article Numbers** are available under this machine and also a short description of the hardware information. In case you only have the **Article Number** of your hardware, you can leave the **Machine Name** drop-down menu empty and only choose your **Article Number**. Now it should show you the necessary **Machine Name** for your specific hardware."
msgstr ""

msgid "phyBOARD-Segin i.MX 93 Components"
msgstr ""

msgid "**phyBOARD-Segin i.MX 93 Components (top)**"
msgstr ""

msgid "**phyBOARD-Segin i.MX 93 Components (bottom)**"
msgstr ""

msgid "phyBOARD-Nash i.MX 93 Components"
msgstr ""

msgid "**phyBOARD-Nash i.MX 93 Components (top)**"
msgstr ""

msgid "**phyBOARD-Nash i.MX 93 Components (bottom)**"
msgstr ""

msgid "Connect the target (|ref-debugusbconnector|) and the host with **serial cable**"
msgstr ""

msgid "Open serial port with 115200 baud and 8N1 (you should see u-boot/linux start on the console"
msgstr ""

msgid "**bl31-imx93.bin**: ARM Trusted Firmware binary"
msgstr ""

msgid "**lpddr4_dmem_1d_v202201.bin, lpddr4_dmem_2d_v202201.bin, lpddr4_imem_1d_v202201.bin, lpddr4_imem_2d_v202201.bin**: DDR PHY firmware images"
msgstr ""

msgid "**imx93-phyboard-segin.dtb**: Kernel device tree file"
msgstr ""

msgid "**imx93-phy\\*.dtbo**: Kernel device tree overlay files"
msgstr ""

msgid "**phytec-\\*.tar.gz**: Root file system, of bitbake-image that was built."
msgstr ""

msgid "**phytec-qt6demo-image-phyboard-segin-imx93-2.tar.gz**: when bitbake-build was processed for ``phytec-qt6demo-image``"
msgstr ""

msgid "**phytec-headless-image-phyboard-segin-imx93-2.tar.gz**: when bitbake-build was processed for ``phytec-headless-image``"
msgstr ""

msgid "**phytec-\\*.wic.xz**: Compressed bootable SD card image of bitbake-image that was built. Includes bootloader, DTBs, Kernel and Root file system."
msgstr ""

msgid "**phytec-qt6demo-image-phyboard-segin-imx93-2.wic.xz**: when bitbake-build was processed for ``phytec-qt6demo-image``"
msgstr ""

msgid "**phytec-headless-image-phyboard-segin-imx93-2.wic.xz**: when bitbake-build was processed for ``phytec-headless-image``"
msgstr ""

msgid "**imx93-11x11-evk_m33_\\*.bin**, binaries of demo applications for the Cortex-M33 MCU; can be manually loaded and started with U-Boot or Linux"
msgstr ""

msgid "Hardware revision baseboard: 1472.5"
msgstr ""

msgid "can be run to inspect whether the current setup is affected. If |emmcdev|\\p1 and mmcblk1p1 have an identical UUID, the setup is affected."
msgstr ""

msgid "If there is no network available, you can update the eMMC from SD card. For that, you only need a ready-to-use image file (``*.wic``) located on the SD card. Because the image file is quite large, you have to enlarge your SD card to use its full space (if it was not enlarged before). To enlarge your SD card, see Resizing ext4 Root Filesystem."
msgstr ""

msgid "You can flash the eMMC on Linux. You only need a partup package or WIC image saved on the SD card."
msgstr ""

msgid "Show your saved partup package or WIC image or WIC.XZ image files on the SD card:"
msgstr ""

msgid "The eMMC device can be recognized by the fact that it contains two boot partitions: (|emmcdev|\\ **boot0**; |emmcdev|\\ **boot1**)"
msgstr ""

msgid "Write the image to the phyCORE-|soc| eMMC (/dev/|emmcdev| **without** partition) using `partup`_:"
msgstr ""

msgid "**Using partup is highly recommended since it is easier to use and has the advantage of using the full capacity of the eMMC device, adjusting partitions accordingly.**"
msgstr ""

msgid "Alternatively, ``dd`` may be used instead."
msgstr ""

msgid "For uncompressed WIC images (\\*.wic):"
msgstr ""

msgid "For compressed WIC images (\\*.wic.xz):"
msgstr ""

msgid "Some PHYTECs BSPs produce compressed ``.wic.xz`` images. In this case, the compressed image must first be uncompressed."
msgstr ""

msgid "Take an uncompressed image on the host and send it with ssh through the network to the eMMC of the target with a one-line command:"
msgstr ""

msgid "Write the image to the phyCORE-|soc| eMMC (/dev/|emmcdev| without partition):"
msgstr ""

msgid "The RAUC (Robust Auto-Update Controller) mechanism support has been added to meta-ampliphy. It controls the procedure of updating a device with new firmware. This includes updating the Linux kernel, Device Tree, and root filesystem. PHYTEC has written an online manual on how we have intergraded RAUC into our BSPs: `L-1006e.A5 RAUC Update & Device Management Manual <https://www.phytec.de/cdocuments/?doc=fgByJg>`__."
msgstr ""

msgid "To build the imx-boot, you need to **gather** these **files** for later use with **imx-mkimage tool**:"
msgstr ""

msgid "**Container image**: mx93a1-ahab-container.img"
msgstr ""

msgid "If you already built our BSP with Yocto, you can get these files from the directory mentioned here: |ref-bsp-images|"
msgstr ""

msgid "Or you can download the files from the PHYTEC download server (|link-boot-tools|). You can use the commands below to download all the files from that server:"
msgstr ""

msgid "Build u-boot:"
msgstr ""

msgid "|u-boot-multiple-defconfig-note|"
msgstr ""

msgid "Build final flash.bin with imx-mkimage"
msgstr ""

msgid "Get imx-mkimage:"
msgstr ""

msgid "Copy firmware binaries into imx-mkimage"
msgstr ""

msgid "Copy u-boot binaries and DTB into imx-mkimage"
msgstr ""

msgid "|u-boot-multiple-dtb-note|"
msgstr ""

msgid "Build final flash.bin binary"
msgstr ""

msgid "The flash.bin can be found at imx-mkimage/|u-boot-soc-name|/ directory and now can be flashed. A chip-specific offset is needed:"
msgstr ""

msgid "In the command above, replace ``<sd-card>`` with your sd-card device name. For more information on how to find the device name, see the section :ref:`Finding the Correct Device <getting-started-find-correct-device>` in Getting Started."
msgstr ""

msgid "Make sure the boot partition is mounted! If it is not you can mount it with:"
msgstr ""

#, python-brace-format
msgid "We use the ``${overlays}`` variable for overlays describing expansion boards that can not be detected during run time. To prevent applying overlays listed in the ``${overlays}`` variable during boot, the ``${no_overlays}`` variable can be set to `1` in the bootloader environment."
msgstr ""

msgid "The first part of the string MX93_PAD_UART1_RXD__LPUART1_RX names the pad (in this example UART1_RXD). The second part of the string (LPUART1_RX) is the desired muxing option for this pad. The pad setting value (hex value on the right) defines different modes of the pad, for example, if internal pull resistors are activated or not. In this case, the internal pull up is activated."
msgstr ""

msgid "The device tree representation for UART1 pinmuxing: :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n267`"
msgstr ""

msgid "|sbc|-|soc| provides two ethernet interfaces. A 100 megabit Ethernet is provided by our module and board."
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n216`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :imx-dt:`imx93-phycore-som.dtsi?h=v6.1.36_2.1.0-phy1#n195`"
msgstr ""

msgid "The |sbc| doesn't have a set of pins especially dedicated for user I/Os since all GPIOs are used by kernel device drivers or used for a specific purpose. The processor has organized its GPIOs into five banks of 32 GPIOs each (GPIO1 – GPIO4) GPIOs. gpiochip0, gpiochip32, gpiochip64 and gpiochip96 are the sysfs representation of these internal |soc| GPIO banks GPIO1 – GPIO4."
msgstr ""

msgid "The GPIOs are identified as GPIO<X>_<Y> (e.g. GPIO4_07). <X> identifies the GPIO bank and counts from 1 to 4, while <Y> stands for the GPIO within the bank. <Y> is being counted from 0 to 31 (32 GPIOs on each bank)."
msgstr ""

msgid "Order of GPIOchips in ``i.MX 93 Application Processor Reference Manual`` and in Linux kernel differ!"
msgstr ""

msgid "GPIOchip address"
msgstr ""

msgid "Linux"
msgstr ""

msgid "Reference Manual"
msgstr ""

msgid "0x43810080"
msgstr ""

msgid "gpiochip0"
msgstr ""

msgid "gpiochip2"
msgstr ""

msgid "0x43820080"
msgstr ""

msgid "gpiochip1"
msgstr ""

msgid "gpiochip3"
msgstr ""

msgid "0x43830080"
msgstr ""

msgid "gpiochip4"
msgstr ""

msgid "0x47400080"
msgstr ""

msgid "Read the value of a GPIO (e.g GPIO 3 from chip0):"
msgstr ""

msgid "Set the value of GPIO 3 on chip0 to 0 and exit tool:"
msgstr ""

msgid "Support to access GPIOs via sysfs is not enabled by default any more. It is only possible with manually enabling CONFIG_GPIO_SYSFS in the kernel configuration. To make CONFIG_GPIO_SYSFS visible in menuconfig the option CONFIG_EXPERT has to be enabled first."
msgstr ""

msgid "You can also add this option for example to the imx9_phytec_distro.config config fragment in the linux kernel sources under arch/arm64/configs ::"
msgstr ""

msgid "Here the LEDs ``green:heartbeat`` is on the |som|. If you are using phyBOARD-Segin there is also ``yellow`` LED which is populated on the PEB-EVAL-01."
msgstr ""

msgid "Device tree configuration for the User I/O configuration can be found here: :imx-dt:`imx93-phyboard-segin-peb-eval-01.dtso?h=v6.1.36_2.1.0-phy1#n33`"
msgstr ""

msgid "General I²C1 bus configuration (e.g. |dt-som|.dtsi): :imx-dt:`imx93-phycore-som.dtsi?h=v6.1.36_2.1.0-phy1#n88`"
msgstr ""

msgid "General I²C2 bus configuration (e.g. |dt-carrierboard|.dts) :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n155`"
msgstr ""

msgid "There are two different I2C EEPROM flashes populated on |som| SoM and on the |sbc|. For now only the one on the |som| is enabled, and it is used for board detection."
msgstr ""

msgid "The I2C EEPROM on the |som| SoM has its memory divided into two parts."
msgstr ""

msgid "normal area (size: 4096 bytes, bus: I2C-2, addr: 0x50)"
msgstr ""

msgid "ID page (size: 32 bytes, bus: I2C-2, addr: 0x58)"
msgstr ""

msgid "It is possible to read and write from the device populated:"
msgstr ""

msgid "To fill the whole EEPROM (ID page) with zeros we first need to disable the EEPROM write protection, use:"
msgstr ""

msgid "Then the EEPROM can be written to:"
msgstr ""

msgid "The first 256 bytes of the normal EEPROM area (bus: I2C-2 addr: 0x50) are reserved and should not be overwritten! (See below)"
msgstr ""

msgid "PHYTEC uses first 256 bytes in EEPROM normal area to store information about the SoM. This includes PCB revision and mounting options."
msgstr ""

msgid "If the first 256 bytes of the normal area are deleted, the bootloader will fall back to the |som| Kit RAM setup, which is |kit-ram-size| RAM."
msgstr ""

msgid "Data in the first 256 bytes of the normal EEPROM area (bus: I2C-2 addr: 0x50) shouldn't be erased or corrupted! This might influence the behavior of the bootloader. The board might not boot correctly anymore."
msgstr ""

msgid "The hardware introspection data is pre-written on the EEPROM data spaces. If you have accidentally deleted or overwritten the HW data, you could contact our support!"
msgstr ""

msgid "DT representation, e.g. in phyCORE-|soc| file can be found in our PHYTEC git: :imx-dt:`imx93-phycore-som.dtsi?h=v6.1.36_2.1.0-phy1#n173`"
msgstr ""

msgid "DT representation for I²C RTCs: :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n173`"
msgstr ""

msgid "The USB controller of the |soc| SoC provides a low-cost connectivity solution for numerous consumer portable devices by providing a mechanism for data transfer between USB devices with a line/bus speed of up to 480 Mbps (HighSpeed 'HS'). The USB subsystem has two independent USB controller cores. Both cores are capable of acting as a USB peripheral device or a USB host, but on the |sbc| one of them is used as a host-only port (USB-A connector)."
msgstr ""

msgid "The OTG port provides an additional pin for over-current protection, which is not used on the |sbc|. Since it's not used, the driver part is also disabled from within the device tree. In case this pin is used, activate this over-current in the device tree and set the correct polarity (active high/low) according to the device specification. For the correct setup, please refer to the Kernel documentation under Linux/Documentation/devicetree/bindings/usb/ci-hdrc-usb2.txt."
msgstr ""

msgid "DT representation for USB Host: :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n190`"
msgstr ""

msgid "The |sbc| has one flexCAN interface supporting CAN FD. They are supported by the Linux standard CAN framework which builds upon the Linux network layer. Using this framework, the CAN interfaces behave like an ordinary Linux network device, with some additional features special to CAN. More information can be found in the Linux Kernel documentation: https://www.kernel.org/doc/html/latest/networking/can.html"
msgstr ""

msgid "to see the state of the interfaces. The CAN interface should show up as can0."
msgstr ""

msgid "Device Tree CAN configuration of |dt-carrierboard|.dts: :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n147`"
msgstr ""

msgid "On |sbc| the TI TLV320AIC3007 audio codec is used. It uses I2S for data transmission and I2C for codec control. The audio signals available are:"
msgstr ""

msgid "Stereo LINE IN,"
msgstr ""

msgid "Stereo LINE OUT,"
msgstr ""

msgid "Output where D-Class 1W speaker can be connected"
msgstr ""

msgid "If Speaker volume it too low you can increase its volume with (values 0-3):"
msgstr ""

msgid "Speaker output is only mono so when stereo track is played only left channel will be played by speaker."
msgstr ""

msgid "``arecord`` is a command-line tool for capturing audio streams which use Line In as the default input source."
msgstr ""

msgid "Device Tree Audio configuration: :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.36_2.1.0-phy1#n62`"
msgstr ""

msgid "The **phyBOARD-Segin** i.MX 93 supports PEB-AV-02 with 7'' ``edt,etm0700g0edh6`` parallel display with capacitive touchscreen. Device-tree overlay for the aforementioned display is enabled in ``/boot/bootenv.txt`` by default!"
msgstr ""

msgid "The **phyBOARD-Nash** i.MX 93 needs additional adapter to support 10'' ``edt,etml1010g3dra`` LVDS display with capacitive touchscreen. The PEB-AV-10 (1531.1 revision) can be bought separately to the Kit. Device-tree overlay for the aforementioned adapter is enabled in ``/boot/bootenv.txt`` by default!"
msgstr ""

msgid "The device tree of PEB-AV-02 can be found here: :imx-dt:`imx93-phyboard-segin-peb-av-02.dtso?h=v6.1.36_2.1.0-phy1`"
msgstr ""

msgid "The CPU in the |soc| SoC is able to scale the clock frequency and the voltage. This is used to save power when the full performance of the CPU is not needed. Unlike i.MX8 M family the i.MX 93 doesn't support *Dynamic* Voltage and Frequency Scaling (DVFS), but has the support of basic **Voltage and Frequency Scaling (VFS)**. The board can be put into these modes:"
msgstr ""

msgid "nominal (ND),"
msgstr ""

msgid "overdrive (OD),"
msgstr ""

msgid "Low Drive (LD) and"
msgstr ""

msgid "Low Drive (LD) with Software Fast Frequency Change (SWFFC)."
msgstr ""

msgid "Mode"
msgstr ""

msgid "CPU freq"
msgstr ""

msgid "DDR data rate"
msgstr ""

msgid "VDD_SOC"
msgstr ""

msgid "OverDrive (OD)"
msgstr ""

msgid "1.7 GHz"
msgstr ""

msgid "3733 MT/s"
msgstr ""

msgid "900mV"
msgstr ""

msgid "NominalDrive (ND)"
msgstr ""

msgid "1.4 GHz"
msgstr ""

msgid "1866 MT/s"
msgstr ""

msgid "850mV"
msgstr ""

msgid "LowDrive (LD)"
msgstr ""

msgid "900 MHz"
msgstr ""

msgid "800mV"
msgstr ""

msgid "LowDrive (LD) with SWFFC"
msgstr ""

msgid "625 MT/s"
msgstr ""

msgid "The |soc| BSP supports the VFS feature. The Linux kernel provides a LPM driver that allows setting VDD_SOC, CPU freq and DDR speed."
msgstr ""

msgid "Low-cost |soc| SoC variants such as parts numbers NXP IMX9301/IMX9302 do not support VFS features. Those SoCs always run in LowDrive (LD) mode. Hence, the Linux LPM driver is disabled automatically for SoMs with such SoCs."
msgstr ""

msgid "To put the device in **OverDrive (OD)** mode type:"
msgstr ""

msgid "To put the device in **NominalDrive (ND)** mode type:"
msgstr ""

msgid "To put the device in **LowDrive (LD)** mode type:"
msgstr ""

msgid "To put the device in **LowDrive (LD)** mode with the lowest DDR speed with SWFFC type:"
msgstr ""

msgid "To check the current CPU frequency type:"
msgstr ""

msgid "To check the current mode and DDR frequency type:"
msgstr ""

msgid "To check the current VDD_SOC type:"
msgstr ""

msgid "For more detailed information about the LPM driver and modes, refer to the NXPs documentation: https://docs.nxp.com/bundle/AN13917/page/topics/low_power_mode_use_cases.html"
msgstr ""

msgid "The |soc| SoC can have multiple processor cores on the die. The |soc|, for example, has 2 ARM Cores which can be turned on and off individually at runtime."
msgstr ""

msgid "Here the system has two processor cores. By default, all available cores in the system are enabled to get maximum performance."
msgstr ""

msgid "Device can be put into suspend and waken-up with PEB-EVAL-01 S2 button"
msgstr ""

msgid "To wake up with RTC alarm check: `RTC Wakealarm`_"
msgstr ""

msgid "There are two trip points registered by the imx_thermal kernel driver. These differ depending on the CPU variant. A distinction is made between Commercial, Industrial and Extended Industrial."
msgstr ""

msgid "Extended Industrial"
msgstr ""

msgid "115°C"
msgstr ""

msgid "120°C"
msgstr ""

msgid "The kernel thermal management uses these trip points to trigger events and change the cooling behavior. The following thermal policies (also named thermal governors) are available in the kernel: Step Wise and Power Allocator. The default policy used in the BSP is step_wise."
msgstr ""

msgid "If the value of the SoC temperature in the sysfs file temp reaches *trip_point_1*, the board immediately shuts down to avoid any heat damage. If this doesn't meet you expectations, an external supervisor circuit that starts the module again with X_ONOFF signal when the temperature drops below a selected trip point can be implemented"
msgstr ""

msgid "PWM Fan"
msgstr ""

msgid "A PWM fan can be connected to the phyBOARD-Nash i.MX 93 connector X48 (label FAN)."
msgstr ""

msgid "Afterwards, a PWM fan overlay needs to be activated, otherwise PWM fan won't be recognized."
msgstr ""

msgid "The bootenv.txt file should look like this (it can also contain other devicetree overlays!):"
msgstr ""

msgid "The SoC only contains one temperature sensor which is already used by the thermal frequency scaling. The fan thus can not be controlled by the kernel. We use lmsensors with hwmon for this instead. lmsensors reads the temperature periodically and adjusts output PWM duty-cycle accordingly. By default, temperature threshold for PWM fan to activate is set to 60°C."
msgstr ""

msgid "bbnsm Power Key"
msgstr ""

msgid "The X_ONOFF pin connected to the ON/OFF button can be pressed long (for 5 seconds) to trigger Power OFF without SW intervention or used to wake up the system out of suspend. With the *bbnsm_pwrkey* driver, the KEY_POWER event is also reported to userspace when the button is pressed. On default, systemd is configured to ignore such events. The function of Power OFF without SW intervention are not configured. Triggering a power off with systemd when pushing the ON/OFF button can be configured under ``/etc/systemd/logind.conf`` and set using:"
msgstr ""

msgid "PXP"
msgstr ""

msgid "The |soc| SoC contains an PiXel Pipeline (PXP). The PXP combines the following into a single processing engine:"
msgstr ""

msgid "Scaling"
msgstr ""

msgid "Color Space Conversion (CSC)"
msgstr ""

msgid "Secondary Color Space Conversion (CSC2)"
msgstr ""

msgid "Rotation"
msgstr ""

msgid "and thus minimizes the memory footprint required for the display pipeline. How to use the PXP with Gstreamer and Wayland check the `How to Use PXP in GStreamer and Wayland` (AN13829) Application note from NXP."
msgstr ""

msgid "The |soc| provides one-time programmable fuses to store information such as the MAC address, boot configuration, and other permanent settings (\"On-Chip OTP Controller (OCOTP_CTRL)\" in the |soc| Reference Manual). The following list is an abstract from the |soc| Reference Manual and includes some useful registers in the OCOTP_CTRL (at base address 0x47510000):"
msgstr ""

msgid "Memory offset at 0x47510000"
msgstr ""

msgid "BOOT_CFG0"
msgstr ""

msgid "3"
msgstr ""

msgid "0    0x60"
msgstr ""

msgid "boot fuse settings"
msgstr ""

msgid "BOOT_CFG1"
msgstr ""

msgid "1    0x64"
msgstr ""

msgid "BOOT_CFG2"
msgstr ""

msgid "2    0x68"
msgstr ""

msgid "BOOT_CFG3"
msgstr ""

msgid "3    0x6c"
msgstr ""

msgid "MAC1_ADDR"
msgstr ""

msgid "39"
msgstr ""

msgid "0x4ec"
msgstr ""

msgid "MAC1/2_ADDR"
msgstr ""

msgid "4"
msgstr ""

msgid "0x4f0"
msgstr ""

msgid "MAC2_ADDR"
msgstr ""

msgid "5"
msgstr ""

msgid "0x4f4"
msgstr ""

msgid "MAC1_ADDR:"
msgstr ""

msgid "Burning MAC addresses"
msgstr ""

msgid "Let's say we want to burn the following MAC addresses:"
msgstr ""

msgid "MAC1"
msgstr ""

msgid "12:34:56:78:90:Aa"
msgstr ""

msgid "MAC2"
msgstr ""

msgid "Bb:Cc:Dd:Ee:Ff:D0"
msgstr ""

msgid "We would execute this in u-boot:"
msgstr ""

msgid "Burning Boot Fuses"
msgstr ""

msgid "Fuses can only be written once! You can brick your board easily by burning the wrong boot configuration. It cannot be reversed!"
msgstr ""

msgid "Which fuse bank/word should be used to program the BOOT_CFGX can be checked in *i.MX 93 Applications Processor Reference Manual* attached spreadsheet named **i.MX93_Fusemap.xlsx**."
msgstr ""

msgid "These values should be written to the BOOT_CFG0, which can be read/written from fuses on Bank 3, Word 0."
msgstr ""

msgid "Boot Device"
msgstr ""

msgid "0x20020002"
msgstr ""

msgid "0x20000103"
msgstr ""

msgid "To set internal fuses to boot from eMMC one can program them with:"
msgstr ""

msgid "In this example we:"
msgstr ""

msgid "set the Boot_Mode to 0b0010 (eMMC) with BOOT_CFG0[3:0],"
msgstr ""

msgid "set the eMMC Bus width to 0b01 (8 bit) with BOOT_CFG0[18:17]"
msgstr ""

msgid "set the BT_FUSE_SEL (Boot fuses already programmed) bit with BOOT_CFG0[29]"
msgstr ""

msgid "Make sure you set the right bits by reading the **Boot Fusemap** chapter in *i.MX 93 Applications Processor Reference Manual*."
msgstr ""

msgid "In addition to the Cortex-A55 cores, there is a Cortex-|mcore| as MCU integrated into the |soc| SoC. Our Yocto-Linux-BSP runs on the A55-Cores and the |mcore| can be used as a secondary core for additional tasks using bare-metal firmware. Both cores have access to the same peripherals and thus peripheral usage needs to be limited either in the |mcore|'s firmware or the devicetree for the Linux operating system."
msgstr ""

msgid "Our Yocto-BSP contains pre-built firmware examples for |mcore| from NXP."
msgstr ""

msgid "This section describes how to run pre-built |mcore| firmware examples on |sbc|."
msgstr ""

msgid "There are two ways to run the |mcore| firmware examples, from U-Boot bootloader and from Remoteproc subsystem within a running Linux."
msgstr ""

msgid "On |sbc| an external \"USB TTL to serial adapter\" is required. Adapter's I/O pins should be able to operate at 3.3V voltage levels."
msgstr ""

msgid "Connect external \"USB TTL to serial adapter\" signals to the |ref-m-core-connections| connector on the board according to the following table:"
msgstr ""

msgid "USB-TTL adapter pins"
msgstr ""

msgid "X16 signal"
msgstr ""

msgid "X16 pin"
msgstr ""

msgid "RXD"
msgstr ""

msgid "X_UART2_TX"
msgstr ""

msgid "TXD"
msgstr ""

msgid "X_UART2_RX"
msgstr ""

msgid "8"
msgstr ""

msgid "GND"
msgstr ""

msgid "To load firmware examples using the U-Boot bootloader, the ``bootaux`` command can be used:"
msgstr ""

msgid "List available |mcore| firmware examples on the first partition of SD Card:"
msgstr ""

msgid "Available firmware examples start with ``imx93-11x11-evk_m33_TCM_*`` and end with ``*.bin``. Examples come from NXP's Yocto layer meta-imx and are selected based on compatibility with |sbc| hardware."
msgstr ""

msgid "Load desired firmware example:"
msgstr ""

msgid "Remoteproc is a module that allows you to control the |mcore| from Linux during runtime. Firmware examples for |mcore| can be loaded and the execution started or stopped within Linux. To use Remoteproc a devicetree overlay needs to be set:"
msgstr ""

msgid "Edit the ``bootenv.txt`` file located in the ``/boot`` directory on the target by adding |dtbo-rpmsg|:"
msgstr ""

msgid "Firmware examples ``*.elf`` files for the |mcore| can be found under ``/lib/firmware``. List available firmware examples:"
msgstr ""

msgid "To load the firmware, type:"
msgstr ""

msgid "The samples found in ``/lib/firmware`` on the target come from NXP's Yocto layer meta-imx and are selected based on compatibility with |sbc| hardware."
msgstr ""

msgid "Some firmware examples from NXP require additional Linux kernel modules to be loaded."
msgstr ""

msgid "For example, when loading ``imx93-11x11-evk_m33_TCM_rpmsg_lite_str_echo_rtos.elf`` firmware, one requires corresponding ``imx_rpmsg_tty`` module to be loaded:"
msgstr ""

msgid "This exposes an RPMsg endpoint as a virtual TTY at ``/dev/ttyRPMSG30``. Now it is possible to send messages from A55 Core to |mcore| by typing:"
msgstr ""

msgid "Observing |mcore| debug UART should result in the following output:"
msgstr ""

msgid "2024/05/07"
msgstr ""

msgid "**Console examples in this BSP manual only focus on phyBOARD-Segin i.MX 93. Similar commands can also be executed for/on phyBOARD-Nash i.MX 93**"
msgstr ""

msgid "Connect the targets debug console with your host. Use |ref-debugusbconnector|."
msgstr ""

msgid "Open serial/usb port with 115200 baud and 8N1 (you should see u-boot/linux start on the console"
msgstr ""

msgid "**imx93-phyboard-*.dtb**: Kernel device tree file"
msgstr ""

msgid "**phytec-qt6demo-image-phyboard-*-imx93-*.tar.gz**: when bitbake-build was processed for ``phytec-qt6demo-image``"
msgstr ""

msgid "**phytec-headless-image-phyboard-*-imx93-*.tar.gz**: when bitbake-build was processed for ``phytec-headless-image``"
msgstr ""

msgid "**phytec-qt6demo-image-phyboard-*-imx93-*.wic.xz**: when bitbake-build was processed for ``phytec-qt6demo-image``"
msgstr ""

msgid "**phytec-headless-image-phyboard-*-imx93-*.wic.xz**: when bitbake-build was processed for ``phytec-headless-image``"
msgstr ""

msgid "Hardware revision baseboard:"
msgstr ""

msgid "phyBOARD-Segin-i.MX 93: 1472.5"
msgstr ""

msgid "phyBOARD-Nash-i.MX 93: 1616.0"
msgstr ""

msgid "Available overlays for phyboard-nash-imx93-1.conf are:"
msgstr ""

msgid "The device tree representation for UART1 pinmuxing: :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.55_2.2.0-phy3#n262`"
msgstr ""

msgid "|sbc| provides two ethernet interfaces."
msgstr ""

msgid "On **phyBOARD-Segin** we have:"
msgstr ""

msgid "a 100 megabit Ethernet provided by |som|"
msgstr ""

msgid "and 100 megabit Ethernet provided by phyBOARD."
msgstr ""

msgid "On **phyBOARD-Nash** we have:"
msgstr ""

msgid "and 1 gigabit Ethernet provided by phyBOARD."
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.55_2.2.0-phy3#n216` or here: :imx-dt:`imx93-phyboard-nash.dts?h=v6.1.55_2.2.0-phy3#n201`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :imx-dt:`imx93-phycore-som.dtsi?h=v6.1.55_2.2.0-phy3#n194` or here:"
msgstr ""

msgid "ADC"
msgstr ""

msgid "The PHYTEC |soc| include general purpose Analog-to-Digital Converters (ADC) which can be used for interfacing analog sensors."
msgstr ""

msgid "Reading the ADC values can be done through sysfs:"
msgstr ""

msgid "On phyBOARD-Nash the ADC lines are accessible on X16 expansion connector:"
msgstr ""

msgid "ADC input"
msgstr ""

msgid "ADC_IN0"
msgstr ""

msgid "47"
msgstr ""

msgid "ADC_IN2"
msgstr ""

msgid "49"
msgstr ""

msgid "Device tree configuration for the User I/O configuration can be found here: :imx-dt:`imx93-phyboard-segin-peb-eval-01.dtso?h=v6.1.55_2.2.0-phy3#n33`"
msgstr ""

msgid "General I²C1 bus configuration (e.g. |dt-som|.dtsi): :imx-dt:`imx93-phycore-som.dtsi?h=v6.1.55_2.2.0-phy3#n88`"
msgstr ""

msgid "General I²C2 bus configuration for |dt-carrierboard|.dts: :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.55_2.2.0-phy3#n155` or for imx93-phyboard-nash.dts: :imx-dt:`imx93-phyboard-nash.dts?h=v6.1.55_2.2.0-phy3#n113`"
msgstr ""

msgid "DT representation, e.g. in phyCORE-|soc| file can be found in our PHYTEC git: :imx-dt:`imx93-phycore-som.dtsi?h=v6.1.55_2.2.0-phy3#n172`"
msgstr ""

msgid "DT representation for I²C RTCs: :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.55_2.2.0-phy3#n173` or :imx-dt:`imx93-phyboard-nash.dts?h=v6.1.55_2.2.0-phy3#n122`"
msgstr ""

msgid "DT representation for USB Host: :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.55_2.2.0-phy3#n190` or :imx-dt:`imx93-phyboard-nash.dts?h=v6.1.55_2.2.0-phy3#n180`"
msgstr ""

msgid "The **phyBOARD-Nash** i.MX 93 SoC provides one RS232/RS485 serial port."
msgstr ""

msgid "RS232 with HW flow control and RS485 are not working due to HW bug on the phyBOARD-Nash PCB revision 1616.0"
msgstr ""

msgid "The device tree representation for RS232 and RS485: :imx-dt:`imx93-phyboard-nash.dts?h=v6.1.55_2.2.0-phy3#n173`"
msgstr ""

msgid "Device Tree CAN configuration of |dt-carrierboard|.dts: :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.55_2.2.0-phy3#n147` or :imx-dt:`imx93-phyboard-nash.dts?h=v6.1.55_2.2.0-phy3#n105`"
msgstr ""

msgid "Audio on phyBOARD-Segin"
msgstr ""

msgid "On phyBOARD-Segin i.MX 93 the TI TLV320AIC3007 audio codec is used. It uses I2S for data transmission and I2C for codec control. The audio signals available are:"
msgstr ""

msgid "Device Tree Audio configuration: :imx-dt:`imx93-phyboard-segin.dts?h=v6.1.55_2.2.0-phy3#n62`"
msgstr ""

msgid "Audio on phyBOARD-Nash"
msgstr ""

msgid "Due to HW bug Audio is broken on phyBOARD-Nash i.MX 93 PCB revision: 1616.0"
msgstr ""

msgid "To use audio with phyBOARD-Nash an additional adapter for the Audio/Video connector is needed. The PEB-AV-10 (1531.1 revision) can be bought separately to the Kit. PEB-AV-10 is populated with a TI TLV320AIC3007 audio codec. Audio support is done via the I2S interface and controlled via I2C."
msgstr ""

msgid "Device Tree Audio configuration: :imx-dt:`imx93-phyboard-nash-peb-av-010.dtso?h=v6.1.55_2.2.0-phy3#n57`"
msgstr ""

msgid "The device tree of PEB-AV-02 can be found here: :imx-dt:`imx93-phyboard-segin-peb-av-02.dtso?h=v6.1.55_2.2.0-phy3`"
msgstr ""

msgid "The device tree of PEB-AV-10 can be found here: :imx-dt:`imx93-phyboard-nash-peb-av-010.dtso?h=v6.1.55_2.2.0-phy3`"
msgstr ""

msgid "TPM"
msgstr ""

msgid "The **phyBOARD-Nash** i.MX 93 is equipped with a Trusted Platform Module (TPM) that provides hardware-based security functions."
msgstr ""

msgid "Here are some useful examples to work with the TPM"
msgstr ""

msgid "Generate 4-byte random value with TPM2 tools:"
msgstr ""

msgid "Generate 4-byte random value with OpenSSL tools:"
msgstr ""

msgid "Generate RSA private key and validate its contents:"
msgstr ""

msgid "Do NOT share your private RSA keys if you are going to use these keys for any security purposes."
msgstr ""

msgid "Generate RSA public key and validate its contents:"
msgstr ""

msgid "Device tree TPM configuration can be found here: :imx-dt:`imx93-phyboard-nash.dts?h=v6.1.55_2.2.0-phy3#n151`"
msgstr ""

msgid "2024/10/08"
msgstr ""

msgid "**phytec-\\*.rootfs.wic.xz**: Compressed bootable SD card image of bitbake-image that was built. Includes bootloader, DTBs, Kernel and Root file system."
msgstr ""

msgid "**phytec-qt6demo-image-phyboard-*-imx93-*.rootfs.wic.xz**: when bitbake-build was processed for ``phytec-qt6demo-image``"
msgstr ""

msgid "**phytec-headless-image-phyboard-*-imx93-*.rootfs.wic.xz**: when bitbake-build was processed for ``phytec-headless-image``"
msgstr ""

msgid "|sbc-segin|: 1472.5"
msgstr ""

msgid "|sbc-nash|: 1616.0, 1616.1"
msgstr ""

msgid "These steps will show how to flash the eMMC on Linux with a USB stick. You only need a complete image saved on the USB stick and a bootable WIC image. (e.g. |yocto-imagename|-|yocto-machinename|.rootfs.wic). Set the |ref-bootswitch| to SD Card."
msgstr ""

msgid "The device tree representation for UART1 pinmuxing: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-segin.dts#L259`"
msgstr ""

msgid "On |sbc-segin| we have:"
msgstr ""

msgid "On |sbc-nash| we have:"
msgstr ""

msgid "For now, only |sbc-segin| supports WLAN/Bluetooth features. WLAN/Bluetooth is thus not supported on |sbc-nash| yet."
msgstr ""

msgid "WLAN and Bluetooth on the |sbc-segin| are provided by the PEB-WLBT-05 expansion card. The PEB-WLBT-05 for |sbc-segin| Quickstart Guide shows you how to install the PEB-WLBT-05."
msgstr ""

msgid "With the BSP Version PD24.2.0 and newer, the PEB-WLBT-05 overlay needs to be activated first, otherwise the PEB-WLBT-05 won't be recognized."
msgstr ""

msgid "By default, bluetooth is not supported on |sbc-segin| with PEB-WLBT-05 expansion card due to hard-wired connections. However, it is possible to re-work PEB-WLBT-05 card by adjusting solder pads and enabling bluetooth in the software. Please contact your PHYTEC representative for more information."
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-segin.dts#L213` or here: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-nash.dts#L202`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phycore-som.dtsi#L194` or here:"
msgstr ""

msgid "0x43810000"
msgstr ""

msgid "0x43820000"
msgstr ""

msgid "0x43830000"
msgstr ""

msgid "0x47400000"
msgstr ""

msgid "Set the value of GPIO 3 on chip0 to 0 and daemonize:"
msgstr ""

msgid "When demonizing gpioset command please note that the process is still running in the background and you need to kill it afterward to release the GPIO. Otherwise you might get an error when trying to change state of the same GPIO:"
msgstr ""

msgid "This is the expected behavior in libgpiod version 2."
msgstr ""

msgid "As a workaround it is possible to use the ``-t 0`` switch:"
msgstr ""

msgid "You can also add this option for example to the imx9_phytec_defconfig config in the linux kernel sources under arch/arm64/configs ::"
msgstr ""

msgid "On |sbc-nash| the ADC lines are accessible on X16 expansion connector:"
msgstr ""

msgid "Device tree configuration for the User I/O configuration can be found here: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-segin-peb-eval-01.dtso#L33`"
msgstr ""

msgid "General I²C3 bus configuration (e.g. |dt-som|.dtsi): :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phycore-som.dtsi#L88`"
msgstr ""

msgid "General I²C2 bus configuration for |dt-carrierboard|.dts: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-segin.dts#L155` or for imx93-phyboard-nash.dts: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-nash.dts#L113`"
msgstr ""

msgid "To re-enable EEPROM wire protection, use:"
msgstr ""

msgid "DT representation, e.g. in phyCORE-|soc| file can be found in our PHYTEC git: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phycore-som.dtsi#L172`"
msgstr ""

msgid "DT representation for I²C RTCs: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-segin.dts#L173` or :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-nash.dts#L122`"
msgstr ""

msgid "DT representation for USB Host: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-segin.dts#L193` or :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-nash.dts#L181`"
msgstr ""

msgid "The |sbc-nash| i.MX 93 SoC provides one RS232/RS485 serial port."
msgstr ""

msgid "RS232 with HW flow control and RS485 are not working due to HW bug on the |sbc-nash| PCB revision 1616.0"
msgstr ""

msgid "The device tree representation for RS232 and RS485: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-nash.dts#L174`"
msgstr ""

msgid "Device Tree CAN configuration of |dt-carrierboard|.dts: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-segin.dts#L147` or :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-nash.dts#L105`"
msgstr ""

msgid "Audio on |sbc-segin|"
msgstr ""

msgid "On |sbc-segin| the TI TLV320AIC3007 audio codec is used. It uses I2S for data transmission and I2C for codec control. The audio signals available are:"
msgstr ""

msgid "Device Tree Audio configuration: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-segin.dts#L62`"
msgstr ""

msgid "Audio on |sbc-nash|"
msgstr ""

msgid "Due to HW bug Audio is broken on |sbc-nash| PCB revision: 1616.0"
msgstr ""

msgid "To use audio with |sbc-nash| an additional adapter for the Audio/Video connector is needed. The PEB-AV-10 (1531.1 revision) can be bought separately to the Kit. PEB-AV-10 is populated with a TI TLV320AIC3007 audio codec. Audio support is done via the I2S interface and controlled via I2C."
msgstr ""

msgid "Device Tree Audio configuration: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-nash-peb-av-10.dtso#L56`"
msgstr ""

msgid "The device tree of PEB-AV-02 can be found here: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-segin-peb-av-02.dtso`"
msgstr ""

msgid "The device tree of PEB-AV-10 can be found here: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-nash-peb-av-10.dtso`"
msgstr ""

msgid "Device tree TPM configuration can be found here: :linux-phytec-imx:`blob/v6.6.23-2.0.0-phy8/arch/arm64/boot/dts/freescale/imx93-phyboard-nash.dts#L151`"
msgstr ""

msgid "2025/03/21"
msgstr ""

msgid "|sbc-nash|: 1616.0, 1616.1, 1616.2"
msgstr ""

msgid "The device tree representation for UART1 pinmuxing: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-segin.dts#L263`"
msgstr ""

msgid "WLAN/Bluetooth"
msgstr ""

msgid "WLAN and Bluetooth connectivity are enabled on the |sbc-segin| using the PEB-WLBT-05 expansion card, and on the |sbc-nash| with the PEB-WLBT-07 expansion card. Installation instructions for these WLAN and Bluetooth expansion cards can be found in the \"The PEB-WLBT-05 for |sbc-segin| Quickstart Guide\" and the \"The PEB-WLBT-07 for |sbc-nash| Quickstart Guide\", respectively.\""
msgstr ""

msgid "PEB-WLBT-05 on |sbc-segin|"
msgstr ""

msgid "With PEB-WLBT-05 adapter, we use Sterling-LWB module from LSR for WLAN and Bluetooth support. This module supports 2,4 GHz bandwidth and can be run in several modes, like client mode, Access Point (AP) mode using WEP, WPA, WPA2 encryption, and more. More information about the module can be found at https://connectivity-staging.s3.us-east-2.amazonaws.com/2019-09/CS-DS-SterlingLWB%20v7_2.pdf"
msgstr ""

msgid "For proper Bluetooth operation please make sure to follow the \"The PEB-WLBT-05 for |sbc-segin| Quickstart Guide\" to correctly set jumper J9 & J10 configurations."
msgstr ""

msgid "PEB-WLBT-07 on |sbc-nash|"
msgstr ""

msgid "With the BSP Version PD24.2.1 and newer, the PEB-WLBT-07 overlay needs to be activated first, otherwise the PEB-WLBT-07 won't be recognized."
msgstr ""

msgid "With PEB-WLBT-07 adapter, we use MAYA-W2 from u-blox for WLAN and Bluetooth support. This module supports dual-band 2,4 GHz and 5 GHz bandwidth and can be run in several modes, like client mode, Access Point (AP) mode using WEP, WPA, WPA2 encryption, and more. More information about the module can be found at https://content.u-blox.com/sites/default/files/documents/MAYA-W2_DataSheet_UBX-22009721.pdf"
msgstr ""

msgid "The following WLAN chapter assumes wireless network interface name is ``wlan0``. However with PEB-WLBT-07 adapter the name of the WLAN interface is actually ``mlan0``. Thus when using commands to configure wireless network, substitute ``wlan0`` with ``mlan0`` when using PEB-WLBT-07 on |sbc-nash|."
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-segin.dts#L217` or here: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-nash.dts#L206`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phycore-som.dtsi#L194` or here:"
msgstr ""

msgid "Device tree configuration for the User I/O configuration can be found here: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-segin-peb-eval-01.dtso#L33`"
msgstr ""

msgid "General I²C3 bus configuration (e.g. |dt-som|.dtsi): :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phycore-som.dtsi#L88`"
msgstr ""

msgid "General I²C2 bus configuration for |dt-carrierboard|.dts: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-segin.dts#L159` or for imx93-phyboard-nash.dts: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-nash.dts#L117`"
msgstr ""

msgid "DT representation, e.g. in phyCORE-|soc| file can be found in our PHYTEC git: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phycore-som.dtsi#L172`"
msgstr ""

msgid "DT representation for I²C RTCs: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-segin.dts#L177` or :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-nash.dts#L126`"
msgstr ""

msgid "DT representation for USB Host: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-segin.dts#L196` or :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-nash.dts#L185`"
msgstr ""

msgid "The device tree representation for RS232 and RS485: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-nash.dts#L178`"
msgstr ""

msgid "The CAN configuration is done in the systemd configuration file ``/lib/systemd/network/11-can.network``. For a persistent change of (as an example, the default bitrates), change the configuration in the BSP under ``./meta-ampliphy/recipes-core/systemd/systemd-conf/11-can.network`` in the root filesystem and rebuild the root filesystem."
msgstr ""

msgid "By default, we enable CAN-FD (flexible datarate) in our BSP. In case CAN Classic is required one needs to remove options ``FDMode`` and ``DataBitRate`` from the ``/lib/systemd/network/11-can.network`` file."
msgstr ""

msgid "To disable flexible datarate manually, one can use:"
msgstr ""

msgid "The bitrate can also be changed manually, for example:"
msgstr ""

msgid "Device Tree CAN configuration of |dt-carrierboard|.dts: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-segin.dts#L151` or :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-nash.dts#L109`"
msgstr ""

msgid "Device Tree Audio configuration: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-segin.dts#L62`"
msgstr ""

msgid "Device Tree Audio configuration: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-nash-peb-av-10.dtso#L56`"
msgstr ""

msgid "The device tree of PEB-AV-02 can be found here: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-segin-peb-av-02.dtso`"
msgstr ""

msgid "The device tree of PEB-AV-10 can be found here: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-nash-peb-av-10.dtso`"
msgstr ""

msgid "Device tree TPM configuration can be found here: :linux-phytec-imx:`blob/v6.6.52-2.2.0-phy9/arch/arm64/boot/dts/freescale/imx93-phyboard-nash.dts#L161`"
msgstr ""

msgid "TBD"
msgstr ""

msgid "BSP-Yocto-NXP-i.MX95-ALPHA1"
msgstr ""

msgid "Alpha"
msgstr ""

msgid "In Development"
msgstr ""

msgid "**Libra FPSC Components (top)**"
msgstr ""

msgid "**Libra FPSC Components (bottom)**"
msgstr ""

msgid "Connect the target and the host with **USB-C** on |ref-debugusbconnector| debug USB"
msgstr ""

msgid "**bl31-imx95.bin**: ARM Trusted Firmware binary"
msgstr ""

msgid "**lpddr5_dmem_qb_v202311.bin, lpddr5_dmem_v202311.bin, lpddr5_imem_qb_v202311.bin, lpddr5_imem_v202311.bin**: DDR PHY firmware images"
msgstr ""

msgid "**oei-m33-ddr.bin, oei-m33-tcm.bin**: OEI images"
msgstr ""

msgid "**m33_image-mx95libra.bin**: System Manager image"
msgstr ""

msgid "**imx95-libra-rdk-fpsc*.dtb**: Kernel device tree file"
msgstr ""

msgid "**imx95-phycore-fpsc\\*.dtbo, imx95-libra-rdk-fpsc\\*.dtbo**: Kernel device tree overlay files"
msgstr ""

msgid "The |sbc| features a boot switch with four individually switchable ports to select the |som| default bootsource."
msgstr ""

msgid "The following is an example of the pin muxing of the lpuart7 device in |dt-som|.dtsi:"
msgstr ""

msgid "The first part of the string IMX95_PAD_GPIO_IO37__LPUART7_RX names the pad (in this example IMX95_PAD_GPIO_IO37). The second part of the string (LPUART7_RX) is the desired muxing option for this pad. The pad setting value (hex value on the right) defines different modes of the pad, for example, if internal pull resistors are activated or not. In this case, the internal resistors are enabled."
msgstr ""

msgid "The device tree representation for UART1 pinmuxing: :linux-phytec-imx:`tree/v6.6.52-2.2.0-phy10/arch/arm64/boot/dts/freescale/imx95-phycore-fpsc.dtsi#L429`"
msgstr ""

msgid "|sbc|-|soc| provides three ethernet interfaces. A gigabit Ethernet is provided by our module and board. Additionally there is a 10Gbit Ethernet. Currently only the one Gigabit Ethernet ports are supported (ETH0 and ETH1)."
msgstr ""

msgid "DT configuration for the MMC (SD card slot) interface can be found here: :linux-phytec-imx:`tree/v6.6.52-2.2.0-phy10/arch/arm64/boot/dts/freescale/imx95-phycore-fpsc.dtsi#L624`"
msgstr ""

msgid "DT configuration for the eMMC interface can be found here: :linux-phytec-imx:`tree/v6.6.52-2.2.0-phy10/arch/arm64/boot/dts/freescale/imx95-phycore-fpsc.dtsi#L611`"
msgstr ""

msgid "General I²C bus configuration from SoM (e.g. |dt-som|.dtsi): :linux-phytec-imx:`tree/v6.6.52-2.2.0-phy10/arch/arm64/boot/dts/freescale/imx95-phycore-fpsc.dtsi#L125`"
msgstr ""

msgid "General I²C bus configuration from carrierboard (e.g. |dt-carrierboard|.dts) :linux-phytec-imx:`tree/v6.6.52-2.2.0-phy10/arch/arm64/boot/dts/freescale/imx95-libra-rdk-fpsc.dts#L190`"
msgstr ""

msgid "The system features three I2C EEPROM devices distributed across the SoM and carrier board:"
msgstr ""

msgid "On the |som| SoM:"
msgstr ""

msgid "Board Detection EEPROM (write-protected)"
msgstr ""

msgid "Bus: I2C-0"
msgstr ""

msgid "Address: 0x51"
msgstr ""

msgid "Purpose: Factory configuration for board identification"
msgstr ""

msgid "User EEPROM"
msgstr ""

msgid "Address: 0x50"
msgstr ""

msgid "Purpose: Available for user applications"
msgstr ""

msgid "Device Tree Reference for SoM EEPROMs: :linux-phytec-imx:`tree/v6.6.52-2.2.0-phy10/arch/arm64/boot/dts/freescale/imx95-phycore-fpsc.dtsi#L133`"
msgstr ""

msgid "And on the |sbc| carrier board:"
msgstr ""

msgid "Board Detection EEPROM"
msgstr ""

msgid "Bus: I2C-4"
msgstr ""

msgid "Purpose: Reserved for carrier board identification"
msgstr ""

msgid "Device Tree Reference for Carrier Board: :linux-phytec-imx:`tree/v6.6.52-2.2.0-phy10/arch/arm64/boot/dts/freescale/imx95-libra-rdk-fpsc.dts#L254`"
msgstr ""

msgid "DT representation for I²C RTCs: :linux-phytec-imx:`tree/v6.6.52-2.2.0-phy/arch/arm64/boot/dts/freescale/imx95-phycore-fpsc.dtsi#L152`"
msgstr ""

msgid "And the addions on the carrierboard: :linux-phytec-imx:`tree/v6.6.52-2.2.0-phy/arch/arm64/boot/dts/freescale/imx95-libra-rdk-fpsc.dts#L290`"
msgstr ""

msgid "DT representation for USB Host: :linux-phytec-imx:`tree/v6.6.52-2.2.0-phy10/arch/arm64/boot/dts/freescale/imx95-libra-rdk-fpsc.dts#L358`"
msgstr ""

msgid "Playback devices supported for |sbc| are the TI TLV320AIC3007 audio codec on the PEB-AV-10 connector. On the AV-Connector there is a 3.5mm headset jack with OMTP-standard and an 8-pin header. The 8-pin header contains a mono speaker, headphones, and line in signals."
msgstr ""

msgid "Device Tree Audio configuration: :linux-phytec-imx:`tree/v6.6.52-2.2.0-phy10/arch/arm64/boot/dts/freescale/`"
msgstr ""

msgid "The |sbc| supports up to 3 different display outputs. The following table shows the required extensions and devicetree overlays for the different interfaces. The PEB-AV-20 is not supported yet. For the alpha release, we have included overlays for two different LVDS displays. These displays are ``edt,etml1010g3dra`` or ``powertip,ph128800t006-zhc01``. The name can be found on the back of the display."
msgstr ""

msgid "|dtbo-peb-av-10|"
msgstr ""

msgid "imx95-libra-rdk-fpsc-lvds-etml1010g3dra.dtbo imx95-libra-rdk-fpsc-lvds-ph128800t006-zhc01.dtbo"
msgstr ""

msgid "PEB-AV-20"
msgstr ""

msgid "The default interface is LVDS0 (onboard LVDS)."
msgstr ""

msgid "In our BSP, the default Weston output is set to LVDS-1 (onboard LVDS)."
msgstr ""

msgid "Device tree description of LVDS-0 can be found here: :linux-phytec-imx:`tree/v6.6.52-2.2.0-phy10/arch/arm64/boot/dts/freescale/`"
msgstr ""

msgid "The device tree of LVDS-1 on PEB-AV-10 can be found here: :linux-phytec-imx:`tree/v6.6.52-2.2.0-phy10/arch/arm64/boot/dts/freescale/`"
msgstr ""

msgid "NXP GoPoint demo suite"
msgstr ""

msgid "NXP provides demos for their EVK SBCs. They are bundled in a demo suite called GoPoint. It is advertised as"
msgstr ""

msgid "\"GoPoint for i.MX Applications Processors is for users who are interested in showcasing the various features and capabilities of NXP provided SoCs. The demos included in this application are meant to be easy to run for users of all skill levels, making complex use cases accessible to anyone. Users need some knowledge when setting up equipment on Evaluation Kits (EVKs), such as changing Device Tree Blob (DTB) files.\""
msgstr ""

msgid "GoPoint for i.MX Applications Processors User Guide [GPNTUG]_"
msgstr ""

msgid "Since most of the demos require different accessory hardware to be connected to the SBC to function properly, the list of required hardware will be presented within each demo section."
msgstr ""

msgid "https://www.nxp.com/design/design-center/software/i-mx-developer-resources/gopoint-for-i-mx-applications-processors:GOPOINT"
msgstr ""

msgid "ML Benchmark"
msgstr ""

msgid "ML Benchmark tool allows to easily compare the performance of TensorFlow Lite models running on CPU (Cortex-A) and NPU, without the need to type in any command."
msgstr ""

msgid "NXP [ml_benchmark]_"
msgstr ""

msgid "Note that NXP supplies instructions to run the demo as well. For completeness, references will be supplied."
msgstr ""

msgid "Prerequisites"
msgstr ""

msgid "To be able to run the ML Benchmark demo application, you will need the following:"
msgstr ""

msgid "Yocto Project setup with the PHYTEC BSP being built"
msgstr ""

msgid "Ethernet cable, board connected to the internet"
msgstr ""

msgid "Display for any of the supported SoCs PHYTEC SBCs"
msgstr ""

msgid "Console connection to the SBC from host PC"
msgstr ""

msgid "Yocto Project"
msgstr ""

msgid "Modifications in the Yocto Project are necessary as PHYTEC BSPs do not have the GoPoint suite included by default. Add the following to your local.conf::"
msgstr ""

msgid "Adding this causes the gopoint scripts/ui and the backend ml libraries to be installed, respectively. Build the phytec-qt6demo-image::"
msgstr ""

msgid "and flash the Image to the board."
msgstr ""

msgid "Ethernet"
msgstr ""

msgid "Connect an Ethernet cable to the SBC or make otherwise sure that the SBC has access to the internet. Otherwise the demo application is unable to download a ml model and fails."
msgstr ""

msgid "Connect the Display accompanying the PHYTEC SBC to the SBC. You may also use your own display, however different hardware and/or software may be required. The results for this demo are put out as a graphical UI and when weston is unable to start the demo will not start, either."
msgstr ""

msgid "The accompanying display supports touch. In that case no mouse is necessary. When not using a touch display, a mouse is necessary as you need to click on gui elements."
msgstr ""

msgid "Console"
msgstr ""

msgid "Connect a USB cable from your host PC to the respective port of the SBC."
msgstr ""

msgid "Running the demo"
msgstr ""

msgid "Boot the board. Ensure the display is working. When using your own display, ensure you have the correct dtbo applied and weston starts. Connect to the SBC via debug console and execute::"
msgstr ""

msgid "This will prompt you for a selection of different demos. Use the arrow keys to select the ML Benchmark demo and press Enter. On the display, a TFLite Benchmarking box should appear. The bottom text within the box should say ``Models are ready for inference``. Click/press on ``RUN BENCHMARKS!``. Sometimes the box may disappear, rerun the ML Benchmark in the terminal. NXP explains this and other issues here [ml_benchmark]_."
msgstr ""

msgid "https://github.com/nxp-imx-support/nxp-demo-experience-demos-list/tree/lf-6.6.52_2.2.0/scripts/machine_learning/ml_benchmark#ml-benchmark-tool."
msgstr ""

