The Yocto Project
=================

Yocto Introduction
------------------

Yocto is the smallest SI metric system prefix. Like milli equates to ``m =
10^-3``, and so is yocto ``y = 10^-24``. Yocto is also a project working group
of the `Linux Foundation <https://www.linuxfoundation.org/>`_ and therefore
backed up by several major companies in the field. On the `Yocto Project website
<https://www.yoctoproject.org/>`_ you can read the official introduction:

   The Yocto Project is an open-source collaboration project that provides
   templates, tools, and methods to help you create custom Linux-based systems
   for embedded products regardless of the hardware architecture. It was founded
   in 2010 as a collaboration among many hardware manufacturers, open-source
   operating systems vendors, and electronics companies to bring some order to
   the chaos of embedded Linux development.

As said, the project wants to provide toolsets for embedded developers. It
builds on top of the long-lasting `OpenEmbedded
<https://www.openembedded.org/wiki/Main_Page>`_ project. It is not a Linux
distribution. But it contains the tools to create a Linux distribution
specially fitted to the product requirements. The most important step in
bringing order to the set of tools is to define a common versioning scheme and
a reference system. All subprojects have then to comply with the reference
system and have to comply with the versioning scheme.

The release process is similar to the `Linux kernel <https://kernel.org/>`_.
Yocto increases its version number every six months and gives the release a
codename. The release list can be found here:
https://wiki.yoctoproject.org/wiki/Releases

Core Components
---------------

The most important tools or subprojects of the *Yocto* Project are:

-  Bitbake: build engine, a task scheduler like make, interprets metadata
-  OpenEmbedded-Core, a set of base layers, containing metadata of software, no
   sources
-  Yocto kernel

   -  Optimized for embedded devices
   -  Includes many subprojects: rt-kernel, vendor patches
   -  The infrastructure provided by Wind River
   -  Alternative: classic kernel build â†’ we use it to integrate our kernel into
      *Yocto*

-  *Yocto* Reference BSP: *beagleboneblack*, *minnow max*
-  *Poky*, the reference system, a collection of projects and tools, used to
   bootstrap a new distribution based on *Yocto*

Vocabulary
----------

Recipes
.......

Recipes contain information about the software project (author, homepage, and
license). A recipe is versioned, defines dependencies, contains the URL of the
source code, and describes how to fetch, configure, and compile the sources. It
describes how to package the software, e.g. into different .deb packages, which
then contain the installation path. Recipes are basically written in *Bitbake's*
own programming language, which has a simple syntax. However, a recipe can
contain *Python* as well as a bash code.

Classes
.......

Classes combine functionality used inside recipes into reusable blocks.

Layers
......

A layer is a collection of recipes, classes, and configuration metadata.
A layer can depend on other layers and can be included or excluded one
by one. It encapsulates a specific functionality and fulfills a specific
purpose. Each layer falls into a specific category:

-  Base
-  Machine (BSP)
-  Software
-  Distribution
-  Miscellaneous

*Yocto's* versioning scheme is reflected in every layer as version branches. For
each *Yocto* version, every layer has a named branch in its *Git* repository.
You can add one or many layers of each category in your build.

A collection of OpenEmbedded layers can be found here. The search function is
very helpful to see if a software package can be retrieved and integrated
easily: `layerindex`_

Machine
.......

Machines are configuration variables that describe the aspects of the target
hardware.

Distribution (Distro)
.....................

Distribution describes the software configuration and comes with a set of
software features.

Poky
----

*Poky* is the reference system to define *Yocto* Project compatibility. It
combines several subprojects into releases:

-  *Bitbake*
-  *Toaster*
-  OpenEmbedded Core
-  *Yocto* Documentation
-  *Yocto* Reference BSP

Bitbake
.......

*Bitbake* is the task scheduler. It is written in *Python* and interprets
recipes that contain code in *Bitbake's* own programming language, *Python*, and
bash code. The official documentation can be found here:
https://docs.yoctoproject.org/bitbake/2.8/index.html

Toaster
.......

*Toaster* is a web frontend for *Bitbake* to start and investigate builds. It
provides information about the build history and statistics on created images.
There are several use cases where the installation and maintenance of
a *Toaster* instance are beneficial. PHYTEC did not add or remove any features
to the upstream *Toaster*, provided by *Poky*. The best source for more
information is the official documentation:
https://docs.yoctoproject.org/dev/toaster-manual/index.html

Official Documentation
----------------------

For more general questions about *Bitbake* and *Poky* consult the mega-manual:
https://docs.yoctoproject.org/dev/singleindex.html

