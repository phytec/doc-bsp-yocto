PHYTEC BSP Introduction
=======================

BSP Structure
-------------

The BSP consists roughly of three parts. BSP management, BSP metadata, and BSP
content. The management consists of *Repo* and phyLinux while the metadata
depends on the SOC, which describes how to build the software. The content
comprises PHYTEC's *Git* repositories and external sources.

BSP Management
..............

*Yocto* is an umbrella project. Naturally, this will force the user to base
their work on several external repositories. They need to be managed in a
deterministic way. We use manifest files, which contain an XML data structure,
to describe all git repositories with pinned-down versions. The *Repo* tool and
our phyLinux wrapper script are used to manage the manifests and set up the BSP,
as described in the manifest file.

phyLinux
~~~~~~~~

phyLinux is a wrapper for *Repo* to handle downloading and setting up the BSP
with an "out of the box" experience.

Repo
~~~~

*Repo* is a wrapper around the *Repo* toolset. The phyLinux script will install
the wrapper in a global path. This is only a wrapper, though. Whenever you run
``repo init -u <url>``, you first download the *Repo* tools from *Googles* Git
server in a specific version to the ``.repo/repo`` directory. The next time you
run *Repo*, all the commands will be available. Be aware that the *Repo* version
in different build directories can differ over the years if you do not run *Repo
sync*. Also if you store information for your archives, you need to include the
complete ``.repo`` folder.

*Repo* expects a *Git* repository which will be parsed from the command line. In
the PHYTEC BSP, it is called phy²octo. In this repository, all information about
a software BSP release is stored in the form of a *Repo* XML manifest. This data
structure defines URLs of *Git* servers (called "remotes") and *Git*
repositories and their states (called "projects"). The *Git* repositories can be
seen in different states. The revision field can be a branch, tag, or commit id
of a repository. This means the state of the software is not necessarily unique
and can change over time. That is the reason we use only tags or commit ids for
our releases. The state of the working directory is then unique and does not
change.

The manifests for the releases have the same name as the release itself. It is a
unique identifier for the complete BSP. The releases are sorted by the SoC
platform. The selected SoC will define the branch of the phy²octo *Git*
repository which will be used for the manifest selection.

BSP Metadata
............

We include several third-party layers in our BSP to get a complete *Linux*
distribution up and running without the need to integrate external projects. All
used repositories are described in the following section.

Poky
~~~~

The PHYTEC BSP is built on top of *Poky*. It comes with a specific version,
defined in the *Repo* manifest. *Poky* comes with a specific version of
*Bitbake*. The OpenEmbedded-core layer "meta" is used as a base for our *Linux*
system.

meta-openembedded
~~~~~~~~~~~~~~~~~

OpenEmbedded is a collection of different layers containing the meta description
for many open-source software projects. We ship all OpenEmbedded layers with our
BSP, but not all of them are activated. Our example images pull several software
packages generated from OpenEmbedded recipes.

meta-qt6
~~~~~~~~

This layer provides an integration of *Qt6* in the *Poky*-based root filesystem
and is integrated into our BSP.

meta-nodejs
~~~~~~~~~~~

This is an application layer to add recent Node.js versions.

meta-gstreamer1.0
~~~~~~~~~~~~~~~~~

This is an application layer to add recent GStreamer versions.

meta-rauc
~~~~~~~~~

This layer contains the tools required to build an updated infrastructure with
`RAUC <https://rauc.readthedocs.io/en/latest/index.html>`_. A comparison with
other update systems can be found here: `Yocto update tools
<https://wiki.yoctoproject.org/wiki/System_Update>`_.

meta-phytec
~~~~~~~~~~~

This layer contains all machines and common features for all our BSPs. It is
PHYTEC's `Yocto Board Support Package`_ for all supported hardware (since
*fido*) and is designed to be standalone with *Poky*. Only these two parts are
required if you want to integrate the PHYTEC's hardware into your existing
*Yocto* workflow. The features are:

-  Bootloaders in ``recipes-bsp/barebox/`` and ``recipes-bsp/u-boot/``
-  Kernels in ``recipes-kernel/linux/`` and
   ``dynamic-layers/fsl-bsp-release/recipes-kernel/linux/``
-  Many machines in ``conf/machine/``
-  Proprietary *OpenGL ES/EGL* user space libraries for AM335x and i.MX 6
   platforms
-  Proprietary *OpenCL* libraries for i.MX 6 platforms

meta-ampliphy
~~~~~~~~~~~~~

This is our example distribution and BSP layer. It extends the basic
configuration of *Poky* with software projects described by all the other BSP
components. It provides a base for your specific development scenarios. The
current features are:

-  `systemd <https://www.freedesktop.org/wiki/Software/systemd/>`_ init system
-  Images: ``phytec-headless-image`` for non-graphics applications
-  Camera integration with OpenCV and GStreamer examples for the i.MX 6 platform
   bundled in a ``phytec-vision-image``
-  RAUC integration: we set up basic support for an A/B system image update,
   which is possible locally and over-the-air

meta-qt6-phytec
~~~~~~~~~~~~~~~

This is our layer for Qt6 board integration and examples. The features are:

-  `Qt6 with eglfs backend <https://doc.qt.io/qt-5/embedded-linux.html>`_ for
   PHYTEC's AM335x, i.MX 6 and RK3288 platforms
-  Images: ``phytec-qt6demo-image`` for *Qt6* and video applications
-  A *Qt6* demo application demonstrating how to create a *Qt6* project using
   *QML* widgets and a *Bitbake* recipe for the *Yocto* and *systemd*
   integration. It can be found in
   ``sources/meta-qt6-phytec/recipes-qt/examples/phytec-qtdemo_git.bb``

meta-virtualization
~~~~~~~~~~~~~~~~~~~

-  This layer provides support for building Xen, KVM, Libvirt, and associated
   packages necessary for constructing OE-based virtualized solutions.

meta-security
~~~~~~~~~~~~~

-  This layer provides security tools, hardening tools for Linux kernels, and
   libraries for implementing security mechanisms.

meta-selinux
~~~~~~~~~~~~

-  This layer's purpose is to enable SE Linux support. The majority of this
   layer's work is accomplished in *bbappend* files, used to enable SE Linux
   support in existing recipes.

meta-browser
~~~~~~~~~~~~

-  This is an application layer to add recent web browsers (Chromium, Firefox,
   etc.).

meta-rust
~~~~~~~~~

-  Includes the Rust compiler and the Cargo package manager for Rust.

meta-timesys
~~~~~~~~~~~~

-  Timesys layer for Vigiles Yocto CVE monitoring, security notifications, and
   image manifest generation.

meta-freescale
~~~~~~~~~~~~~~

-  This layer provides support for the i.MX, Layerscape, and QorIQ product
   lines.

meta-freescale-3rdparty
~~~~~~~~~~~~~~~~~~~~~~~

-  Provides support for boards from various vendors.

meta-freescale-distro
~~~~~~~~~~~~~~~~~~~~~

-  This layer provides support for Freescale's Demonstration images for use with
   OpenEmbedded and/or Yocto Freescale's BSP layer.

base (fsl-community-bsp-base)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  This layer provides BSP base files of NXP.

meta-fsl-bsp-release
~~~~~~~~~~~~~~~~~~~~

-  This is the i.MX Yocto Project Release Layer.

BSP Content
...........

The BSP content gets pulled from different online sources when you first start
using *Bitbake*. All files will be downloaded and cloned in a local directory
configured as ``DL_DIR`` in *Yocto*. If you backup your BSP with the complete
content, those sources have to be backed up, too. How you can do this will be
explained in the chapter |ref-gen-source-mirrors|.

Build Configuration
-------------------

The BSP initializes a build folder that will contain all files you
create by running *Bitbake* commands. It contains a ``conf`` folder
that handles build input variables.

-  ``bblayers.conf`` defines activated meta-layers,
-  ``local.conf`` defines build input variables specific to your build
-  ``site.conf`` defines build input variables specific to the development host

The two topmost build input variables are ``DISTRO`` and ``MACHINE``. They are
preconfigured ``local.conf`` when you check out the BSP using phyLinux.

We use "*Ampliphy*" as ``DISTRO`` with our BSP. This distribution will be
preselected and give you a starting point for implementing your own
configuration.

A ``MACHINE`` defines a binary image that supports specific hardware
combinations of module and baseboard. Check the ``machine.conf`` file or our
webpage for a description of the hardware.
